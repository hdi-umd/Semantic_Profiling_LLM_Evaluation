[
    {
        "query": "in terms of the readings, group the similar timestamps for the sants",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "generated",
            "station"
        ],
        "Data column classification": [
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "similarity",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "not clear what readings mean",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[df['Station'] == 'Barcelona - Sants'].groupby('Generated')",
        "Data transformation operation": "groupby, filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "for o3, what is the distribution value",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "o3 value"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"O3 Value\"]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in the whole table, show me the best record of pm10",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "pm10 value",
            "pm10 value"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "didn't specify the rule of best record",
        "Ambiguity resolution": "assume smallest value of pm10",
        "Data transformations": "res=df['PM10 Value']",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "based on their pollution, group the locations together that are similar",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "station",
            "longitude",
            "latitude"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "how to define similar values in pollution",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[[\"Station\", \"Air Quality\"]].value_counts()",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please look at the o3 data and find the minimum number",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "o3 value"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "o3 hour or o3 value?",
        "Ambiguity resolution": "assume o3 value",
        "Data transformations": "res=df['O3 Value']",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in what manner are good air quality records dispersed throughout the monitored region",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "air quality",
            "generated",
            "station"
        ],
        "Data column classification": [
            "keyword",
            "inferred", 
            "inferred"
        ],
        "Low-level visualization task": [
            "distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "synonym",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The good air quality could be split into different time periods (per hour of day, per date)",
        "Ambiguity resolution": "Calculate Summary statistics across all years; Generate good air quality trend for each year",
        "Data transformations": "res=df.groupby(['Generated','Station']).apply(lambda x: x[x['Air Quality'] == 'Good'])",
        "Data transformation operation": "groupby, lambda filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there any outliers in pm10 readings from a temporal perspective",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "pm10 value",
            "generated"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "there are multiple attributes that contain the prefix 'pm 10' such as pm10 value or pm10 quality or pm10 hour",
        "Ambiguity resolution": "assume pm10 value",
        "Data transformations": "res=df[[\"PM10 Value\", \"Generated\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "work out the quality of o3",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "o3 quality"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "unclear what work out the quality means",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"O3 Quality\"]",
        "Data transformation operation": "selecy",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "put the readings in order according to their pm 10 values",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "pm10 value"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df.sort_values(by='PM10 Value')",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is distribution for pm10 value anything other than normal",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "pm10 value"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df['PM10 Value']",
        "Data transformation operation": "groupby",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me a day with extremely bad air quality",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "air quality",
            "generated"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is not clear what attributes to focus on to determine extreme bad air quality",
        "Ambiguity resolution": "select all numeric columns i.e., 03 Value, NO2 value and PM10 value",
        "Data transformations": "k = df[df['Air Quality'] == 'Bad']; res=k.groupby(\"Generated\")[[\"O3 Value\", \"NO2 Value\", \"PM10 Value\"]].mean()",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what days had really bad air quality",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "air quality",
            "generated",
            "station"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "since mentioning \"days\" which means more than one day, what is the standard for bad air quality?",
        "Ambiguity resolution": "Select data entries whose air quality is bad",
        "Data transformations": "res=df.groupby('Generated').apply(lambda x: x[x['Air Quality'] == 'Good'])",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me the count of missing readings in this table",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df.replace({'missing_data': {'NA': np.nan, '-': np.nan}}, inplace=True); missing_readings_count = df.isna().sum()",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the data attribute that has the most na values, for example the hardest data points to collect",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.replace({'NA': np.nan}, inplace=True); na_counts = df.isna().sum(); column_with_most_na = na_counts.idxmax() ",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "describe the change in air quality over one day  describe the change in each air pollutant",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "air quality",
            "generated",
            "stations",
            "o3 value",
            "no2 value",
            "pm10 value"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Air Quality\",\"Generated\",\"O3 Value\",\"NO2 Value\",\"PM10 Value\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "could you search all available values for pm10 quality",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "pm10 quality"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df['PM10 Value'].unique()",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are the o3 value and the pm10 value dependent on each other",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "o3 value",
            "pm10 value"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Dependency"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[[\"O3 Value\",\"PM10 Value\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "across the monitored region, what is the distribution of records for good air quality",
        "dataset": "air_quality_Nov2017.csv",
        "Relevant data columns": [
            "air quality",
            "generated",
            "stations"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "distribution",
            " summarize",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The distribution could be classified by stations and generated time.",
        "Ambiguity resolution": "Show the distribution of records for good air quality on each station across the generated time",
        "Data transformations": "k = df[df[\"Air Quality\"]==\"Good\"]; res=k[['Station', 'Air Quality']].value_counts();",
        "Data transformation operation": "filter, groupby, count",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what months are hurricanes most common",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "month"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "month_counts = df['month'].value_counts();",
        "Data transformation operation": "summarize, sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "where are storms most common depending on the time of year",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "year",
            "lat",
            "long"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['month', 'lat', 'long']].value_counts()",
        "Data transformation operation": "groupby",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there more storms in recent years",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "year",
            "name"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df.groupby('year')[\"name\"].nunique()",
        "Data transformation operation": "groupby, count",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what does the distribution of the storms look like",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "name",
            "status"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df.groupby(\"status\")[\"name\"].nunique()",
        "Data transformation operation": "count",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the most frequent status over the year",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "year",
            "status"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df['status'].value_counts()",
        "Data transformation operation": "count",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the main factor depending on different status (wind, time, pressure, or etc)",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "status",
            "wind",
            "hu_diameter",
            "year",
            "month",
            "day",
            "ts_diameter",
            "pressure"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "This question is too high-level to be resolved using a visualization. the analysis may require deeper statistical questions.",
        "Ambiguity resolution": "fetch all the relevant data",
        "Data transformations": "df['date'] = df['day'].astype(str)+'-'+ df['month'].astype(str)+'-'+df['year'].astype(str); res=df[['status','wind','hu_diameter','date', 'ts_diameter','pressure']]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what was the name of the earliest storm",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "name"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df.sort_values(by=['year', 'month', 'day']).iloc[0]['name']",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many hurricanes",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "status"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "compute derived value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[df['status'] == 'hurricane']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the name of the largest storm",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "name",
            "ts_diameter"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "unclear what largest is in reference to",
        "Ambiguity resolution": "based on domain knowledge use ts_diameter",
        "Data transformations": "res=df[['ts_diameter', \"name\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what storm produced the greatest air pressure",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "pressure",
            "name"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " res=df[['pressure','name']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many storms are named caroline",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "name"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['name'].value_counts()",
        "Data transformation operation": "count",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what storm produced the least air pressure",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "pressure",
            "name"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " res=df[['pressure','name']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what storm had the greatest diameter of tropical storm strength winds",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "wind",
            "status",
            "ts_diameter"
        ],
        "Data column classification": [
            "keyword",
            "data value mention",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "k=df[df[\"status\"]==\"tropical storm\"]; res=k[[\"name\",\"ts_diameter\", \"wind\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what storm had the greatest diameter of hurricane strength winds",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "wind",
            "hu_diameter",
            "status"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "find extremum",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "k=df[df[\"status\"]==\"hurricane\"]; res=k[[\"name\",\"hu_diameter\", \"wind\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many storms occur per year, on average",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "year"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df['year'].value_counts()",
        "Data transformation operation": "groupby",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "on average, what is the first date that a tropical cyclone (tropical depression, tropical storm, or hurricane) forms on every year",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "status",
            "day",
            "month",
            "year"
        ],
        "Data column classification": [
            "data value mention",
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is not possible to calculate and average date",
        "Ambiguity resolution": "identify the first date a storm is formed for every year",
        "Data transformations": "df['date'] = df['day'].astype(str)+'-'+ df['month'].astype(str)+'-'+df['year'].astype(str); res = df[(df['status']== 'tropical cyclone')|(df['status']== 'tropical depression')|(df['status']== 'tropical storm')| (df['status']== 'hurricane')].groupby('year').agg({'date': 'min'}).reset_index('year')",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a correlation between wind speed and air pressure",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "wind",
            "pressure"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['wind', 'pressure']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a correlation between the duration of the storm and wind speed",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "wind"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['date'] = df['month'].astype(str)+'-'+ df['day'].astype(str)+'-'+df['year'].astype(str)+' '+df['hour'].astype(str)+':00:00';  pd.to_datetime(df[\"date\"].astype(str)); result = df.groupby(\"name\")[\"date\"].agg(['min', 'max']); result[['min', 'max']] = result[['min', 'max']].apply(pd.to_datetime);result[\"duration\"] = (result[\"max\"]- result[\"min\"]);",
        "Data transformation operation": "group, summarise, select",
        "New Column Name": "duration",
        "Derivation Specification": "df['date'] = df[['day', 'month', 'year']].agg('-'.join, axis=1);  pd.to_datetime(df[\"date\"]); result = df.groupby(\"name\")[\"date\"].agg(['min', 'max']); result[\"duration\"] = result[\"min\"] - result[\"max\"]",
        "Missing Data Column": ""
    },
    {
        "query": "where have all hurricanes been recorded on the globe where are they more common",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "lat",
            "long",
            "status"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res =df[[\"lat\", \"long\"]].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what lat/long locations are most likely to experience hurricanes",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "lat",
            "long",
            "status"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res =df[[\"lat\", \"long\"]].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what are lengths/timings of hurricane seasons in different regions of the world",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "lat",
            "long",
            "year",
            "month",
            "day"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compute derived value",
            " compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[df['status'] == 'hurricane'].groupby(['lat', 'long', 'month']).size()",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average storm length",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "name",
            "year",
            "month",
            "day",
            "hour"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "length isn't a given column name",
        "Ambiguity resolution": "assume this is a derived column",
        "Data transformations": "df['date'] = df['month'].astype(str)+'-'+ df['day'].astype(str)+'-'+df['year'].astype(str)+' '+df['hour'].astype(str)+':00:00'; pd.to_datetime(df[\"date\"].astype(str)); result = df.groupby(\"name\", as_index=False)[\"date\"].agg(['min', 'max']); result[['min', 'max']] = result[['min', 'max']].apply(pd.to_datetime);result[\"duration\"] = (result[\"max\"]- result[\"min\"]); result = result[['name', 'duration']]",
        "Data transformation operation": "select, groupby, mutate",
        "New Column Name": "date",
        "Derivation Specification": "df['date'] = df[['day', 'month', 'year']].agg('-'.join, axis=1); pd.to_datetime(df[\"date\"])",
        "Missing Data Column": "length"
    },
    {
        "query": "what is the average time that it takes to go from depression to storm",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "year",
            "month",
            "day",
            "hour",
            "status"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred "
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['date'] = df['month'].astype(str)+'-'+ df['day'].astype(str)+'-'+df['year'].astype(str)+' '+df['hour'].astype(str)+':00:00'; pd.to_datetime(df[\"date\"].astype(str)); res = df.groupby(\"name\").apply(lambda x: x[x['status']=='tropical storm']['date'].astype('datetime64[ns]').min() - x[x['status']=='tropical depression']['date'].astype('datetime64[ns]').min())",
        "Data transformation operation": "mutate, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the relationship, if any, between wind and pressure",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "wind",
            "pressure"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['wind', 'pressure']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does wind change over the course of each hurricane",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "wind",
            "status"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "trend",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['status'] == 'hurricane'].groupby(['name', 'day'])['wind']",
        "Data transformation operation": "select, groupby",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "average tropical storm diameter",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "ts_diameter",
            "status"
        ],
        "Data column classification": [
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "compute derived value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[df['status'] == 'tropical storm']['ts_diameter']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the relationship between storm day and hu_diameter",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "day",
            "hu_diameter"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[df['status'] == 'hurricane'].groupby(['name', 'day'])['wind']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there any repeat names of storms",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "name",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby([\"year\", \"name\"]).filter(lambda x: len(x) > 1)",
        "Data transformation operation": "groupby, count, filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what month has the strongest hurricanes",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "month",
            "hu_diameter",
            "status"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "find extremum",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is not clear how strongest is to be defined",
        "Ambiguity resolution": "assume strongest means greatest hu_diameter",
        "Data transformations": "res=df[df['status'].lower() == 'hurricane'][['hu_diameter', 'month']]",
        "Data transformation operation": "groupby, summarize, filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how has wind speed changed over time",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "wind",
            "year",
            "month",
            "day"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df.groupby([\"year\", \"name\"]).filter(lambda x: len(x) > 1)",
        "Data transformation operation": "mutate, groupby",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the maximum pressure of a certain hurricane",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "pressure",
            "status",
            "name"
        ],
        "Data column classification": [
            "keyword",
            "data value mention",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum",
            " summarize",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[df['status'] == 'hurricane'].groupby(\"name\")['pressure'].max()",
        "Data transformation operation": "filter, groupby",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "relationship between position and the strength of the hurricane",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "lat",
            "long",
            "hu_diameter",
            "status"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "dependency",
            " filter"
        ],
        "Low-level visualization task classification": [
            "synonym",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "unclear how to calculate the strength of the hurricane. Position is not a column in the dataset",
        "Ambiguity resolution": "assume strength to be hu_diameter and position to refer to lat & long",
        "Data transformations": "res = df[df['status'] == 'hurricane']; res = res[[\"lat\", \"long\", \"hu_diameter\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "position"
    },
    {
        "query": "average time for each hurricane status",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "status",
            "year",
            "day",
            "month"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compute derived value",
            " compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['date']=df['month'].astype(str)+'-'+ df['day'].astype(str)+'-'+df['year'].astype(str)+' '+df['hour'].astype(str)+':00:00'; pd.to_datetime(df[\"date\"].astype(str)); result = df.groupby([\"name\", \"status\"], as_index=False)[\"date\"].agg(['min', 'max']); result[['min', 'max']] = result[['min', 'max']].apply(pd.to_datetime); result[\"duration\"] = result[\"min\"] - result[\"max\"]; r = result.groupby('status')['duration'].mean()",
        "Data transformation operation": "mutate, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which hurricane lasted the longest",
        "dataset": "atlantic storms.csv",
        "Relevant data columns": [
            "year",
            "month",
            "day",
            "hour",
            "status"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['date']=df['month'].astype(str)+'-'+ df['day'].astype(str)+'-'+df['year'].astype(str)+' '+df['hour'].astype(str)+':00:00'; pd.to_datetime(df[\"date\"].astype(str)); result = df.groupby([\"name\"], as_index=False)[\"date\"].agg(['min', 'max']); result[['min', 'max']] = result[['min', 'max']].apply(pd.to_datetime); result[\"duration\"] = result[\"max\"] - result[\"min\"]; r = result[['name', 'duration']]",
        "Data transformation operation": "mutate, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the sales distribution of type 4046 in 2015",
        "dataset": "avocado.csv",
        "Relevant data columns": [
            "4046",
            "date"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Date'] = pd.to_datetime(df['Date']); df[\"year\"] = df[\"Date\"].dt.year;  k = df[df[\"year\"]==2015];  k=df[[\"year\", \"4046\"]]",
        "Data transformation operation": "mutate, filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what are the groups of regions according to three types of avocados sales ratio",
        "dataset": "avocado.csv",
        "Relevant data columns": [
            "region",
            "4046",
            "4225",
            "4770"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is unclear what 'types of avocados sales ratio' refers to in this dataset",
        "Ambiguity resolution": "assume that this refers to the columns '4046', '4225', and '4770'",
        "Data transformations": "df['total_sales'] = df['4046'] + df['4225'] + df['4770']; df['ratio_4046'] = df['4046'] / df['total_sales']; df['ratio_4225'] = df['4225'] / df['total_sales']; df['ratio_4770'] = df['4770'] / df['total_sales']; region_group_ratios = df.groupby('region')[['ratio_4046', 'ratio_4225', 'ratio_4770']].mean()",
        "Data transformation operation": "mutate, compute, groupby ",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "using the three types of avocado's sales ratio, provide the groups of regions",
        "dataset": "avocado.csv",
        "Relevant data columns": [
            "region",
            "4046",
            "4225",
            "4770"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is unclear what 'types of avocados sales ratio' refers to in this dataset",
        "Ambiguity resolution": "assume that this refers to the columns '4046', '4225', and '4770'",
        "Data transformations": "df['total_sales'] = df['4046'] + df['4225'] + df['4770']; df['ratio_4046'] = df['4046'] / df['total_sales']; df['ratio_4225'] = df['4225'] / df['total_sales']; df['ratio_4770'] = df['4770'] / df['total_sales']; region_group_ratios = df.groupby('region')[['ratio_4046', 'ratio_4225', 'ratio_4770']].mean()",
        "Data transformation operation": "mutate, compute, groupby ",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "provide the distribution of the sales in 2015 of type 4046",
        "dataset": "avocado.csv",
        "Relevant data columns": [
            "4046",
            "date"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"year\"] = pd.to_datetime(df[\"Date\"]).dt.year; k = df[df[\"year\"]==2015]; k=df[[\"year\", \"4046\"]]",
        "Data transformation operation": "mutate, filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the oldest user was born in what year",
        "dataset": "bike.csv",
        "Relevant data columns": [
            "year"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"birthyear\"]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "indicate all the travels taking more than 1000 minutes",
        "dataset": "bike.csv",
        "Relevant data columns": [
            "tripduration"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['tripduration'] = df['tripduration'].replace(',', '', regex=True).astype(float); long_trips = df[df['tripduration'] > 1000]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me a list of the tripe that take longer than 1,000 minutes",
        "dataset": "bike.csv",
        "Relevant data columns": [
            "tripduration"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['tripduration'] = df['tripduration'].replace(',', '', regex=True).astype(float); long_trips = df[df['tripduration'] > 1000]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the distribution of travel times between wells st & elm st and lake shore dr & ohio st",
        "dataset": "bike.csv",
        "Relevant data columns": [
            "tripduration",
            "from_station_name",
            "to_station_name"
        ],
        "Data column classification": [
            "synonym",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "travel_time= df[(df['from_station_name'] == 'Wells St & Elm St') & (df['to_station_name'] == 'Lake Shore Dr & Ohio St') ]; res = travel_time[\"tripduration\"]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the relationship between age and travel time",
        "dataset": "bike.csv",
        "Relevant data columns": [
            "tripduration",
            "year"
        ],
        "Data column classification": [
            "synonym",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "current_year = pd.to_datetime('today').year; df['age'] = current_year - df['birthyear']; age_travel_time_relationship = df[['age', 'tripduration']]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do you know of any trip that would take longer than 1000 minutes",
        "dataset": "bike.csv",
        "Relevant data columns": [
            "tripduration"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['tripduration'] = df['tripduration'].replace(',', '', regex=True).astype(float); long_trips = df[df['tripduration'] > 1000]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me a list of neighborhoods with the number of male births from least to most",
        "dataset": "births.csv",
        "Relevant data columns": [
            "gender",
            "number",
            "neighborhood name"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "since there are two columns with the suffix 'neighborhoods', its not sure which column to use in the analysis",
        "Ambiguity resolution": "assume 'Neighborhood Name' since that data is more meaningful",
        "Data transformations": "res= df[df['Gender'] == 'Boys'].sort_values(by='Number')",
        "Data transformation operation": "filter, sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the distribution of births across all districts in 2017",
        "dataset": "births.csv",
        "Relevant data columns": [
            "number",
            "district name",
            "year"
        ],
        "Data column classification": [
            "inferred",
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "since there are two columns with the suffix 'district', its not sure which column to use in the analysis",
        "Ambiguity resolution": "assume 'District Name' since that data is more meaningful",
        "Data transformations": "res = df[df['Year'] == 2017]; res = df.groupby('District Name')['Number'].mean()",
        "Data transformation operation": "filter, groupby",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "let me know if there are groups of neighborhoods with similar birth gender ratios",
        "dataset": "births.csv",
        "Relevant data columns": [
            "gender",
            "number",
            "neighborhood name"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "synonym"
        ],
        "Low-level visualization task": [
            "compares",
            " culstering"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[[\"Number\", \"Neighborhood Name\", \"Gender\"]]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "retrieve the neighborhood with more than 100 female births in ciutat vella in 2013",
        "dataset": "births.csv",
        "Relevant data columns": [
            "neighborhood name",
            "number",
            "gender",
            "year",
            "district name"
        ],
        "Data column classification": [
            "synonym",
            "inferred",
            "data value mention",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "since there are two columns with the suffix 'neighborhood', its not sure which column to use in the analysis",
        "Ambiguity resolution": "assume 'Neighborhood Name' since that data is more meaningful",
        "Data transformations": "res = df[(df['Year'] == 2013) & (df['District Name'] == 'Ciutat Vella') & (df['Gender'] == 'Girls') & (df['Number'] > 100)]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which neighborhood in ciutat vella has more than 100 females born in the year 2013",
        "dataset": "births.csv",
        "Relevant data columns": [
            "year"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df['District Name'] == 'Ciutat Vella') & (df['Gender'] == 'Girls') & (df['Year'] == 2013) & (df['Number'] > 100)][['Neighborhood Name','Number']]",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "barcelona's districts, please list each",
        "dataset": "births.csv",
        "Relevant data columns": [
            "district name",
            "neighborhood name"
        ],
        "Data column classification": [
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "barcelona' is not a data value in any column. making it impossible to rectify without further information",
        "Ambiguity resolution": "look for values that have a partial completion of barcelona instead of exact strings",
        "Data transformations": "res = df[df['Neighborhood Name'].str.contains(\"barcelona\")]; res= res[[\"Neighborhood Name\", \"District Name\"]]",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution of all births in all districts between 2013 and 2017",
        "dataset": "births.csv",
        "Relevant data columns": [
            "number",
            "district name",
            "year"
        ],
        "Data column classification": [
            "inferred",
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[(df[\"Year\"] >= 2013) & (df[\"Year\"]<=2017)][[\"District Name\", \"Number\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what neighborhood had 56 boys born in 2017",
        "dataset": "births.csv",
        "Relevant data columns": [
            "neighborhood name",
            "number",
            "gender",
            "year"
        ],
        "Data column classification": [
            "synonym",
            "data value mention",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "since there are two columns with the suffix 'neighborhood', its not sure which column to use in the analysis",
        "Ambiguity resolution": "assume 'Neighborhood Name' since that data is more meaningful",
        "Data transformations": "df[(df['Year'] == 2017) & (df['Gender'] == 'Boys') & (df['Number'] == 56)]['Neighborhood Name']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a correlation between acceleration and horsepower",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "timeto60",
            "hp"
        ],
        "Data column classification": [
            "synonym",
            "synonym"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[[\"timeto60\",\"hp\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many heavy cars are in the dataset",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "weightlbs"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "no rule to define how is \"heavy\"",
        "Ambiguity resolution": "show distribution of car weights instead",
        "Data transformations": "df[\"weightlbs\"]",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there any american 5 cylinder cars",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "country",
            "cylinders"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res =df[(df['cylinders'] == 5) & (df['country'] == 'US.')][['cylinders', 'country']].value_counts()",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does displacement relate to fuel economy for cars from europe v usa",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "mpg",
            "cubicinches",
            "country"
        ],
        "Data column classification": [
            "inferred",
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "dependency",
            " filter"
        ],
        "Low-level visualization task classification": [
            "synonym",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[df['country'].isin(['Europe.', 'US.'])][['country','cubicinches', 'mpg']]",
        "Data transformation operation": "groupby, filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which cylinder cars have the highest fuel economy",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders",
            "mpg"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res =df.groupby('cylinders')['mpg'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which countries have the most cars in this dataset",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "country",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            " find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df['country'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which countries have the highest acceleration for cars of different cylinders",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders",
            "country",
            "timeto60"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df.groupby(['country', 'cylinders'])['timeto60'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how do the horsepowers of the cars from different regions change with years",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "country",
            "hp",
            "year"
        ],
        "Data column classification": [
            "synonym",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df.groupby(['country', 'year'])['hp'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the distribution of the number of cylinders of cars based on different origins",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "distribution",
            " compare"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " res=df.groupby('country')['cylinders'].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the correlation between displacement and mpg of cars with different origins",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "mpg",
            "country",
            "cubicinches"
        ],
        "Data column classification": [
            "keyword",
            "synonym",
            "synonym"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['country',\"mpg\",\"cubicinches\"]]",
        "Data transformation operation": "groupby, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "count the number of cars based on their origins",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df['country'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the correlation between horsepower and acceleration",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "synonym",
            "synonym"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['hp','timeto60']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a correlation between cars' horsepower and acceleration",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "synonym",
            "synonym"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['hp','timeto60']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does displacement relate to mpg for individual models, partitioned by country",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "mpg",
            "country",
            "cubicinches"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['country','cubicinches', 'mpg']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does weight relate to acceleration for car models, small multiples by origin",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "weightlbs",
            "timeto60",
            "country"
        ],
        "Data column classification": [
            "inferred",
            "synonym",
            "inferred"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res =df [['country','weightlbs', 'timeto60']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does horsepower relate to acceleration for individual car models",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "synonym",
            "synonym"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['hp', 'timeto60']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "compare the number of models in usa, japan and europe",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res =df[df['country'].isin(['USA', 'Japan', 'Europe'])]['country'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "does higher horsepower mean lower acceleration",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "synonym",
            "synonym"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['hp','timeto60']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many cylinders do cars manufactured in different countries have",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['country','cylinders']].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "compare car cylinder count against acceleration across countries",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders",
            "timeto60",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "synonym",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df.groupby(['country', 'cylinders'])['timeto60'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many cars do each country manufacture",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df['country'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "mileage"
    },
    {
        "query": "what's the mileage for cars based on the number of cylinders present",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "mileage is not a column name in the dataset",
        "Ambiguity resolution": "assume mileage refers to miles per gallon",
        "Data transformations": "res=df.groupby('cylinders')['mpg'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "mileage"
    },
    {
        "query": "does higher cylinder count mean mean lower mileage",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "mileage is not a column name in the dataset",
        "Ambiguity resolution": "assume mileage refers to miles per gallon",
        "Data transformations": "res=df[['cylinders','mpg']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does mileage relate to cylinder count",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "mileage is not a column name in the dataset",
        "Ambiguity resolution": "assume mileage refers to miles per gallon",
        "Data transformations": "res=df.groupby('cylinders')['mpg'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average mpg for different cylinders",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "mpg",
            "cylinders"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df.groupby('cylinders')['mpg'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the relation between horsepower and acceleration",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "synonym",
            "synonym"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['hp','timeto60']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how weight varies each year",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "weightlb",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "mean=df.groupby('year')['weightlbs'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how is acceleration related to horsepower",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " r=df[['timeto60','hp']]",
        "Data transformation operation": "relationship",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how has horsepower changed over time by country",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "hp",
            "year",
            "country"
        ],
        "Data column classification": [
            "synonym",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend",
            " characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df.groupby(['year', 'country'])['hp'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "have cars gotten lighter over time",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "weightlbs",
            "year"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df.groupby('year')['weightlbs'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many models are proudced by each country",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df['country'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average weight of cars over time",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "weightlbs",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('year')['weightlbs'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution of weight across all cars",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "weightlbs"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df['weightlbs']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how much do various cars weigh",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "weightlbs"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df['weightlbs']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the range of weights for all cars",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "weightlbs"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "Determine Range"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df['weightlbs']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "where do the cars originate from",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[\"country\"].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how has avg (horsepower) evolved over time | segregate it by the car origin",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "hp",
            "year",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend",
            " compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df.groupby(['year', 'country'])['hp'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "compare avg (acceleration) with cylinders | segregate the cylinders by their origin",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders",
            "timeto60",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "synonym",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df.groupby(['country', 'cylinders'])['timeto60'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does avg (weight) evolve over the years",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "year",
            "weightlbs"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('year')['weightlbs'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does the acceleration of cars from different countries vary by the number of cylinders",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders",
            "timeto60",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "synonym",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['country', 'cylinders'])['timeto60'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does acceleration vary by weight for cars from different regions",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "timeto60",
            "weightlbs",
            "country"
        ],
        "Data column classification": [
            "synonym",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[[\"weightlbs\", \"timeto60\", \"country\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average mpg for cars with different cylinders",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "mpg",
            "cylinders"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df.groupby('cylinders')['mpg'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does mpg vary by the number of cylinders in a car",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "mpg",
            "cylinders"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[[\"mpg\", \"cylinders\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does acceleration change with horsepower",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "timeto60",
            "hp"
        ],
        "Data column classification": [
            "synonym",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[['timeto60','hp']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does acceleration behave compared to horsepower",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "timeto60",
            "hp"
        ],
        "Data column classification": [
            "synonym",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[['timeto60','hp']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many cars are from each region",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['country'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does mpg compare to displacement, broken out by region",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "mpg",
            "cubicinches",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"mpg\", \"cubicinches\", \"country\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does mpg compare to displacement, for each region",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "mpg",
            "cubicinches",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[[\"mpg\", \"cubicinches\", \"country\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "for each region, how does a car's mpg vary with displacement",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "mpg",
            "cubicinches",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[[\"mpg\", \"cubicinches\", \"country\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how has horsepower changed over time in each region",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "hp",
            "year",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend",
            " compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[['hp','country']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the breakdown of cars by the number of cylinders in each region",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['country','cylinders']].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many cars have various numbers of cylinders in each region",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "cylinders",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['country', 'cylinders']).size()",
        "Data transformation operation": "groupby, count",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average weight of cars by model year",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "year",
            "weightlbs"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('year')['weightlbs'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how has the average weight of cars changed over the years",
        "dataset": "cars.csv",
        "Relevant data columns": [
            "year",
            "weightlbs"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('year')['weightlbs'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how can the population of ashley be illustrated to show distribution across five years",
        "dataset": "co-est2002-01-05.csv",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "data only contains information for 2000 to 2002 so it is impossible to answer questions",
        "Ambiguity resolution": "no resolution",
        "Data transformations": "res=df[[\"County\"]]",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how likely is it that, if i was born in 2000, i was born in a county with no less than 20,000 people",
        "dataset": "co-est2002-01-05.csv",
        "Relevant data columns": [
            "county",
            "year",
            "population"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "no definition provided to determine likelihood. Also there are three columns with data for 2000 it is unclear which one to use.",
        "Ambiguity resolution": "use the census 2000 population column since the other columns might not contain all the data for 2000. Retrieve relevant data columns mentioned in utterance",
        "Data transformations": "df['Census 2000 Population'] = pd.to_numeric(df['Census 2000 Population'].str.replace(',','')); relevantcounties = df[df['Census 2000 Population'] >= 20000 ]; total = df['Census 2000 Population'].sum(); relevantcounties['likelihood'] = relevantcounties[\"Census 2000 Population\"] / total; relevantcounties = relevantcounties[[\"County\", \"Census 2000 Population\", \"likelihood\"]]",
        "Data transformation operation": "mutate",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me the average population rating for ashley in the year 2000",
        "dataset": "co-est2002-01-05.csv",
        "Relevant data columns": [
            "census 2000 population"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "there are three columns with data for 2000 it is unclear which one to use.",
        "Ambiguity resolution": "use the census 2000 population column since the other columns might not contain all the data for 2000",
        "Data transformations": "df['Census 2000 Population'] = pd.to_numeric(df['Census 2000 Population'].str.replace(',','')); df[df['County'] == 'Ashley']['Census 2000 Population'].mean()",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "identify the county that has the least population each year",
        "dataset": "co-est2002-01-05.csv",
        "Relevant data columns": [
            "county",
            "population",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "i1 = df.loc[df['July 1, 2000 Population'].idxmin(), 'County']; i2=df.loc[df['July 1, 2001 Population'].idxmin(), 'County']; i3=df.loc[df['July 1, 2002 Population'].idxmin(), 'County']; out = pd.concat([i1, i2, i3], sort=False)",
        "Data transformation operation": "select, unite",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average population in 2000",
        "dataset": "co-est2002-01-05.csv",
        "Relevant data columns": [
            "population",
            "census 2000 population"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "there are three columns with data for 2000 it is unclear which one to use.",
        "Ambiguity resolution": "use the census 2000 population column since the other columns might not contain all the data for 2000",
        "Data transformations": "res = df['census 2000 Population'].mean()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a regional concentration trend in gdp development",
        "dataset": "european-gdp-and-containerized-tra-2.csv",
        "Relevant data columns": [
            "gdp",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "Trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what concentration trend means here",
        "Ambiguity resolution": "ignore the term concentration and just focus on trend",
        "Data transformations": "res=df[[\"Country\", \"GDP\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how are gdp and mteu correlated",
        "dataset": "european-gdp-and-containerized-tra-2.csv",
        "Relevant data columns": [
            "mteu",
            "gdp"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[['GDP','mTEU']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there an outlier within the value distribution of albinism that causes the result to be skewed",
        "dataset": "Genetic disease.csv",
        "Relevant data columns": [
            "albino"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "Find Anomalies"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[\"ALBINO\"]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "find all the types of genetic diseases with greater than 1,000 patients",
        "dataset": "Genetic disease.csv",
        "Relevant data columns": [
            "albino",
            "autism",
            "deaf-mute",
            "deaf-blind",
            "mentally impaired",
            "physical impaired",
            "visually impaired"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[[\"ALBINO\",  \"AUTISM\", \"DEAF-MUTE\", \"DEAF-BLIND\",\"MENTALLY IMPAIRED\", \"PHYSICAL IMPAIRED\", \"VISUALLY IMPAIRED\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the maximum and minimum number of patients with autism across all regions",
        "dataset": "Genetic disease.csv",
        "Relevant data columns": [
            "autism",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            " Find Extremum"
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "max_autism = df[[\"AUTISM\", \"REGION\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the spatial and temporal correlation of albinism",
        "dataset": "Genetic disease.csv",
        "Relevant data columns": [
            "albino",
            "region"
        ],
        "Data column classification": [
            "synonym",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "this dataset doesn't contain temporal data so it is impossible to calculate temporal correlation. It is also unclear what spatial data this is referencing",
        "Ambiguity resolution": "assume spatial refers to the region column",
        "Data transformations": " df[['ALBINO','REGION']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "temporal "
    },
    {
        "query": "does this data represent outliers in the number of patients",
        "dataset": "Genetic disease.csv",
        "Relevant data columns": [
            "albino",
            "autism",
            "deaf-mute",
            "deaf-blind",
            "mentally impaired",
            "physical impaired",
            "visually impaired"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There is no meaninful way to represent outliers",
        "Ambiguity resolution": "show all outliers in the data",
        "Data transformations": "res=df[[\"REGION\",\"ALBINO\",  \"AUTISM\", \"DEAF-MUTE\", \"DEAF-BLIND\",\"MENTALLY IMPAIRED\", \"PHYSICAL IMPAIRED\", \"VISUALLY IMPAIRED\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "take out the regions with a number of patients larger than 500",
        "dataset": "Genetic disease.csv",
        "Relevant data columns": [
            "albino",
            "region",
            "autism",
            "deaf-mute",
            "deaf-blind",
            "mentally impaired",
            "physical impaired",
            "visually impaired"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compute derived value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['total patients'] = df.sum(axis=1, numeric_only=True); res=df[[\"REGION\", \"total patients\"]]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "looking at the number of people in all regions with a visual impairment, what is the median",
        "dataset": "Genetic disease.csv",
        "Relevant data columns": [
            "visual impairment",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "res = df[[\"VISUALLY IMPAIRED\", \"REGION\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "does the value distribution of albinism look skewed",
        "dataset": "Genetic disease.csv",
        "Relevant data columns": [
            "albino"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['ALBINO']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there an obvious clustering",
        "dataset": "Genetic disease.csv",
        "Relevant data columns": [
            "albino",
            "region",
            "autism",
            "deaf-mute",
            "deaf-blind",
            "mentally impaired",
            "physical impaired",
            "visually impaired"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "no guide provided on how to perform clustering operation",
        "Ambiguity resolution": "select columns",
        "Data transformations": "res=df[[\"REGION\",\"ALBINO\",  \"AUTISM\", \"DEAF-MUTE\", \"DEAF-BLIND\",\"MENTALLY IMPAIRED\", \"PHYSICAL IMPAIRED\", \"VISUALLY IMPAIRED\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "kindly rate the regions on the basis of the number of patients",
        "dataset": "Genetic disease.csv",
        "Relevant data columns": [
            "albino",
            "region",
            "autism",
            "deaf-mute",
            "deaf-blind",
            "mentally impaired",
            "physical impaired",
            "visually impaired"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "sort",
            " summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['total patients'] = df.sum(axis=1, numeric_only=True); df.sort_values(by=\"total patients\"); ",
        "Data transformation operation": "mutate, sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me the movie that received the most nominations",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "nominee",
            "film"
        ],
        "Data column classification": [
            "synonym",
            "synonym"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['film'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "out of the winners for best performance by an actor in a motion picture- musical or comedy from 2003 to 2020, the most abnormal age belongs to which actor",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "win"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            ""
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "age is not a column provided in the question",
        "Ambiguity resolution": "there is no way to answer this question with the data",
        "Data transformations": "res=df[[\"win\"]]",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "age"
    },
    {
        "query": "can you organize the results of the table by sorting the list according to the age of the stars",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "age is not a column provided in the question",
        "Ambiguity resolution": "there is no way to answer this question with the data",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "age"
    },
    {
        "query": "can you list all the results in the table about the movie ' about   '",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "film"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['film'] == 'About Schmidt']",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what was the gender of all actors among all the final winners in the 60th ceremony",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "ceremony",
            "win"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "gender is not a column in this dataset",
        "Ambiguity resolution": "there is no way to answer this question using this dataset. Present the identified columns alone",
        "Data transformations": "df = df[df[\"ceremony\"]==60]; res = df[\"win\"].value_counts()",
        "Data transformation operation": "filter, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "gender"
    },
    {
        "query": "tell me who won the best performance by an actor in a motion picture- drama award at the 60th ceremony",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "ceremony",
            "nominee",
            "category",
            "win"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "data value mention",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['ceremony'] == 60) & (df['category'] == 'Best Performance by an Actor in a Motion Picture - Drama')]; df[[\"nominee\", \"win\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you list all the results in the table about the movie ' about schmidt  '",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "film"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['film'] == 'About Schmidt']",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "i would like to review the dispersement of the amount of nominations",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "nominee"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "there is no specification provided on how to calculate dispersement. ",
        "Ambiguity resolution": "assume they mean count per nominee",
        "Data transformations": "df['nominee'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in the 60th ceremony, the award for best performance by an actor in a motion picture was won by whom",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "ceremony",
            "nominee",
            "category",
            "win"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "data value mention",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['ceremony'] == 60) & (df['category'] == 'Best Performance by an Actor in a Motion Picture')]; df[[\"nominee\", \"win\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which actor was nominated for the most awards",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "nominee"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['nominee'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can the actors nationality impact the outcome",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "nominee",
            "win"
        ],
        "Data column classification": [
            "inferred",
            "synonym"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "since the actors nationality is not contained within the dataset, it is not clear how to answer this question without additional data. How to calculate impact is also not clear from this question",
        "Ambiguity resolution": "this question cannot be answered using this dataset",
        "Data transformations": "df[[\"win\", \"nominee\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "actors nationality"
    },
    {
        "query": "what was the number of candidates that were nominated for best performance by an actor in a motion picture-drama at he 60th ceremony",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "ceremony",
            "nominee"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['ceremony'] == 60) & (df['category'] == 'Best Performance by an Actor in a Motion Picture - Drama')]; df[[\"nominee\", \"win\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total number of movies released in the year 1998",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "year_film"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "summarize",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"year_film\"].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "need release year"
    },
    {
        "query": "can you tell me what movie won best original score in a motion picture in 1997",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "win",
            "year_film",
            "film",
            "category"
        ],
        "Data column classification": [
            "keyword",
            "data value mention",
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['ceremony'] == 60) & (df['category'] == 'Best Performance by an Actor in a Motion Picture')]; df[[\"nominee\", \"win\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the correlation between the nomination and the age of a star",
        "dataset": "golden_globe_awards.csv",
        "Relevant data columns": [
            "nominee"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "age is not a column provided in the question",
        "Ambiguity resolution": "there is no way to answer this question with the data",
        "Data transformations": "res=df[[\"nominee\"]]",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "need age of a star"
    },
    {
        "query": "tell me the distribution for the book ratings",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "averagerating"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['averageRating']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you rearrange the table by book rating in descending order",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "averagerating"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by='averageRating', ascending=False)",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what books have low ratings that seem suspect",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "averagerating",
            "title"
        ],
        "Data column classification": [
            "synonym",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "the definition of 'suspect' is unclear. Also there is no cut off defined for a low rating",
        "Ambiguity resolution": "focus on showing the books with low ratings; assume low to be anything below 2.0",
        "Data transformations": " df[df['averageRating'] < 2]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the book ratings distribution",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "averagerating"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df['averageRating']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which author has worked with dark horse comics most frequently",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "authors",
            "categories"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "find extremum",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "dark_horse_books = df[df['publisher'] == 'Dark Horse Comics']; frequent_author = dark_horse_books['authors'].value_counts().",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please go and get all of the books written in english",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "title",
            "language"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['language'] == 'en']",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there outliers in the book ratings",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "averagerating"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "Find Anomalies"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['averageRating']",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "of fiction books, which are written in english",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "title",
            "catogories",
            "language"
        ],
        "Data column classification": [
            "inferred",
            "data value mention",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df['language'] == 'en') & (df['categories'].str.contains('Fiction'))]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please review this dataset and tell me which authors it includes",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "authors"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['authors'].unique()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many books have been released by dark horse comics",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "publisher",
            "title"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['publisher'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the most expensive book and who published it",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "publisher"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "this dataset does not contain the sell price of books. Without this information it is not possible to answer this question",
        "Ambiguity resolution": "it is not possible to answer this question",
        "Data transformations": "df['publisher'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "price"
    },
    {
        "query": "show a list of similarly rated books",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "averagerating",
            "title"
        ],
        "Data column classification": [
            "synonym",
            "inferred"
        ],
        "Low-level visualization task": [
            "similarity"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "inferred"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('averageRating')['title'].apply(list).reset_index(name=\"similarly_rated_books\")",
        "Data transformation operation": "groupby",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "produce a list of book titles published during the current year",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "title",
            "publisheddate"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "year = datetime.date.today().strftime(\"%Y\"); res = df[df[\"publishedDate\"].str.contains(year, na=False)]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "dark horse comic has how many books",
        "dataset": "google_books_dataset.csv",
        "Relevant data columns": [
            "publisher"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value "
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['publisher'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total number of categories",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "category"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Category'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the total number of categories",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "category"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Category'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what's the size of ' kids paint free- drawing fun '",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "size",
            "app"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['App']=='kids paint free - drawing fun']['Size']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "does a app exist that is much different than the others",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "Find Anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "no defintion provided for 'much different'? Needs more input from user to properly interprete",
        "Ambiguity resolution": "",
        "Data transformations": "res=df[[\"App\"]]",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total amount of genres",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "genres"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"Genres\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the title of the biggest app",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app",
            "size"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Size', 'App']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what apps have a perfect rating and a lot of reviews",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app",
            "rating",
            "reviews"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "target"
        ],
        "Ambiguity in the query": "how to evaluate  \"a lot of\" is undefined",
        "Ambiguity resolution": "sort the resulting dataframe by reviews in descending order",
        "Data transformations": "df=df[(df['Rating'] == 5)]; df.sort_values(by=[\"Reviews\"]); res = df[[\"App\", \"Rating\", \"Reviews\"]]",
        "Data transformation operation": "filter, sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "see if you can locate the most recent gaming app",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "lastupdated",
            "app",
            "category"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "find extremum",
            " filter"
        ],
        "Low-level visualization task classification": [
            "synonym",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df =df[df['Category'] == 'GAME'].sort_values('Last Updated', ascending=False); res=df[[\"App\", \"Category\", \"Last Updated\"]] ",
        "Data transformation operation": "filter, sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me free or paid apps have a higher mean rating",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app",
            "rating",
            "type"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(\"Type\")[\"Rating\"].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which genres are included in the dataset",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "genres"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df['Genres'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which apps have support for versions of android lower than 40",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app",
            "android ver"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(~df[\"Android Ver\"].str.contains(\"4.0\", na=False)) | (~df[\"Android Ver\"].str.contains(\"5.0\", na=False))]; res = df[[\"App\", \"Android Ver\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "describe shape of the distribution for the number of installations",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "installs"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"Installs\"].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the app that costs the most",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "price",
            "app"
        ],
        "Data column classification": [
            "synonym",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum",
            " retrieve value"
        ],
        "Low-level visualization task classification": [
            "synonym",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Price_numeric'] = df['Price'].str.replace('$', ''); df.sort_values(by=[\"Price_numeric\"], ascending=False); res = df[[\"App\", \"Price_numeric\"]]",
        "Data transformation operation": "mutate, sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a relationship between the android version of an app and its installations",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "android ver",
            "installs"
        ],
        "Data column classification": [
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Installs\", \"Android Ver\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the most recent version of androids ' discover color '",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "last updated",
            "current ver"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is unclear if 'discover color' is an app name or a version",
        "Ambiguity resolution": "assume 'discover color' is an app name and try to find variables that match that",
        "Data transformations": "df[df['App'] == 'Discover Color'][[\"App\", \"Current Ver\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "when taking different android versions into account, does that have any impact on installation",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "android ver",
            "installs"
        ],
        "Data column classification": [
            "inferred",
            "synonym"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[['Installs','Android Ver']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me a list of all the free business apps that have received rating that were higher than a 45",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app",
            "rating",
            "type",
            "genres"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['Type'] == 'Free') & (df['Category'] == 'BUSINESS')]; df[[\"Rating\", \"App\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the attribute 'rating ' be affected 'installation",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "rating",
            "installs"
        ],
        "Data column classification": [
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Rating','Installs']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what's the price distribution in beauty apps",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "price",
            "category"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Category'] == 'BEAUTY']['Price']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which app has a rating that doesn 't follow a trend between installations, rating and number of reviews",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app",
            "rating",
            "reviews",
            "installs"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['App', 'Rating', 'Reviews', 'Installs']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the app with the most abnormal pattern",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "no definition provided on what is considered a normal or abnormal pattern. ",
        "Ambiguity resolution": "the best way to identify what is considered abnormal is to focus on the quantiative attributes in the dataset",
        "Data transformations": "df[[\"App\", \"Rating\", \"Reviews\", \"Size\", \"Installs\", \"Price\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there an unusually high number of reviews for any of the apps",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app",
            "reviews"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "reviews_outliers = df[['Reviews', 'App']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution of the number based on shape of installations",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "installs"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "there is no attribute named number in the dataset",
        "Ambiguity resolution": "ignore this attribute",
        "Data transformations": "df['Installs']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "number"
    },
    {
        "query": "is there an effect on price caused by the app's genre",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "genre",
            "price"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Price','Genres']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a correlation between apps with more installations and higher ratings",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "install",
            "rating"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Installs_numeric'] = df['Installs'].str.replace('+', '').replace(',','');df[['Installs_numeric', 'Rating']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the most pricey apps by release date, recent to oldest",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "price",
            "last updated"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by=['Price', 'Last Updated'], ascending=[False, False])",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "find out any app that is distinctive from the rest",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "the term 'distinctive from the rest' is really not clear. There is no proper way to interprete this",
        "Ambiguity resolution": "the best way to identify handle this ambiguity is to focus on the quantiative attributes in the dataset",
        "Data transformations": "df[[\"App\", \"Rating\", \"Reviews\", \"Size\", \"Installs\", \"Price\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "list the top 10 gaming apps sorted from highest to lowest installations",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "rating",
            "category"
        ],
        "Data column classification": [
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "sort",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "tagerted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[df['Category'] == 'GAME'].sort_values('Rating', ascending=False).head(10)",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the price distribution of all the beauty apps",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "price",
            "genre"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Category']=='Beauty']; df = df[\"Price\"]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name any apps that can support any version of android lower than 40",
        "dataset": "googleplaystore.csv",
        "Relevant data columns": [
            "app",
            "android ver"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(~df[\"Android Ver\"].str.contains(\"4.0\", na=False)) | (~df[\"Android Ver\"].str.contains(\"5.0\", na=False))]; res = df[[\"App\", \"Android Ver\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what differences are there among the students who acquired more than 270 points between 2010-2019",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "total"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Since the data doesn't contain any temporal information, it is impossible to filter students scores between 2010-2019. It is also unclear what or how differences are supposed to be evaluated?",
        "Ambiguity resolution": "Focus on filtering out based on total points and just show all the data for each student",
        "Data transformations": "df= df[df[\"Total Points\"] > 270]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "year"
    },
    {
        "query": "tell me all of the categories of grade types",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "grade"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Grade'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "use the midterm exam and final exam as the 2nd and 1st keywords respectively in order to assign a rank to every one of the students",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "final exam",
            "mid-term exam"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred "
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"name\"] = df[\"First Name\"] + \" \" + df[\"Last Name\"]; rank = df.groupby(\"name\")[[\"Mid-term exams\", \"Final exam\"]].rank(ascending=False)",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what did the majority of students receive as a grade",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "grade"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Grade'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "use the final exam as the first keyword and midterm exam as the second keyword to rank all the students",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "final exam",
            "mid-term exam"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred "
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"name\"] = df[\"First Name\"] + \" \" + df[\"Last Name\"]; rank = df.groupby(\"name\")[[\"Mid-term exams\", \"Final exam\"]].rank(ascending=False)",
        "Data transformation operation": "mutate, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the scope, among all the students, of the cw2 score",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "cw2"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['CW 2']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in cw1, how many students achieved the feat of 100%, or full marks",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "cw1"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"CW 1\"]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "rank the grades from highest to lowest according to the average score",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "grade",
            "student average"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"rank\"] = df.groupby('Grade')['Student Average'].rank(method=\"dense\", ascending=False); res = df[[\"rank\", \"Grade\", \"Student Average\"]]",
        "Data transformation operation": "mutate, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the median score of the cw1 class",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "cw1"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value "
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['CW 1']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do you know the median score of all students in cw1",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "cw1"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value "
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['CW 1']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many students received an a",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "grade"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"Grade\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "select all cw1 scores not less than 80%",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "cw1"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['CW 1'] >= '80%']",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "arrange the students by grade and furnish me with a list",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "grade"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('Grade')",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution of the total points of the students",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "total points"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Total Points']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "was the same midterm exam given to velma paul and glynis caine",
        "dataset": "grade-records.csv",
        "Relevant data columns": [
            "mid-term exam",
            "first name",
            "last name"
        ],
        "Data column classification": [
            "keyword",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is impossible to answer this question without additional data on the nature of the mid-term exam",
        "Ambiguity resolution": "cannot resolve this",
        "Data transformations": "res=df[[\"First Name\",\"Last Name\",\"Mid-term exams\"]]",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the relationship between level of education and crime rate",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "education"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "crime rate is not defined in this prompt. It is unclear how to measure it",
        "Ambiguity resolution": "present the overall number of crimes ber education category",
        "Data transformations": "res = df[\"education\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there any visible trends in violent crime rates over the time period",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "date",
            "n_killed"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "violent crime rate is undefined. No insight provided on how to measure it",
        "Ambiguity resolution": "assume violent crime rates refers to cases where people were killed.",
        "Data transformations": "df.groupby(\"date\")[\"n_killed\"].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the most frequent place of violent crime",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "place"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"place\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there any correlations between crime types and geographic location",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "intent",
            "place"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "there are multiple columns that contain geographic information. It is unclear which columns should be used here",
        "Ambiguity resolution": "select data on the place of crime",
        "Data transformations": "df[[\"intent\", \"place\"]].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution for non-violent crimes based on age",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "intent",
            "age"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "how to measure non-violent crimes is unclear since not enough explanation was provided in prompt",
        "Ambiguity resolution": "present data for all crimes based on age and allow user make interpretation",
        "Data transformations": "df[[\"intent\", \"age\"]].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there any correlations in violent or non-violent crimes based on congressional district and year",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "year",
            "congressional_district",
            "n_killed"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "how to measure violent or non-violent crimes is unclear since not enough explanation was provided in prompt",
        "Ambiguity resolution": "present data for all crimes that had at least one person killed",
        "Data transformations": "df[[\"year\", \"n_killed\", \"congressional_district\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a somewhat even distribution between the year and congressional district",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "year",
            "congressional_district"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is unclear what even distribution means",
        "Ambiguity resolution": "show groupings of year and congressional district",
        "Data transformations": "df[[\"year\", \"congressional_district\"]].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what city has the highest crime rate",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "city_or_county"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "crime rate is not defined",
        "Ambiguity resolution": "assume count of all crimes",
        "Data transformations": "df[\"city_or_county\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what\u2019s the frequency of gun violence incidents with multiple victims",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "n_killed",
            "n_injured"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"number of victims\"] = df[\"n_killed\"] + df[\"n_injured\"]; df[\"number of victims\"]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many gun violence incidents are there each year",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "year"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"year\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there any significant correlations between any 2 variables in the dataset",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many incidents of gun violence result in death (ie what proportion are fatal vs non-fatal)",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "n_killed"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"fatal\"] = np.where(df['n_killed'] >0,'fatal', 'non-fatal'); df[\"fatal\"].value_counts()",
        "Data transformation operation": "mutate, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what\u9225\u6a9a the frequency of gun violence incidents with multiple victims",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "n_killed",
            "n_injured"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"number of victims\"] = df[\"n_killed\"] + df[\"n_injured\"]; df[\"number of victims\"]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are males or females more likely to die of gun violence",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "sex"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"sex\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is one sex more likely to perpetrate gun violence",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "sex"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"sex\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is more gun violence committed with stolen guns or non stolen guns",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "gun_stolen"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"gun_stolen\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how have homicide rates increased over time",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "year",
            "intent"
        ],
        "Data column classification": [
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "trend",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df[\"intent\"] == \"homicide\"] ; df[\"year\"].value_counts()",
        "Data transformation operation": "filter, summarize, groupby",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what type of gun violence has seen the most growth over the years",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "intent",
            "year"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            " trend"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"year\", \"intent\"]].value_counts() ",
        "Data transformation operation": "filter, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are most gun death because of suicide",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "intent"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['intent'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "did most gun violence happen inside home",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "place"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"place\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the correlation between education levels and suicide rates",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "education",
            "intent"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "correlate",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"intent\", \"education\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which state/year has the most gun deaths",
        "dataset": "GunViolence.csv",
        "Relevant data columns": [
            "state",
            "year",
            "n_killed"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploaratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(\"year\", \"state\")['n_killed'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "according to population, what is the rank of each of region",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "population",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"rank\"] = df.groupby(\"Region\")[\"Population\"].rank(ascending=False); df[[\"rank\", \"Region\", \"Population\"]]",
        "Data transformation operation": "mutate, groupby, sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the number of hospitals located in manyara",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "hospital",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value ",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Region\", \"Hospital\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which 10 regions have the most health centers",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "health centre",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df.sort_values(by=[\"Health Centre\"], ascending=False); res = df.loc[:10, [\"Region\", \"Health Centre\"]]",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "look up regions that names start with the letter a",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "region"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df['Region'].str.startswith('A')) | (df['Region'].str.startswith('a'))]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "make a list of the number of total hfs in descending order",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "total hfs"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by=[\"Total HFs\"], ascending=False); df[\"Total HFs\"]",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average count of hospitals",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "hospital"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Hospital']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the number of clinics that are in mara",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "clinic",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "Filter",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.loc[df['Region'] == 'Mara'][ 'Clinic']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what's the distribution of the entire hfs",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "total hfs",
            "hospital",
            "health centre",
            "dispensary",
            "clinic"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is unclear if hfs is refering to the column Total HFs or all the columns that contain details on health facilities",
        "Ambiguity resolution": "assume hfs means all health facilities in data",
        "Data transformations": "df[['Hospital', 'Health Centre', 'Dispensary', 'Clinic', 'Total HFs']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which region has the lowest population ratio of hf",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "ration of population over hf",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['ration of population over HF', 'Region']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "enter the regions from this table",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "region"
        ],
        "Data column classification": [
            "region"
        ],
        "Low-level visualization task": [
            "retrieve value "
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Region'].unique()",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "look for the region that has the most people living in it",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "region",
            "population"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Population', 'Region']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "remove any regions with a population ratio of hf lower than 15",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "ration of population over hf"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['ration of population over HF'] >= 1.5]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the population range needs to be discovered",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "population"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Population']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do any regions have their population ratio over 20 hf",
        "dataset": "HFS.csv",
        "Relevant data columns": [
            "ration of population over hf"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['ration of population over HF'] > 2.0]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "when the score difference is more than 5, please list the extreme matches to this",
        "dataset": "International football results from 1872 to 2019.csv",
        "Relevant data columns": [
            "home_score",
            "away_score"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter",
            " find extremum"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"score diff\"] = abs(df['home_score'] - df['away_score']) ; df[df[\"score diff\"] > 5]",
        "Data transformation operation": "mutate, filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please indicate the friendly tournament matches in which the home team beat the away team",
        "dataset": "International football results from 1872 to 2019.csv",
        "Relevant data columns": [
            "home_score",
            "tournament",
            "away_score",
            "date"
        ],
        "Data column classification": [
            "inferred",
            "data value mention",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted "
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df['tournament'] == 'Friendly') & (df['home_score'] > df['away_score'])]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me all the tournament matches that the home team won against the away team",
        "dataset": "International football results from 1872 to 2019.csv",
        "Relevant data columns": [
            "home_score",
            "away_score",
            "tournament"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted "
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['home_score'] > df['away_score']]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which group of nations won the most games",
        "dataset": "International football results from 1872 to 2019.csv",
        "Relevant data columns": [
            "home_score",
            "away_score",
            "country"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "synonym"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"home_won\"] =  df[\"home_score\"] > df[\"away_score\"]; df[\"away_won\"] = df[\"away_score\"] > df[\"home_score\"]; home_res = df[df[\"home_won\"]==True][\"country\"].value_counts(); away_res = df[df[\"away_won\"]==True][\"country\"].value_counts(); r = home_res.add(away_res, fill_value=0)",
        "Data transformation operation": "mutate, groupby summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "based on the number of matches, can you tell me what the distribution of cities is",
        "dataset": "International football results from 1872 to 2019.csv",
        "Relevant data columns": [
            "city"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['city'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what group of nations of have the most games",
        "dataset": "International football results from 1872 to 2019.csv",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "games_played = df['home_team'].value_counts() + df['away_team'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what countries have won a similar number of games",
        "dataset": "International football results from 1872 to 2019.csv",
        "Relevant data columns": [
            "country",
            "away_score",
            "home_score"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"home_won\"] = df[\"home_score\"] > df[\"away_score\"]; df[\"away_won\"] = df[\"away_score\"] > df[\"home_score\"]; home_res = df[df[\"home_won\"]==True][\"country\"].value_counts(); away_res = df[df[\"away_won\"]==True][\"country\"].value_count(); r = home_res.add(away_res, fill_value=0)",
        "Data transformation operation": "mutate, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do you know which videos have more than 100 tags",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "title",
            "tags"
        ],
        "Data column classification": [
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['tag_count'] = df['tags'].apply(lambda x: len(x.split('|'))); videos_over_100_tags = df[df['tag_count'] > 100]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in the videos by ' eminemvevo ', what are the average number of comments made",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "comment_count",
            "channel_title"
        ],
        "Data column classification": [
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(\"channel_title\")['comment_count'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "filter all the videos published before yesterday",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "publish_time"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which videos are missing thumbnail links",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "thumbnail_link"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['thumbnail_link'].isna()]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "' plush- bad unboxing fan mail ' belongs to which specific channel",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "channel_title"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['title'].str == 'Plush - Bad Unboxing Fan Mail']['channel_title'].iloc[0]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which video has the most tags",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "title",
            "tags"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me a list of videos, ordered by the number of likes, that are on the channel ' eminemvevo '",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "title",
            "likes",
            "channel_title"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['channel_title'].str == 'eminemvevo'].sort_values('likes', ascending=False); df[[{\"title\",\"channel_title\", \"likes\"]]",
        "Data transformation operation": "filter, sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the video with the highest number of tags",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "title",
            "tags"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['tag_count'] = df['tags'].apply(lambda x: len(x.split('|'))); df[\"tag_count\"]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "indicate the number of likes that ' plush- bad unboxing fan mail ' receives",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "likes",
            "title"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "synonym",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['title','likes']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the number if likes from the ' plush- bad unboxing fan mail ' video",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "likes",
            "title"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "synonym",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['title','likes']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "discover the most liked removed video",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "likes",
            "video_error_or_removed",
            "title"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "sort",
            " retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('likes', ascending=False); df[[\"likes\", \"video_error_or_removed\"]]",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there are special characters included in the title",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "title"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['special_chars_in_title'] = df['title'].apply(lambda x: re.search(r'[^a-zA-Z0-9 ]', x).group(0)); special_chars_videos = df[df['special_chars_in_title']].value_counts()",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do videos with longer titles get more attention",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "title",
            "views"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['title_length'] = df['title'].str.len(); title_length_attention_corr = df[['title_length','views']]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me about the ' plush- bad unboxing fan mail ' video",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "channel_title"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['title'].astype(str) == 'Plush - Bad Unboxing Fan Mail']['channel_title']",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you show me how the likes are distributed",
        "dataset": "JPvideos.csv",
        "Relevant data columns": [
            "likes"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['likes']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the propensity of the number of vehicles in japan and korea from the year 2000 to 2010",
        "dataset": "life-expectancy-by-state.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            ""
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "this dataset does not contain any of the information that would be needed to answer this question",
        "Ambiguity resolution": "this question cannot be answered using the provided dataset. Requires additional data",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "does life expectancy have any relation with the percentage of smokers",
        "dataset": "life-expectancy-by-state.csv",
        "Relevant data columns": [
            "percentage of smokers",
            "life expectancy (by years)"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[['Life Expectancy (by years)','Percentage of Smokers']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is the male to female ratio more imbalanced in the last decade in russia",
        "dataset": "life-expectancy-by-state.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            ""
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "this dataset does not contain any of the information that would be needed to answer this question",
        "Ambiguity resolution": "this question cannot be answered using the provided dataset. Requires additional data",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is the speed of economic development relative to the population of each country",
        "dataset": "life-expectancy-by-state.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            ""
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "this data does not exist in the provided dataset",
        "Ambiguity resolution": "this question cannot be answered using the provided dataset. Requires additional data",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the gdp ranking of european countries",
        "dataset": "life-expectancy-by-state.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            ""
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "this dataset does not contain any of the information that would be needed to answer this question",
        "Ambiguity resolution": "this question cannot be answered using the provided dataset. Requires additional data",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "to cluster the states in the us, i wish to use middle income",
        "dataset": "life-expectancy-by-state.csv",
        "Relevant data columns": [
            "state",
            "median income 2007"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"State\", \"Median Income 2007\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do all the countries in africa have a lower average pci than all the countries in europe",
        "dataset": "life-expectancy-by-state.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            ""
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "this dataset does not contain any of the information that would be needed to answer this question",
        "Ambiguity resolution": "this question cannot be answered using the provided dataset. Requires additional data",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "could you tell me the continental location of the poorest ( lowest income ) country",
        "dataset": "life-expectancy-by-state.csv",
        "Relevant data columns": [
            "state",
            "median income 2007"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "this dataset does not contain any of the information about countries or continents so it is unclear how this question should be answered",
        "Ambiguity resolution": "provide the closest estimate by presenting the state data instead",
        "Data transformations": "df.sort_values(by=[\"Median Income 2007\"]); df[[\"State\", \"Median Income 2007\"]]",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "when looking at the average income in european countries, what is the variance",
        "dataset": "life-expectancy-by-state.csv",
        "Relevant data columns": [
            "median income 2007"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "this dataset does not contain any information about european countries so it is not possible to fully answer the question",
        "Ambiguity resolution": "focus on the data that is contained in the dataset",
        "Data transformations": "df[\"Median Income 2007\"]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what are the minimum and maximum populations of the chinese provinces",
        "dataset": "life-expectancy-by-state.csv",
        "Relevant data columns": [
            "population 2007"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum "
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "this dataset does not contain any information about chinese provinces so it is not possible to fully answer the question",
        "Ambiguity resolution": "focus on the data that is contained in the dataset",
        "Data transformations": "df[\"Population 2007\"]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average height of the floors of these buildings",
        "dataset": "list-of-top-100-tallest-buildings.csv",
        "Relevant data columns": [
            "meters",
            "stories"
        ],
        "Data column classification": [
            "inferred",
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Floor Height'] = df['Meters'] / df['Stories']; df[\"Floor Height\"]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "compare the number of tall buildings in hong kong with taiwan",
        "dataset": "list-of-top-100-tallest-buildings.csv",
        "Relevant data columns": [
            "building/city"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "kewyord",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df[\"Building/City\"] ==\"Hong Kong\") | (df[\"Building/City\"]==\"Taiwan\")]; df[\"Building/City\"].value_counts()",
        "Data transformation operation": "filter, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "compare the number of tall buildings in hong kong with taiwan",
        "dataset": "list-of-top-100-tallest-buildings.csv",
        "Relevant data columns": [
            "building/city"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "kewyord",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df[\"Building/City\"] ==\"Hong Kong\") | (df[\"Building/City\"]==\"Taiwan\")]; df[\"Building/City\"].value_counts()",
        "Data transformation operation": "filter, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what location has the highest number of tall buildings",
        "dataset": "list-of-top-100-tallest-buildings.csv",
        "Relevant data columns": [
            "building/city",
            "country/region"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "find extremum "
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "there are multiple columns that satisfy the location criteria. It is unclear which one is actually relevant to user",
        "Ambiguity resolution": "select all location columns",
        "Data transformations": "df[[\"Building/City\", \"Country/Region\"]].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "provide the total sum of all the separated, divorced, and widowed people in lindi",
        "dataset": "marry.csv",
        "Relevant data columns": [
            "separated",
            "divorced",
            "widowed",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "compute derived value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Regions'] == 'Lindi'][['Separated', 'Divorced', 'Widowed']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "does simiyu have a similar structure of peope as that of katavi",
        "dataset": "marry.csv",
        "Relevant data columns": [
            "region"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "similarity",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is unclear how this similarity is to be derived as the instructions do not provide a description",
        "Ambiguity resolution": "select all columns",
        "Data transformations": "df[df[\"Regions\"].isin([\"Simiyu\", \"Katavi\"])]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me how mara attributes are distributed",
        "dataset": "marry.csv",
        "Relevant data columns": [
            "region"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Regions'] == 'Mara']",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is the total attribute of one area equal to the sum of the other attributes in any area",
        "dataset": "marry.csv",
        "Relevant data columns": [
            "total"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['calculated_total'] = df[['Never Married', 'Married', 'Living Together', 'Separated', 'Divorced', 'Widowed']].sum(axis=1); df['total_matches'] = df['Total'] == df['calculated_total']; areas_matching = df[df['total_matches']]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "relationship between imdb rating and rotten tomatoes rating",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "rotten tomatoes rating",
            "imdb rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['IMDB Rating','Rotten Tomatoes Rating']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what's the production budget for movies in different years",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "production budget",
            "release year"
        ],
        "Data column classification": [
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Release Year')['Production Budget'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "movie gross and budget relationship based on genre",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "production budget",
            "major genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')[['Worldwide Gross', 'Production Budget']].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me imdb rating versus rotten tomatoes rating",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "rotten tomatoes rating",
            "imdb rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['IMDB Rating','Rotten Tomatoes Rating']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what creative type of movie had the highest production budget for each content rating",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "production budget",
            "content rating",
            "creative type"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Content Rating', 'Creative Type'])['Production Budget'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the relationship between production budget and worldwide gross for each major genre",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "production budget",
            "major genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[['Production Budget', 'Worldwide Gross', \"Major Genre\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the relationship between release year and average production budget",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "production budget",
            "release year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Release Year')['Production Budget'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what major genre had the highest average worldwide gross",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "major genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "avg_gross_by_genre = df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what major genre had the lowest average worldwide gross",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "major genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "avg_gross_by_genre = df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how much did average worldwide gross vary by major genre",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "major genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "avg_gross_by_genre = df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many movies are there are of each creative type",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "creative type"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df['Creative Type'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which creative type had the most movies",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "creative type"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Creative Type'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which creative type had the fewest movies",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "creative type"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Creative Type'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total worldwide gross for each major genre across time",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "major genre",
            "release year"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Major Genre', 'Release Year'])['Worldwide Gross'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a relationship between production budget and worldwide gross for each content rating",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "production budget",
            "content rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Content Rating','Production Budget', 'Worldwide Gross']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution of running times for each movie",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "running time"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Running Time']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a relationship between imdb rating and rotten tomatoes rating",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "rotten tomatoes rating",
            "imdb rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['IMDB Rating','Rotten Tomatoes Rating']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "movie run time distribution",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "running time"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df['Running Time']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how production budget changes over release years",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "release year",
            "production budget"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df.groupby('Release Year')['Production Budget'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what was the average production budget of movies by year",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "production budget",
            "release year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df.groupby('Release Year')['Production Budget'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what's the average production budget of the different rated movies, separated by creative type",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "production budget",
            "creative type",
            "content rating",
            ""
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred",
            ""
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "there are three different columns that contain ratings. It is unclear which one is actually relevant in the prompt",
        "Ambiguity resolution": "select the content rating column since it is the only column with categorical data and we can interpret different as trying to see categories",
        "Data transformations": "df.groupby(['Content Rating', 'Creative Type'])['Production Budget'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which genre movie makes most worldwide gross",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "movie genre"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are imdb rating and rotten tomatoes rating related",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "rotten tomatoes rating",
            "imdb rating"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['IMDB Rating','Rotten Tomatoes Rating']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the worldwide gross distribution per genre",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "major genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what's the breakdown of production budget by creative type per content rating",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "production budget",
            "content rating",
            "creative type"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Creative Type', 'Content Rating'])['Production Budget'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does rotten tomatoes rating change as imdb rating",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "rotten tomatoes rating",
            "imdb rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['IMDB Rating','Rotten Tomatoes Rating']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total worldwide gross earned by each major genre and content rating",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "content rating",
            "major genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Major Genre', 'Content Rating'])['Worldwide Gross'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "for each genre and rating, what is the total world-wide gross earnings",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "major genre",
            "content rating",
            "worldwide gross"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Major Genre', 'Content Rating'])['Worldwide Gross'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how much did each type of movie earn in across the whole world",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "creative type",
            "worldwide gross"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how much money did movies of each genre and rating make",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "content rating",
            "major genre",
            "worldwide gross"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "there are three different columns that contain ratings. It is unclear which one is actually relevant in the prompt",
        "Ambiguity resolution": "select the content rating column since it is the only column with categorical data and we can interpret different as trying to see categories",
        "Data transformations": "df.groupby(['Major Genre', 'Content Rating'])['Worldwide Gross'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what was the average budget for each content rating and creative type, as multiple column charts",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "content rating",
            "creative type",
            "production budget"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Major Genre', 'Content Rating'])['Production Budget'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average production budget in each year",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "production budget",
            "release year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Release Year')['Production Budget'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "compare imdb rating to rotten tomatoes rating",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "rotten tomatoes rating",
            "imdb rating"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['IMDB Rating','Rotten Tomatoes Rating']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which creative types have the most movies",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "creative type"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Creative Type'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "on average, how much was earned by movies of each genre",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "major genre",
            "worldwide gross"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare",
            " characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many movies are of each length",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "running time"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df['Running Time']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "help me see outliers in imdb and rotten tomatoes ratings",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "rotten tomatoes rating",
            "imdb rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"IMDB Rating\", \"Rotten Tomatoes Rating\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what was the average worldwide gross of movies by genre",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "major genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how much did major genres gross in total",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "major genre",
            "worldwide gross"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "gross across genres regarding content rating",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "content rating",
            "worldwide gross",
            "major genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Major Genre', 'Content Rating'])['Worldwide Gross'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what's the distribution of running times by movie",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "running time"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Running Time']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many movies are there in 20 minute bins of running time",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "running time"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "bins = range(0, int(df['Running Time'].max()) + 20, 20); movies_in_bins = df['Running Time'].value_counts(bins=bins)",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many movies are there for each creative type",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "creative type"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df['Creative Type'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the variation in the amount ordered by different entities in different orders",
        "dataset": "movies.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            ""
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "the entire question is ambigious. None of the requested data map to any of the columns in the dataset",
        "Ambiguity resolution": "cannot answer question without additional data",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "worldwide gross for each genre for each year 1995 to now",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "major genre",
            "release year"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter",
            " compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Release Year'] >= 1995].groupby(['Major Genre', 'Release Year'])['Worldwide Gross'].sum()",
        "Data transformation operation": "filter, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "cumulative gross for each content rating, by major genre",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "content rating",
            "major genre",
            "worldwide gross"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Content Rating', 'Major Genre'])['Worldwide Gross'].cumsum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "relation between worldwide gross and production budget for each major genre",
        "dataset": "movies.csv",
        "Relevant data columns": [
            "worldwide gross",
            "production budget",
            "major genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Worldwide Gross', 'Production Budget', \"Major Genre\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which position has the highest average of playing time",
        "dataset": "nba-players-by-fouls-per-game.csv",
        "Relevant data columns": [
            "pos",
            "mpg"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "since the data column names are abreviations, it is not clear what data column is needed to answer this.",
        "Ambiguity resolution": "Need contextual information about abbrevation/column names to help make sense of column names",
        "Data transformations": "df.groupby(\"Pos\")[\"MPG\"].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name movies released in 2017",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "release_year",
            "title"
        ],
        "Data column classification": [
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['release_year'] == 2017]['title']",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is the normal distribuition satisfied by the length of the movies",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "duration"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['duration_numeric'] = df['duration'].str.extract('(\\d+)').astype(int); distribution = df['duration_numeric']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "sort the movies by length",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "duration",
            "type"
        ],
        "Data column classification": [
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "sort",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['duration_numeric'] = df['duration'].str.extract('(\\d+)').astype(int); df[df['type'] == 'Movie'].sort_values(by='duration_numeric')",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how long is the run time of average r-rated movies",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "duration",
            "rating"
        ],
        "Data column classification": [
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is not possible to calculate the average of a categorical variable",
        "Ambiguity resolution": "ignore average calcuation",
        "Data transformations": "df['duration_numeric'] = df['duration'].str.extract('(\\d+)').astype(int); df[df['rating'] == 'R']['duration_numeric'].mean()",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me the numbers of movies that were released in 2017",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "release_year"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "compute derived value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"release_year\"].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there an average run time for movies",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "duration"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['duration_numeric'] = df['duration'].str.extract('(\\d+)').astype(int); df['duration_numeric']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is the running time of movies recently longer than it used to be",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "release_year",
            "duration"
        ],
        "Data column classification": [
            "inferred",
            "synonym"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['duration_numeric'] = df['duration'].str.extract('(\\d+)').astype(int); df.groupby('release_year')['duration_numeric'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do movie tags and duration have a connection",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "duration",
            "listed_in"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "there is no column mentioned tags",
        "Ambiguity resolution": "use listed_in since it is has a similar meaning as tags",
        "Data transformations": "df['duration_numeric'] = df['duration'].str.extract('(\\d+)').astype(int); df.groupby('listed_in')['duration_numeric'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "determine if the running time of movies has increased in recent years",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "duration",
            "release_year"
        ],
        "Data column classification": [
            "synonym",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['duration_numeric'] = df['duration'].str.extract('(\\d+)').astype(int); df.groupby(\"release_year\")[\"duration_numeric\"].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the dates that netflix released movies",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "date_added",
            "type"
        ],
        "Data column classification": [
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "two columns with temporal information, date_added and release_year. It is unclear which one is needed to answer this question",
        "Ambiguity resolution": "assume dates_added since the question is specific to netflix",
        "Data transformations": " df[df['type'] == 'Movie']['date_added'].value_counts()",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "does any movies not have a description",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "description"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['description'].isnull()]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "at what point was data added to the table for netflix",
        "dataset": "netflix_titles.csv",
        "Relevant data columns": [
            "date_added"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is not clear what data added means since there is no column that contains this information",
        "Ambiguity resolution": "might be a typo so use date_added",
        "Data transformations": "df[\"date_added\"].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the percentage of the white population in blount county, alabama",
        "dataset": "population.csv",
        "Relevant data columns": [
            "white",
            "state",
            "county"
        ],
        "Data column classification": [
            "keyword",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "compute derived value",
            " compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df[\"State\"] == \"alabama\") & (df[\"County\"] ==\"Blount County\")][\"White\"]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what percentage of the blount county, alabama population is white",
        "dataset": "population.csv",
        "Relevant data columns": [
            "white",
            "state",
            "county"
        ],
        "Data column classification": [
            "keyword",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "compute derived value",
            " compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df[\"State\"] == \"alabama\") & (df[\"County\"] ==\"Blount County\")][\"White\"]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "sort all the counties in connecticut by the percentages of the hispanic population",
        "dataset": "population.csv",
        "Relevant data columns": [
            "hispanic",
            "state"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['State'] == 'Connecticut'].sort_values('Hispanic', ascending=False); df[[\"State\", \"County\", \"Hispanic\"]]",
        "Data transformation operation": "filter, sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me which county has the greatest number of female residents",
        "dataset": "population.csv",
        "Relevant data columns": [
            "county",
            "women"
        ],
        "Data column classification": [
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by=\"Women\", ascending=False); df[[\"Women\", \"County\"]]",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "calculate the average black population for each state",
        "dataset": "population.csv",
        "Relevant data columns": [
            "state",
            "black"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Black'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "i want to see the distribution of the school rankings in geita in 2006",
        "dataset": "schools.csv",
        "Relevant data columns": [
            "rank",
            "region",
            "year_of_result"
        ],
        "Data column classification": [
            "keyword",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df['REGION'] == 'GEITA') & (df['YEAR_OF_RESULT'] == 2006)]['RANK']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do the pass rate and the ownership of schools have any correlation",
        "dataset": "schools.csv",
        "Relevant data columns": [
            "ownership",
            "pass_rate"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"OWNERSHIP\", \"PASS_RATE\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "create a list of schools showing the descending order by change_p",
        "dataset": "schools.csv",
        "Relevant data columns": [
            "change_previous_year"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('CHANGE_PREVIOUS_YEAR', ascending=False)[['NAME', 'CHANGE_PREVIOUS_YEAR']]",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you provide a list of school names in geita",
        "dataset": "schools.csv",
        "Relevant data columns": [
            "name",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['REGION'] == 'GEITA']['NAME']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "determine if there are any schools in neighboring regions that have similar avg_m",
        "dataset": "schools.csv",
        "Relevant data columns": [
            "region",
            "avg_mark"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "similarity"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[[\"REGION\", \"AVG_MARK\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me what peacland english medium school's change pre is in 2016",
        "dataset": "schools.csv",
        "Relevant data columns": [
            "change_previous_year",
            "name",
            "year_of_result"
        ],
        "Data column classification": [
            "keyword",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df['NAME'] == 'PEACLAND ENGLISH MEDIUM SCHOOL') & (df['YEAR_OF_RESULT'] == 2016)]['CHANGE_PREVIOUS_YEAR']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "list the values of kwema modern pr  school's change_p in all the years",
        "dataset": "schools.csv",
        "Relevant data columns": [
            "year_of_result",
            "change_previous_year",
            "name"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df[\"NAME\"] == 'KWEMA MODERN PR . SCHOOL'][[\"CHANGE_PREVIOUS_YEAR\", \"YEAR_OF_RESULT\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what schools have similar avg_m in the neighboring region",
        "dataset": "schools.csv",
        "Relevant data columns": [
            "region",
            "avg_mark"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "similarity"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[[\"REGION\", \"AVG_MARK\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which of these school have a pass rate of over 90",
        "dataset": "schools.csv",
        "Relevant data columns": [
            "pass_rate"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['PASS_RATE'] > 90][['NAME', \"PASS_RATE\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "they want to know what tactic is most effective during football",
        "dataset": "shooting_player_info.csv",
        "Relevant data columns": [
            "tactic",
            "goals"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "the metric for determinine efficiency is undefined",
        "Ambiguity resolution": "assume efficiency to mean the number of successful goals over all shooting attempts",
        "Data transformations": "df['efficiency'] = df['goals'] / df['shooting attempts']; most_effective_tactic = df.groupby('tactic')['efficiency'].mean()",
        "Data transformation operation": "mutate, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "were you aware of the most recent news",
        "dataset": "shooting_player_info.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            ""
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "this question is not related to the dataset",
        "Ambiguity resolution": "cannot answer this query",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the clubs should be arranged by their shooting attempts",
        "dataset": "shooting_player_info.csv",
        "Relevant data columns": [
            "shooting attempts"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "this dataset does not contain any information about club",
        "Ambiguity resolution": "show shooting attempts",
        "Data transformations": " df.sort_values('shooting attempts', ascending=False)",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what was the total amount of goals scored in the game that liverpool played in",
        "dataset": "shooting_player_info.csv",
        "Relevant data columns": [
            "game",
            "goals"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['game'].str.contains('Liverpool')]['goals'].sum()",
        "Data transformation operation": "sum",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the games are sorted by experts by their date",
        "dataset": "shooting_player_info.csv",
        "Relevant data columns": [
            "date",
            "game"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "this dataset does not contain any information about experts",
        "Ambiguity resolution": "retrieve data for the given columns",
        "Data transformations": "df['date'] = pd.to_datetime(df['date']); games_sorted_by_date = df.sort_values('date')",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "rank these clubs by their shooting attempts",
        "dataset": "shooting_player_info.csv",
        "Relevant data columns": [
            "shooting attempts"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "rank"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "this dataset does not contain any information about club",
        "Ambiguity resolution": "show shooting attempts",
        "Data transformations": "df = df.groupby('game')['shooting attempts'].sum()",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are the students who are younger more likely to use wechat",
        "dataset": "student_social.csv",
        "Relevant data columns": [
            "age",
            "social app"
        ],
        "Data column classification": [
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "correlate",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"age\", \"social App\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can lower study times among students cause greater failure rates in class",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "studytime",
            "failures"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['studytime','failures']]",
        "Data transformation operation": "correlate",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you name an unusual reason for choosing this school",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "school",
            "reason"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"school\", \"reason\"]].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "could you show me the list sorted by study time ( longest to shortest )",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "studytime"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('studytime', ascending=False)",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "find the distribution by age",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "age"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['age']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me which students have fathers that are teachers",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "fjob"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Fjob'] == 'teacher']",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "retrieve the students with fathers who work as teachers",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "fjob"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Fjob'] == 'teacher']",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the youngest students in the dataset",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "age"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('age', ascending=True)",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the types of jobs the student's mothers have",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "mjob"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Mjob'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "i 'm wondering would the travel time decrease for students if they spent more time studying",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "traveltime",
            "studytime"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['studytime','traveltime']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "would more time spent on studying reduce travel time for students",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "traveltime",
            "studytime"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['studytime','traveltime']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do countries with high populations wish to slow down population growth",
        "dataset": "sub-est2002-01.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "this dataset doesn't contain any data on countries. It is also impossible to tell what countries wish from this data",
        "Ambiguity resolution": "cannot resolve this ambiguity without more information",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the state which may have the largest average population in the next year",
        "dataset": "sub-est2002-01.csv",
        "Relevant data columns": [
            "state",
            "july 1, 2002 population",
            "july 1, 2001 population",
            "july 1, 2000 population",
            "april 1, 2000 population estimates base",
            "census 2000 population"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"avg\"] = df[[ \"July 1, 2002 Population\", \"July 1, 2001 Population\",\"July 1, 2000 Population\", \"April 1, 2000 Population Estimates Base\",\"Census 2000 Population\"]].mean(axis=1); df[[\"State\", \"avg\"]]",
        "Data transformation operation": "mutate, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you see any abnormalities in the suicide rates",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "suicide/100k pop"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['suicides/100k pop']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name the country with the lowest suicide rate",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "suicide/100k pop",
            "country"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df.groupby('country')['suicides/100k pop'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do you know the average number of suicides in europe",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "suicide/100k pop"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "compute derived data"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "since there is no information about continents. Cannot categorize european countries without additional data",
        "Ambiguity resolution": "provide information about countries and let the user make inference themselves",
        "Data transformations": " df.groupby('country')['suicides/100k pop'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "europe"
    },
    {
        "query": "are there any countries with anomalously low suicides rates",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "suicide/100k pop"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['suicides/100k pop']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there similarities between gdp per capita and suicide rates",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "gdp_per_capita ($)",
            "suicide/100k pop"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "similarity"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['gdp_per_capita ($)','suicides/100k pop']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "were there any countries with abnormally low suicide rates",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "suicide/100k pop"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['suicides/100k pop']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "with the suicide larger than 100, determine the ages in albania",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "suicide_no",
            "age"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df['country'] == 'Albania') & (df['suicides_no'] > 100)]['age']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the country with the lowest suicide rate is",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "suicide/100k pop",
            "country"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df.groupby('country')['suicides/100k pop'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution rate of suicide",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "suicide/100k pop"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['suicides/100k pop']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total number of all suicides in 1999",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "suicide_no",
            "year"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(\"year\")[\"suicides_no\"].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "would there be any clustering of countries in terms of suicide rates",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "country",
            "suicide/100k pop"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "clustering"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(\"country\")[\"suicides/100k pop\"].mean(); df[[\"country\", \"suicides/100k pop\"]]",
        "Data transformation operation": "groupby, summarize, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "create a list showing the ages of people who committed suicide in albania",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "age",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df=df[df['country'] == 'Albania']; df['age'].value_counts()",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "for the gdp of china, has it gone up or down over the last decade",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "gdp_per_year ($)",
            "year",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "trend",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['country'] == 'China'].groupby('year')['gdp_for_year ($)'].sum()",
        "Data transformation operation": "filter, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "of all countries, how is the gdp distribution",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "gdp_per_capita ($)"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['gdp_per_capita ($)']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "has there been an increase or decrease in the gdp of china over the last 10 years",
        "dataset": "Suicide.csv",
        "Relevant data columns": [
            "gdp_per_year ($)",
            "year",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "trend",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['country'] == 'China'].groupby('year')['gdp_for_year ($)'].sum()",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how much is the average of profit of each state",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "state"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Profit'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how do the company earn in each state",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "state",
            "profit"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Profit'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what were the total sales for each date in each category",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "category",
            "sales",
            "order date"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Order Date', 'Category'])['Sales'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how much was sold each day for each category",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "category",
            "sales",
            "order date"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Order Date', 'Category'])['Sales'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average profit for each state",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "state"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Profit'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the relationship between profit and sales",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "sales"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Profit','Sales']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average profit of each ship mode divided by segment",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "segment",
            "ship mode"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Ship Mode', 'Segment'])['Profit'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the sales forecast for each date",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "sales forecast",
            "order_date"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df.groupby('Order Date')['Sales Forecast'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many orders were placed for each order quantity",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "quantity"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Quantity']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the relationship between sales and profit for each region",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "region",
            "sales"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Region')[['Sales', 'Profit']].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many orders were placed for each sub-category",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "sub-category"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Sub-Category'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total profit for each region, based on ship status",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "ship status",
            "profit",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Region', 'Ship Status'])['Profit'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the sales trend of the different product categories",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "sales",
            "category",
            "order date"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Order Date', 'Category'])['Sales'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many products have 3 or more quantity ordered",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "quantity",
            "category"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Quantity'] >= 3]; df[\"Category\"].value_counts()",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many products are ordered in single quantity",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "quantity",
            "category"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Quantity'] == 1]; df[\"Category\"].value_counts()",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "density of sales across regions and their profitability",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "region",
            "sales"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df.groupby('Region')[['Sales', 'Profit']].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what are the profits across different states",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "state"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df.groupby('State')['Profit'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what product category has more orders placed",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "category",
            "quantity"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(\"Category\")[\"Quantity\"].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "sales forecast between jan 2016 and july 2017",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "sales forecast",
            "order date"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Order Date'] = pd.to_datetime(df['Order Date']); sales_forecast_period = df[(df['Order Date'] >= '2016-01-01') & (df['Order Date'] <= '2017-07-31')]['Sales Forecast'].sum()",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "i want to know how many orders there are by the quantity of the order",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "quantity"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is unclear what this means",
        "Ambiguity resolution": "present value counts of order",
        "Data transformations": "df[\"Quantity\"]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is our profit based on shipping mode by customer segment",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "segment",
            "ship mode"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Ship Mode', 'Segment'])['Profit'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the sales vs profit ratio of the four regions",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "region",
            "sales"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Region').apply(lambda x: x['Sales'].sum() / x['Profit'].sum())",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average profit of each state",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "state"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Profit'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the sales vs profit ratio of all the zones",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "sales",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Region').apply(lambda x: x['Sales'].sum() / x['Profit'].sum())",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average profit of different segments on the ship modes of transport",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "segment",
            "ship mode"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Segment', 'Ship Mode'])['Profit'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how much is the profit for sales for each",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "sales"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Profit','Sales']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the correlation between sales and profit by region",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "region",
            "sales"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate",
            " compare"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Region')[['Sales', 'Profit']].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you create a graph showing sales and profit by region",
        "dataset": "superstore.csv",
        "Relevant data columns": [
            "profit",
            "region",
            "sales"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "sales_profit_by_region = df.groupby('Region')[['Sales', 'Profit']].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "from all of the universities in london, list the one who has the most faculties",
        "dataset": "top-50-us-universities.csv",
        "Relevant data columns": [
            "location",
            "num"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "the dataset only contains information about universities in the US",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Location'].str.contains('London')].sort_values('Num', ascending=False).head(1)['Name']",
        "Data transformation operation": "filter, sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me a university that has more than 30 faculties and more than 50 teachers",
        "dataset": "top-50-us-universities.csv",
        "Relevant data columns": [
            "num"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "the dataset does not contain any information about the number of teachers",
        "Ambiguity resolution": "filter for number of faculty only",
        "Data transformations": "df[(df['Num'] > 30)]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "universities with similar number of teachers",
        "dataset": "top-50-us-universities.csv",
        "Relevant data columns": [
            "num"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "similarity"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Name\", \"Num\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "from all of the universities in london, list the one who has the most faculties",
        "dataset": "top-50-us-universities.csv",
        "Relevant data columns": [
            "location",
            "num"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "the dataset only contains information about universities in the US",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Location'].str.contains('London')].sort_values('Num', ascending=False).head(1)['Name']",
        "Data transformation operation": "filter, sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the universities cover which locations",
        "dataset": "top-50-us-universities.csv",
        "Relevant data columns": [
            "location"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Location'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the teacher distribution of new york universities",
        "dataset": "top-50-us-universities.csv",
        "Relevant data columns": [
            "num",
            "location"
        ],
        "Data column classification": [
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[df['Location'] == 'New York']['Num']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "would teachers in harvard be considered outliers if the university was in new york",
        "dataset": "top-50-us-universities.csv",
        "Relevant data columns": [
            "name",
            "locaition"
        ],
        "Data column classification": [
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "find anomalies",
            " filter"
        ],
        "Low-level visualization task classification": [
            "synonym",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "there is really no way to determine if teachers would be outliers if they transfered to New york.",
        "Ambiguity resolution": "return filtered data columns",
        "Data transformations": "df[(df[\"Name\"].str.contains(\"Harvard\")) & (df[\"Location\"].astype(str)==\"New York\")]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the number of divisions in harvard university",
        "dataset": "top-50-us-universities.csv",
        "Relevant data columns": [
            "name"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "this data doesn't contain any information about divisions",
        "Ambiguity resolution": "return filtered data columns",
        "Data transformations": "df[df['Name'] == 'Harvard University']",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which movie is the highest-grossing",
        "dataset": "top-movies.csv",
        "Relevant data columns": [
            "movie",
            "revenue ($)"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df.sort_values(by=[\"Revenue ($)\"], ascending=False); df[[\"Revenue ($)\", \"Movie\"]]",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do you feel that midfield players have a lower market value than front court players",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "market_value",
            "position"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is unclear what frontcourt players means",
        "Ambiguity resolution": "provide average for all positions",
        "Data transformations": "df.groupby(\"Position\")[\"Market_value\"].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me if there is a correlation between revenue and the release year",
        "dataset": "top-movies.csv",
        "Relevant data columns": [
            "release year",
            "revenue"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Revenue ($)','Release Year']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a typical film lengths group",
        "dataset": "top-movies.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            ""
        ],
        "Low-level visualization task classification": [
            ""
        ],
        "Visualization goal": [
            ""
        ],
        "Ambiguity in the query": "this dataset does not contain data about the film length",
        "Ambiguity resolution": "it is not possible to answer this quesiton without additional information",
        "Data transformations": "",
        "Data transformation operation": "",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in the premier league how are the transferred players ages distributed",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "age",
            "league_from"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[(df['League_to'] == 'Premier League')]['Age']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me a reason why top backcourt players have a higher market value than the top frontcourt player",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "market_value",
            "position"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df[\"Position\"] ==\"top backcourt\") | (df[\"Position\"] ==\"frontcourt\")]; df.groupby(\"Position\")[\"Market_value\"].mean()",
        "Data transformation operation": "filter, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which player had an abnormal transfer_fee",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "transfer_fee"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"Transfer_fee\"]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how old was david when he was transferred in 2010",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "age",
            "name",
            "season"
        ],
        "Data column classification": [
            "inferred",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df[\"Name\"].str.contains(\"david\")) | (df[\"Season\"].str.contains(\"2010\"))][[\"Name\", \"Age\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what player had a market value of 50,000,000 and was transferred for 58,500,000 in the 2010\u9225\u6bed\u52bd011",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "name",
            "market_value",
            "transfer_fee"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "filter",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df[\"Market_value\"]==50000000)&(df[\"Transfer_fee\"]==58000000)]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "for the center forward position, what was the highest market value for the 2011-2012 season",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "position",
            "season"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df['Position'] == 'Centre-Forward') & (df['Season'] == '2011-2012')][['Name','Market_value']]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the numbers of the transferred players in different leagues in the 2010-2011 season",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "season",
            "league_from"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df =df[(df['Season'] == '2010-2011')]; df[\"League_from\"].value_counts()",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what player had a market value of 50,000,000 and was transferred for 58,500,000 in the 2010\u201a\u00e4\u00ec2011",
        "dataset": "top250-00-20.csv",
        "Relevant data columns": [
            "name",
            "market_value",
            "transfer_fee"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "filter",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df[\"Market_value\"]==50000000)&(df[\"Transfer_fee\"]==58000000)]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "could you buy a player with his market value higher than a transfer fee",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "market_value",
            "transfer_fee"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Market_value'] > df['Transfer_fee']]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average transfer_fee for players who transferred to the premier league",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "transfer_fee",
            "league_to"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['League_to'] == 'Premier League']['Transfer_fee']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "list center-backs by what their transfer_fee was",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "transfer_fee",
            "position"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df[\"Position\"] ==\"Center-back\"][\"Transfer_fee\"]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which player was the oldest that was transferred",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "age",
            "name"
        ],
        "Data column classification": [
            "synonym",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Age','Name']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution of the leagues who paid for transferred players in 2010",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "league_to",
            "season"
        ],
        "Data column classification": [
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[df['Season'].str.contains('2010')]['League_to'].value_counts()",
        "Data transformation operation": "filter, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are you aware of any clustering of the seasons in which players were transferred to the premier league",
        "dataset": "top250-00-19.csv",
        "Relevant data columns": [
            "season",
            "league_to"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "clustering",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Season\", \"League_to\"]].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "if you were to average it out, how upbeat would you say the songs are",
        "dataset": "top50.csv",
        "Relevant data columns": [
            "beats.per.minute"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Beats.Per.Minute']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "describe the popularity of the loudest song",
        "dataset": "top50.csv",
        "Relevant data columns": [
            "popularity",
            "loudness..db.."
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by=['Popularity'], ascending=False)[[\"Popularity\", \"Track.Name\", \"Loudness..dB..\"]]",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you help me find some popular songs",
        "dataset": "top50.csv",
        "Relevant data columns": [
            "popularity"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('Popularity', ascending=False)[[\"Popularity\",\"Track.Name\"]]",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in terms of length, how long is ' beautiful people '",
        "dataset": "top50.csv",
        "Relevant data columns": [
            "length.",
            "track.name"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Track.Name'].str.contains('beautiful people', case=False)]['Length.']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me which genres were mentioned",
        "dataset": "top50.csv",
        "Relevant data columns": [
            "genre"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df['Genre'].value_counts()",
        "Data transformation operation": "summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what songs of the pop genrea has sam smith released",
        "dataset": "top50.csv",
        "Relevant data columns": [
            "genre",
            "artist.name"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "compare",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df['Artist.Name'] == 'Sam Smith') & (df['Genre'].str.contains('pop'))]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there singers who span multiple genres",
        "dataset": "top50.csv",
        "Relevant data columns": [
            "genre",
            "artist.name"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Artist.Name','Genre']].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "determine in what year the income of undergraduate students was higher",
        "dataset": "Undergraduate_Postgraduate.csv",
        "Relevant data columns": [
            "year",
            "undergraduate income"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            " trend"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Undergraduate Income\", \"Year\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how are postgraduate student numbers distributed every year",
        "dataset": "Undergraduate_Postgraduate.csv",
        "Relevant data columns": [
            "postgraduate",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Year','Postgraduate']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "could you tell me if there is any correlation between the number of undergraduate and postgraduate students",
        "dataset": "Undergraduate_Postgraduate.csv",
        "Relevant data columns": [
            "undergraduate",
            "postgraduate"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Undergraduate','Postgraduate']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "state the average income of postgraduate students in each country",
        "dataset": "Undergraduate_Postgraduate.csv",
        "Relevant data columns": [
            "country",
            "undergraduate income"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Country')['Postgraduate Income'].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the number of postgraduate students for each year",
        "dataset": "Undergraduate_Postgraduate.csv",
        "Relevant data columns": [
            "postgraduate",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Year')['Postgraduate'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in each year, what is the distribution of the number of postgraduates",
        "dataset": "Undergraduate_Postgraduate.csv",
        "Relevant data columns": [
            "postgraduate",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Year')['Postgraduate'].sum()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the chart teaches them the horsepower range",
        "dataset": "vehicle-info.csv",
        "Relevant data columns": [
            "horsepower"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"horsepower\"]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name me a country that's happiness score does not coincide with the region it belongs to",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "country",
            "happiness score",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Region\", \"Country\", \"Happiness Score\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the country with the lowest trust score",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "country",
            "trust"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by=[\"Trust (Government Corruption)\"], ascending=False); df[[\"Country\", \"Trust (Government Corruption)\"]] ",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a correlation between happiness scores and other attributes",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness score",
            "happiness rank",
            "trust (government corruption)",
            "economy (gdp per capita)",
            "family",
            "freedom",
            "health (life expectancy)",
            "generosity"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Happiness Score\", \"Happiness Rank\", \"Trust (Government Corruption)\", \"Economy (GDP per Capita)\", \"Family\", \"Freedom\",\"Health (Life Expectancy)\", \"Generosity\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what countries, other than finland, have higher happiness scores and lower gdp",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness  score",
            "economy (gdp per capita)"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Country\", \"Economy (GDP per Capita)\", \"Happiness Score\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the area in the previous decade that increased rapidly in the happiness score",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "region",
            "happiness score"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "this dataset only contains information for 2015",
        "Ambiguity resolution": "cannot answer the question without additional information",
        "Data transformations": "df.groupby(\"Region\")[\"Happiness Score\"].mean()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me, in terms of economy, what is the range across all countries",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "economy (gdp per capita)"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Economy (GDP per Capita)']",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me any clustering there may be in the gdp that has a happiness score of larger than 5",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "economy (gdp per capita)",
            "happiness score"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "clustering"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Happiness Score'] > 5]['Economy (GDP per Capita)']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "within the last year have any countries experienced a sudden decrease in happiness score",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "country",
            "happiness score"
        ],
        "Data column classification": [],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "this dataset onlt contains information for a single year. It is not possible to make calculations for the last year",
        "Ambiguity resolution": "focus on showing the happiness score for all countries",
        "Data transformations": "df[[\"Happiness Score\", \"Country\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the range of happiness score in western europe",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness score",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "determine range",
            " filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Region'] == 'Western Europe']['Happiness Score']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "out of all the countries, which ones have a happiness score higher then finland",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness score",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "finland_score = df[df['Country'] == 'Finland']['Happiness Score'].iloc[0]; happier_than_finland = df[df['Happiness Score'] > finland_score][['Country',\"Happiness Score\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me in what range will the number of countries in each region fall",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "country",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "countries_per_region = df['Region'].value_counts()",
        "Data transformation operation": "groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please identify the parameters of the happiness score in western europe",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness score",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Region'] == 'Western Europe']['Happiness Score']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show all the countries with happiness scores higher than 5",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "country",
            "happiness score"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Happiness Score'] > 5][['Country', \"Happiness Score\"]]",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name the continent that contains the greatest number of countries that are top 10 on the happiness index",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "region",
            "happiness rank"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "top_10_happiness = df[df[\"Happiness Rank\"] <=10]; res=top_10_happiness[\"Region\"].value_counts()",
        "Data transformation operation": "filter, groupby, summarize",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do any countries have happiness scores that don 't match with their gdp",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "country",
            "happiness score",
            "economy"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "synonym"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Happiness Score\", \"Economy (GDP per Capita)\", \"Country\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "of all the countries trust score, which country has the lowest",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "trust (government corruption)",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Trust (Government Corruption)','Country']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name the country that scores the least on trust",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "trust (government corruption)",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Trust (Government Corruption)','Country']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the range across all the countries in terms of economy",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "economy (gdp per capita)",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Economy (GDP per Capita)\", \"Country\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "organize the countries based on happiness score, with the score limit on each group being 10",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness score",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is not clear how the groupings are formed as the country column contains unique values.",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Country\", \"Happiness Score\"]].sort_values(by=[\"Happiness Score\"], ascending=False)",
        "Data transformation operation": "select, sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the distribution of the health score as it is presented in different regions",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "health (life expectancy)",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Health (Life Expectancy)\", \"Region\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the average gdp of countries in western europe",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "economy (gdp per capita)",
            "region"
        ],
        "Data column classification": [
            "synonym",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution",
            " filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Region'] == 'Western Europe']['Economy (GDP per Capita)']",
        "Data transformation operation": "filter, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "organize the countries by their region",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "country",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(['Region', 'Country'])",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "for all the regions, can you show me the pattern of the happiness score",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness score",
            "region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "synonym"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Region','Happiness Score']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what are all the countries that have a happiness score similar to fineland  5 is an acceptable error score",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness score",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter",
            " similarity"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " synonym"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "finland_score = df[df['Country'] == 'Finland']['Happiness Score'].iloc[0]; similar_to_finland = df[(df['Happiness Score'] >= finland_score - 0.5) & (df['Happiness Score'] <= finland_score + 0.5)]",
        "Data transformation operation": "filter",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the range of economy across all the countries",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "economy (gdp per capita)",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[['Economy (GDP per Capita)', \"Country\"]]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "rank countries high to low by their family score",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "country",
            "family"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('Family', ascending=False)",
        "Data transformation operation": "sort",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can we conclude that higher happiness comes from higher freedom",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness score",
            "freedom"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[['Happiness Score','Freedom']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what dimension of the happiness index has the maximum fluctuation",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "summarize",
            " compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            " inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "over the years or across countries?",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"Happiness Score\"]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "retrieve the country that has had a sudden decrease in happiness score within a year",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness score",
            "country"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": " df[['Happiness Score','Country']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "the dataset only contains values for one year and does not have information on changes in values"
    },
    {
        "query": "across all regions, what is the happiness score pattern",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "happiness score",
            "region"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Region')['Happiness Score'].mean()",
        "Data transformation operation": "groupby",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the health score is highest in which country",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "health (life expectancy)",
            "country"
        ],
        "Data column classification": [
            "synonym",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Health (Life Expectancy)','Country']]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the highest health score is held by which country",
        "dataset": "World Happiness Report 2015.csv",
        "Relevant data columns": [
            "health (life expectancy)",
            "country"
        ],
        "Data column classification": [
            "synonym",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(\"Health (Life Expectancy)\", ascending=False); df[[\"Health (Life Expectancy)\", \"Country\"]]",
        "Data transformation operation": "sort, select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please help me identify the least common age",
        "dataset": "student-mat.csv",
        "Relevant data columns": [
            "age"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "Find Anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[\"age\"]",
        "Data transformation operation": "select",
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    }
]