[
    {
        "query": "\" plush - bad unboxing fan mail \" belongs to which specific channel",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query is ambiguous because the term \"specific channel\" is not clearly defined. It is unclear if the user is referring to a specific channel on a specific platform or a specific channel across all platforms.",
        "Ambiguity resolution": "To resolve this ambiguity, we can ask the user to clarify what they mean by \"specific channel\". We can also provide a list of channels that the term \"specific channel\" could refer to and ask the user to select the one that they are interested in.",
        "Data transformations": "df = df[df['tags'].str.contains('plush') & df['tags'].str.contains('bad') & df['tags'].str.contains('unboxing') & df['tags'].str.contains('fan mail')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "select all cw1 scores not less than 80%",
        "Relevant data columns": [
            "CW 1"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['CW 1'] >= 80]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me which genres were mentioned",
        "Relevant data columns": [
            "Genre"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "based on the number of matches, can you tell me what the distribution of cities is",
        "Relevant data columns": [
            "city"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize",
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('city').size()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "identify the county that has the least population each year",
        "Relevant data columns": [
            "County",
            "Population July 1, 2002",
            "Population July 1, 2001",
            "Population July 1, 2000",
            "Population April 1, 2000",
            "Population\nEstimates\nBase Census 2000\nPopulation"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum",
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('County')[['Population July 1, 2002', 'Population July 1, 2001', 'Population July 1, 2000', 'Population April 1, 2000', 'Population\nEstimates\nBase Census 2000\nPopulation']].min()",
        "Data transformation operation": [
            "groupby",
            "min"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the gdp ranking of european countries",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "sort",
            "rank"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [],
        "Ambiguity in the query": "The query does not specify the GDP ranking across all years, nor does it mention the GDP metric. GDP can be measured by several metrics. It is unclear which metric the user is interested in",
        "Ambiguity resolution": "Generate GDP ranking for each year; GDP per capita should be used for ranking countries",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "to cluster the states in the us, i wish to use middle income",
        "Relevant data columns": [
            "Median Income 2007",
            "State"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear how to group states based on median income",
        "Ambiguity resolution": "Create bins for median income and group states into bins",
        "Data transformations": "df['Median Income 2007'] = pd.cut(df['Median Income 2007'], bins=[0, 30000, 40000, 50000, 60000, 70000, 80000], labels=['low', 'middle', 'high', 'very high'])",
        "Data transformation operation": [
            "group by",
            "summarize"
        ],
        "New Column Name": "Median Income Group",
        "Derivation Specification": "df['Median Income Group'] = df['Median Income 2007'].apply(lambda x: 'low' if x < 30000 else 'middle' if x < 40000 else 'high' if x < 50000 else 'very high')",
        "Missing Data Column": ""
    },
    {
        "query": "What is the sales vs profit ratio of the four regions",
        "Relevant data columns": [
            "Sales",
            "Profit",
            "Region"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "comparison",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df.groupby('Region').agg({'Sales': 'sum', 'Profit': 'sum'})",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "On average, what is the first date that a tropical cyclone (tropical depression, tropical storm, or hurricane) forms on every year",
        "Relevant data columns": [
            "year",
            "day",
            "month",
            "name"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "the query does not specify how to define first, whether to use day, month or a combination of both",
        "Ambiguity resolution": "Find the first date when any tropical cyclone occurs in each year",
        "Data transformations": "df_first_date = df[df['status']!='extratropical'].groupby('year')[['month', 'day']].min()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "min"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Is there a correlation between the duration of the storm and wind speed",
        "Relevant data columns": [
            "wind",
            "ts_diameter"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Duration of storm is not explicitly present in the dataset",
        "Ambiguity resolution": "Diameter is a proxy for the size of the storm, which can be used to approximate duration",
        "Data transformations": "df['duration'] = df['ts_diameter'] / df['wind']",
        "Data transformation operation": [
            "derived"
        ],
        "New Column Name": "duration",
        "Derivation Specification": "df['duration'] = df['ts_diameter'] / df['wind']",
        "Missing Data Column": ""
    },
    {
        "query": "Relationship between position and the strength of the hurricane",
        "Relevant data columns": [
            "lat",
            "long",
            "wind",
            "category"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "barcelona 's districts, please list each",
        "Relevant data columns": [
            "District Name"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['District Name']!='el Raval']; df['District Name']",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution of all births in all districts between 2013 and 2017",
        "Relevant data columns": [
            "Number"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify how the data should be aggregated by the districts",
        "Ambiguity resolution": "Aggregate the data by summing the number of births across districts for each year",
        "Data transformations": "df = df[(df['Year']>=2013) & (df['Year']<=2017)]; df = df.groupby(['District Name','Year'])['Number'].sum().reset_index()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "sum"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what neighborhood had 56 boys born in 2017",
        "Relevant data columns": [
            "Neighborhood Name",
            "Number"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Number'] == 56]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what 's the size of \" kids paint free - drawing fun \"",
        "Relevant data columns": [
            "App",
            "Size"
        ],
        "Data column classification": [
            "data value mention",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not include the application name explicitly",
        "Ambiguity resolution": "Assuming that the application is 'kids paint free - drawing fun' mentioned in the query",
        "Data transformations": "df[df['App'] == \"kids paint free - drawing fun\"]['Size']",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "does a app exist that is much different than the others",
        "Relevant data columns": [
            "App",
            "Category",
            "Rating",
            "Reviews",
            "Size",
            "Installs",
            "Type",
            "Price",
            "Content Rating",
            "Genres"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The notion of \"much different\" is subjective and is open to interpretation. This is particularly the case because the query does not provide any context as to what attributes of the app the user is considering",
        "Ambiguity resolution": "to identify the apps that are extreme along some dimension, which is a common approach for identifying outliers.",
        "Data transformations": "top_n_apps = df.sort_values(['Rating','Reviews','Size','Installs','Price'], ascending=[False, False, False, False, True]).head(1); bottom_n_apps = df.sort_values(['Rating','Reviews','Size','Installs','Price'], ascending=[True, True, True, True, False]).head(1)",
        "Data transformation operation": [
            "sort",
            "head"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what apps have a perfect rating and a lot of reviews",
        "Relevant data columns": [
            "Rating",
            "Reviews"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query is ambiguous because it does not specify what is considered a \"lot\" of reviews",
        "Ambiguity resolution": "Find all apps with a perfect rating and at least 10,000 reviews",
        "Data transformations": "df[df['Rating'] == 5.0] & df['Reviews'] >= 10000",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me free or paid apps have a higher mean rating",
        "Relevant data columns": [
            "Rating",
            "Type"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "comparison"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify if the rating should be aggregated at the app level or not",
        "Ambiguity resolution": "The query does not specify if the rating should be aggregated at the app level or not. Assume the mean rating at the app level",
        "Data transformations": "df.groupby('Type')['Rating'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a relationship between the android version of an app and its installations",
        "Relevant data columns": [
            "Installs",
            "Android Ver"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the most recent version of androids \" discover color \"",
        "Relevant data columns": [
            "App",
            "Current Ver"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear which androids are being referenced. The query only mentions \"discover color\" and does not provide any additional context.",
        "Ambiguity resolution": "We assume that the user is referring to the \"CF\" app. This is because the query mentions \"discover color\" and the \"CF\" app is the only app in the dataset that has \"discover color\" in its name.",
        "Data transformations": "df = df[df['App'] == 'CF Appreciation']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which app has a rating that doesn 't follow a trend between installations, rating and number of reviews",
        "Relevant data columns": [
            "Installs",
            "Rating",
            "Reviews"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not explicitly mention the trend to look for. This leaves ambiguity in the query",
        "Ambiguity resolution": "The query does not specify the trend to look for. However, we can infer that the user is looking for apps where the rating does not follow the trend between the number of installs and the number of reviews. We can assume that the user is looking for apps where the rating is unexpectedly high or low given the number of installs and reviews.",
        "Data transformations": "df['normalized_rating'] = df['Rating'] / (df['Installs'] + df['Reviews'])",
        "Data transformation operation": [
            "calculate"
        ],
        "New Column Name": "normalized_rating",
        "Derivation Specification": "df['normalized_rating'] = df['Rating'] / (df['Installs'] + df['Reviews'])",
        "Missing Data Column": ""
    },
    {
        "query": "find out any app that is distinctive from the rest",
        "Relevant data columns": [
            "App",
            "Category",
            "Rating",
            "Reviews",
            "Size",
            "Installs",
            "Type",
            "Price",
            "Content Rating",
            "Genres",
            "Last Updated",
            "Current Ver",
            "Android Ver"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Ambiguous as it is not clear what makes an app distinctive",
        "Ambiguity resolution": "Assume that an app is distinctive if it has an extreme value for any of the attributes",
        "Data transformations": "df_max = df.groupby('Category').max(); df_min = df.groupby('Category').min()",
        "Data transformation operation": [
            "groupby",
            "max",
            "min"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "list the top 10 gaming apps sorted from highest to lowest installations",
        "Relevant data columns": [
            "App",
            "Installs"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Category'] == 'GAME'].sort_values('Installs', ascending = False).head(10)",
        "Data transformation operation": [
            "filter",
            "sort",
            "head"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the number of hospitals located in manyara",
        "Relevant data columns": [
            "Hospital",
            "Region"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Region'] == 'Manyara']['Hospital'].count()",
        "Data transformation operation": [
            "filter",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "make a list of the number of total hfs in descending order",
        "Relevant data columns": [
            "Total HFs"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df.sort_values(by='Total HFs', ascending=False)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "look for the region that has the most people living in it",
        "Relevant data columns": [
            "Region",
            "Population"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Population'] == df['Population'].max()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the population range needs to be discovered",
        "Relevant data columns": [
            "Population"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is unclear if the range is per year or overall population range",
        "Ambiguity resolution": "the range is overall population range",
        "Data transformations": "df.groupby('Region')['Population'].agg(['min', 'max'])",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "out of the winners for best performance by an actor in a motion picture - musical or comedy from 2003 to 2020, the most abnormal age belongs to which actor",
        "Relevant data columns": [
            "year_award",
            "category",
            "nominee film",
            "win"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The data does not have any information about actors or their ages. We can only guess the age of the actor based on the year of the award and the year of the film. This can be ambiguous because we do not know when the actor was born or when they filmed the movie.",
        "Ambiguity resolution": "We can assume that the actor was born in the year of the award minus their age at the time of the award. We can then find the actor with the largest age difference between their birth year and the year of the award.",
        "Data transformations": "df = df[(df['year_award'] >= 2003) & (df['year_award'] <= 2020) & (df['category'] == 'Best Performance by an Actor in a Motion Picture - Musical or Comedy') & (df['win'] == True)]; df['actor_age'] = df['year_award'] - df['year_film']; df = df.sort_values('actor_age', ascending=False); df = df[['nominee film', 'actor_age']]",
        "Data transformation operation": [
            "filter",
            "calculate",
            "sort",
            "select"
        ],
        "New Column Name": "actor_age",
        "Derivation Specification": "df['actor_age'] = df['year_award'] - df['year_film']",
        "Missing Data Column": ""
    },
    {
        "query": "can you list all the results in the table about the movie \" about schmidt  \"",
        "Relevant data columns": [
            "nominee film",
            "year_film",
            "year_award",
            "win"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['nominee film'] == 'About a Boy']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what was the gender of all actors among all the final winners in the 60th ceremony",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [],
        "Ambiguity in the query": "The query does not mention anything about gender or actors, so it is not possible to answer this question from the given dataset.",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": []
    },
    {
        "query": "i would like to review the dispersement of the amount of nominations",
        "Relevant data columns": [
            "film"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The user wants to look at the distribution of the nominations, but the data does not have information about the number of nominations for each film.",
        "Ambiguity resolution": "Create a new column that counts the number of nominations for each film.",
        "Data transformations": "df['nomination_count'] = df.groupby('film')['win'].transform('count')",
        "Data transformation operation": [
            "groupby",
            "count",
            "select"
        ],
        "New Column Name": "nomination_count",
        "Derivation Specification": "df['nomination_count'] = df.groupby('film')['win'].transform('count')",
        "Missing Data Column": ""
    },
    {
        "query": "find all the types of genetic diseases with greater than 1,000 patients",
        "Relevant data columns": [
            "AUTISM",
            "DEAF-MUTE",
            "DEAF-BLIND",
            "MENTALLY IMPAIRED",
            "PHYSICAL IMPAIRED",
            "VISUALLY IMPAIRED"
        ],
        "Data column classification": [
            "data value mention",
            "data value mention",
            "data value mention",
            "data value mention",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['AUTISM']>1000) | (df['DEAF-MUTE']>1000) | (df['DEAF-BLIND']>1000) | (df['MENTALLY IMPAIRED']>1000) | (df['PHYSICAL IMPAIRED']>1000) | (df['VISUALLY IMPAIRED']>1000)]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "take out the regions with a number of patients larger than 500",
        "Relevant data columns": [
            "REGION"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear what column and threshold is referenced by the number of patients",
        "Ambiguity resolution": "Filter on all columns with numeric values",
        "Data transformations": "df[df['ALBINO'] > 500];df[df['AUTISM'] > 500];df[df['DEAF-MUTE'] > 500];df[df['DEAF-BLIND'] > 500];df[df['MENTALLY IMPAIRED'] > 500];df[df['PHYSICAL IMPAIRED'] > 500];df[df['VISUALLY IMPAIRED'] > 500];",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "does the value distribution of albinism look skewed",
        "Relevant data columns": [
            "ALBINO"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['ALBINO']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "they want to know what tactic is most effective during football",
        "Relevant data columns": [
            "tactic",
            "goals"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what was the total amount of goals scored in the game that liverpool played in",
        "Relevant data columns": [
            "goals",
            "player name",
            "game"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "Liverpool is not a column name in the data, so it is unclear which games to be filtered",
        "Ambiguity resolution": "Assuming the Liverpool game is the one played on 2013/6/7",
        "Data transformations": "df = df[df['game'] == '2013/6/7']['goals']",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "rank these clubs by their shooting attempts",
        "Relevant data columns": [
            "player name",
            "shooting attempts"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "rank",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('shooting attempts', ascending=False);",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "could you show me the list sorted by study time ( longest to shortest )",
        "Relevant data columns": [
            "studytime"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by=['studytime'], ascending=False)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "find the distribution by age",
        "Relevant data columns": [
            "age"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['age']",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "retrieve the students with fathers who work as teachers",
        "Relevant data columns": [
            "Fjob"
        ],
        "Data column classification": [
            "synonym"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Fjob'] == 'teacher']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the types of jobs the student 's mothers have",
        "Relevant data columns": [
            "Mjob"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Mjob'].notnull()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "i 'm wondering would the travel time decrease for students if they spent more time studying",
        "Relevant data columns": [
            "traveltime",
            "studytime"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There is an implied causal relationship between travel time and study time that may or may not be appropriate.",
        "Ambiguity resolution": "None - this is a user assumption.",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "would more time spent on studying reduce travel time for students",
        "Relevant data columns": [
            "traveltime",
            "studytime"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The direction of the relationship is not specified in the query",
        "Ambiguity resolution": "We will assume a negative relationship, i.e., more time spent on studying reduces travel time",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me, in terms of economy, what is the range across all countries",
        "Relevant data columns": [
            "Economy (GDP per Capita)"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Economy (GDP per Capita)\"]]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me any clustering there may be in the gdp that has a happiness score of larger than 5",
        "Relevant data columns": [
            "Happiness Score",
            "Economy (GDP per Capita)"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "clustering",
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify what happiness score should be used for clustering and which happiness scores should be ignored.",
        "Ambiguity resolution": "Create two datasets. One with happiness score less than or equal to 5 and another with happiness score greater than 5. Select the dataset with happiness score greater than 5 for plotting.",
        "Data transformations": "df_cluster_low = df[df['Happiness Score'] <= 5]; df_cluster_high = df[df['Happiness Score'] > 5]; df_cluster_high",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the range of happiness score in western europe",
        "Relevant data columns": [
            "Happiness Score",
            "Region"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Region'] == 'Western Europe']; df[['Happiness Score']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show all the countries with happiness scores higher than 5",
        "Relevant data columns": [
            "Happiness Score"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Happiness Score'] > 5]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name the continent that contains the greatest number of countries that are top 10 on the happiness index",
        "Relevant data columns": [
            "Country",
            "Region",
            "Happiness Rank"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear if the rank is inclusive of 10 or not",
        "Ambiguity resolution": "Identify countries in top 10, including rank 10; Identify continent with most countries in top 10",
        "Data transformations": "top_10_df = df[df['Happiness Rank']<=10]; top_10_countries_count_by_region = top_10_df['Region'].value_counts(); df = df[df['Region']==top_10_countries_count_by_region.idxmax()]; df[['Region', 'Country']]",
        "Data transformation operation": [
            "filter",
            "groupby",
            "count",
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "of all the countries trust score, which country has the lowest",
        "Relevant data columns": [
            "Country",
            "Trust (Government Corruption)"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('Trust (Government Corruption)', ascending = True).head(1)",
        "Data transformation operation": [
            "sort",
            "head"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What month has the strongest hurricanes",
        "Relevant data columns": [
            "month",
            "wind"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Unclear how to handle missing values in wind, whether to exclude, replace with 0, or use another technique.",
        "Ambiguity resolution": "Replace missing wind values with 0 and calculate mean wind for each month",
        "Data transformations": "df.fillna(0, inplace=True); df.groupby('month')['wind'].mean()",
        "Data transformation operation": [
            "fill missing",
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the most frequent place of violent crime",
        "Relevant data columns": [
            "place"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify what kind of violent crime is being considered.",
        "Ambiguity resolution": "Consider all types of violent crime",
        "Data transformations": "df['place'].value_counts()",
        "Data transformation operation": [
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Are males or females more likely to die of gun violence",
        "Relevant data columns": [
            "sex"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "comparison"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['sex'] = df['sex'].map({'M':'Male', 'F':'Female'})",
        "Data transformation operation": [
            "map"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Did most gun violence happen inside home",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify what type of gun violence should be considered (e.g., mass shootings, school shootings, etc.)",
        "Ambiguity resolution": "Since the query does not specify what type of gun violence to consider, we will assume that the query is referring to all types of gun violence.",
        "Data transformations": "df['incident_characteristics'] = df['incident_characteristics'].str.lower()",
        "Data transformation operation": [
            "mutate"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "let me know if there are groups of neighborhoods with similar birth gender ratios",
        "Relevant data columns": [
            "Neighborhood Name",
            "Number"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear how birth gender ratios should be computed and compared",
        "Ambiguity resolution": "Normalize gender counts based on population size",
        "Data transformations": "df['birth_gender_ratio'] = df['Number'] / df.groupby('Neighborhood Name')['Number'].transform('sum'); df = df.sort_values(by='birth_gender_ratio')",
        "Data transformation operation": [
            "groupby",
            "normalize"
        ],
        "New Column Name": "birth_gender_ratio",
        "Derivation Specification": "df['birth_gender_ratio'] = df['Number'] / df.groupby('Neighborhood Name')['Number'].transform('sum')",
        "Missing Data Column": ""
    },
    {
        "query": "retrieve the neighborhood with more than 100 female births in ciutat vella in 2013",
        "Relevant data columns": [
            "Number",
            "District Name",
            "Year",
            "Neighborhood Name"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The column name for female birth is not provided in the query, so it is unclear how to filter the table",
        "Ambiguity resolution": "Assume that Number column represents the female birth count and filter data accordingly",
        "Data transformations": "df[(df['District Name'] == 'Ciutat Vella') & (df['Year'] == 2013) & (df['Number'] > 100)]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the number of clinics that are in mara",
        "Relevant data columns": [
            "Clinic",
            "Region"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify what value of the population ration should be used",
        "Ambiguity resolution": "Ambiguity in the query",
        "Data transformations": "df[df['Region'] == 'Mara']['Clinic'].iloc[0]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which region has the lowest population ratio of hf",
        "Relevant data columns": [
            "Region",
            "ration of population over HF"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['ration of population over HF'] == df['ration of population over HF'].min()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what was the gender of all actors among all the final winners in the 60th ceremony",
        "Relevant data columns": [
            "gender",
            "nominee",
            "year_award"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "There is no information about gender in the provided dataset, so the query cannot be answered.",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "gender"
    },
    {
        "query": "which actor was nominated for the most awards",
        "Relevant data columns": [
            "category",
            "nominee"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The dataset doesn't contain any actor information, so the query cannot be answered",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": [
            "actor"
        ]
    },
    {
        "query": "what was the number of candidates that were nominated for best performance by an actor in a motion picture -drama at he 60th ceremony",
        "Relevant data columns": [
            "ceremony",
            "category",
            "nominee film"
        ],
        "Data column classification": [
            "data value mention",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['ceremony']==60) & (df['category'] == 'Best Motion Picture - Drama')]; df.count()['nominee film']",
        "Data transformation operation": [
            "filter",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the spatial and temporal correlation of albinism",
        "Relevant data columns": [
            "REGION",
            "ALBINO",
            "Year"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The dataset does not have a Year column. Additionally, the query does not specify what the temporal correlation is with respect to",
        "Ambiguity resolution": "Assume that the temporal correlation is with respect to year and derive a year column from the REGION column. REGION column values have a YYYY-MM-DD format",
        "Data transformations": "df['Year'] = pd.to_datetime(df['REGION'], format='%Y-%m-%d').dt.year",
        "Data transformation operation": [
            "derive",
            "select"
        ],
        "New Column Name": "Year",
        "Derivation Specification": "df['Year'] = pd.to_datetime(df['REGION'], format='%Y-%m-%d').dt.year",
        "Missing Data Column": ""
    },
    {
        "query": "does this data represent outliers in the number of patients",
        "Relevant data columns": [
            "ALBINO",
            "AUTISM",
            "DEAF-MUTE",
            "DEAF-BLIND",
            "MENTALLY IMPAIRED",
            "PHYSICAL IMPAIRED",
            "VISUALLY IMPAIRED"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "kindly rate the regions on the basis of the number of patients",
        "Relevant data columns": [
            "ALBINO",
            "AUTISM",
            "DEAF-MUTE",
            "DEAF-BLIND",
            "MENTALLY IMPAIRED",
            "PHYSICAL IMPAIRED",
            "VISUALLY IMPAIRED"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "sort",
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the clubs should be arranged by their shooting attempts",
        "Relevant data columns": [
            "player name"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "the query does not specify how to handle ties in shooting attempts.",
        "Ambiguity resolution": "Sort by shooting attempts and then by player name.",
        "Data transformations": "df.sort_values(['shooting attempts', 'player name'])",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "retrieve the students with fathers who work as teachers",
        "Relevant data columns": [
            "Fjob",
            "Fedu",
            "Medu",
            "sex",
            "G1"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Fjob'] == 'teacher']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please help me identify the least common age",
        "Relevant data columns": [
            "age"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['age'].value_counts().sort_values().head(1)",
        "Data transformation operation": [
            "value_counts",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name me a country that 's happiness score does not coincide with the region it belongs to",
        "Relevant data columns": [
            "Happiness Score",
            "Region",
            "Country"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is not clear what type of coincidence is being asked for",
        "Ambiguity resolution": "Calculate happiness rank of countries for each region; identify countries that do not belong to the top n ranks for their region",
        "Data transformations": "df['Regional_Happiness_Rank'] = df.groupby('Region')['Happiness Score'].rank(method='dense', ascending=False); df = df[df['Regional_Happiness_Rank'] > 5]",
        "Data transformation operation": [
            "groupby",
            "rank",
            "filter"
        ],
        "New Column Name": "Regional_Happiness_Rank",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "within the last year have any countries experienced a sudden decrease in happiness score",
        "Relevant data columns": [
            "Happiness Score",
            "Year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "Find Anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The question refers to the last year but the dataset does not have time information",
        "Ambiguity resolution": "We cannot answer this question with the provided dataset",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do any countries have happiness scores that don 't match with their gdp",
        "Relevant data columns": [
            "Happiness Score",
            "Economy (GDP per Capita)"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what it means for happiness scores to not match with GDP.",
        "Ambiguity resolution": "Find correlation between GDP and happiness score; find countries with outliers",
        "Data transformations": "df['zscore'] = stats.zscore(df['Economy (GDP per Capita)'])",
        "Data transformation operation": [
            "summarize"
        ],
        "New Column Name": "zscore",
        "Derivation Specification": "df['zscore'] = stats.zscore(df['Economy (GDP per Capita)'])",
        "Missing Data Column": ""
    },
    {
        "query": "rank countries high to low by their family score",
        "Relevant data columns": [
            "Family"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "sort",
            "rank"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by='Family', ascending=False)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what books have low ratings that seem suspect",
        "Relevant data columns": [
            "averageRating"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter",
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what constitutes a low rating that seems suspect",
        "Ambiguity resolution": "Filter for books with average ratings below 3.0",
        "Data transformations": "df = df[df['averageRating'] < 3.0]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "sort the movies by length",
        "Relevant data columns": [
            "duration"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('duration', inplace=True)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the youngest students in the dataset",
        "Relevant data columns": [
            "age"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df.sort_values('age')",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name the country that scores the least on trust",
        "Relevant data columns": [
            "Trust (Government Corruption)",
            "Country"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Trust (Government Corruption)'] == df['Trust (Government Corruption)'].min()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the book ratings distribution",
        "Relevant data columns": [
            "averageRating"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show a list of similarly rated books",
        "Relevant data columns": [
            "title",
            "averageRating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize",
            "similarity"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('averageRating', ascending=False)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the dates that netflix released movies",
        "Relevant data columns": [
            "release_year",
            "type"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['type'] == 'Movie']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "provide the distribution of the sales in 2015 of type 4046",
        "Relevant data columns": [
            "Total Volume",
            "4046"
        ],
        "Data column classification": [
            "inferred",
            "data value"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['type'] == 'conventional') & (df['year'] == 2015)][['4046', 'Total Volume']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "determine in what year the income of undergraduate students was higher",
        "Relevant data columns": [
            "Year",
            "Undergraduate Income",
            "Postgraduate Income"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify what is being compared. It is unclear whether the comparison is between undergraduate and postgraduate income, or between different years",
        "Ambiguity resolution": "The comparison should be between undergraduate and postgraduate income in each year",
        "Data transformations": "df['Income Difference'] = df['Undergraduate Income'] - df['Postgraduate Income']",
        "Data transformation operation": [
            "calc"
        ],
        "New Column Name": "Income Difference",
        "Derivation Specification": "df['Income Difference'] = df['Undergraduate Income'] - df['Postgraduate Income']",
        "Missing Data Column": ""
    },
    {
        "query": "could you tell me if there is any correlation between the number of undergraduate and postgraduate students",
        "Relevant data columns": [
            "Undergraduate",
            "Postgraduate"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you see any abnormalities in the suicide rates",
        "Relevant data columns": [
            "suicides_no",
            "population",
            "suicides/100k pop",
            "age",
            "sex"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['age', 'sex'])['suicides_no'].agg(['max'])",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "list the values of kwema modern pr  school 's change_p in all the years",
        "Relevant data columns": [
            "CHANGE_PREVIOUS_YEAR",
            "NAME"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['NAME'] == 'KWEMA MODERN PR. SCHOOL']; df[['NAME', 'YEAR_OF_RESULT', 'CHANGE_PREVIOUS_YEAR']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what schools have similar avg_m in the neighboring region",
        "Relevant data columns": [
            "REGION",
            "AVG_MARK"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "similarity"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The meaning of neighboring regions is not clear",
        "Ambiguity resolution": "Assume that regions which share borders are neighboring regions",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "compare the number of tall buildings in hong kong with taiwan",
        "Relevant data columns": [
            "name",
            "Country/Region"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what constitutes a tall building",
        "Ambiguity resolution": "filter for buildings that are taller than 400 meters",
        "Data transformations": "filtered_df = df[df['Meters'] > 400]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what location has the highest number of tall buildings",
        "Relevant data columns": [
            "Country/Region"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Country/Region')['Building/City'].count()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "if you were to average it out, how upbeat would you say the songs are",
        "Relevant data columns": [
            "Energy"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Track.Name').mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you help me find some popular songs",
        "Relevant data columns": [
            "Popularity"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "popularity of songs are dependent on context and time, and the time frame is not specified in the query",
        "Ambiguity resolution": "find all songs that have above average popularity",
        "Data transformations": "df = df[df['Popularity'] > df['Popularity'].mean()];",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in terms of length, how long is \" beautiful people \"",
        "Relevant data columns": [
            "Length",
            "Track.Name"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Track.Name'] == 'Beautiful People (feat. Khalid)']; df[['Track.Name', 'Length']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what songs of the pop genrea has sam smith released",
        "Relevant data columns": [
            "Artist.Name",
            "Genre",
            "Track.Name"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query is ambiguous because it does not specify what data should be returned. For example, the query could be interpreted as asking for a list of all songs by Sam Smith, or a list of all pop songs by Sam Smith, or a list of all songs by Sam Smith that are in the pop genre.",
        "Ambiguity resolution": "Assume that the query is asking for a list of all pop songs by Sam Smith.",
        "Data transformations": "df[df['Genre'] == 'pop' & df['Artist.Name'] == 'Sam Smith'][['Track.Name']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "when the score difference is more than 5, please list the extreme matches to this",
        "Relevant data columns": [
            "home_score",
            "away_score",
            "home_team",
            "away_team"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The condition of finding the extreme matches where the score difference is more than 5 is not clearly specified",
        "Ambiguity resolution": "The score difference can be home team's score minus away team's score or vice versa. The extreme matches can be either with highest score difference or lowest score difference. We will use home team's score minus away team's score and find the highest score difference.",
        "Data transformations": "df = df[abs(df['home_score'] - df['away_score']) > 5][['home_team', 'away_team', 'home_score', 'away_score']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me all the tournament matches that the home team won against the away team",
        "Relevant data columns": [
            "home_team",
            "away_team",
            "home_score",
            "away_score"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The tournament column is irrelevant to the task of identifying the matches where the home team won.",
        "Ambiguity resolution": "Remove tournament column from the data table",
        "Data transformations": "df = df[['home_team', 'away_team', 'home_score', 'away_score']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how can the population of ashley be illustrated to show distribution across five years",
        "Relevant data columns": [
            "Population July 1, 2002",
            "Population July 1, 2001",
            "Population July 1, 2000",
            "Population April 1, 2000",
            "Population Estimates",
            "Base Census 2000",
            "Population"
        ],
        "Data column classification": [
            "data value mention",
            "data value mention",
            "data value mention",
            "data value mention",
            "data value mention",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['County'] == 'Ashley']; df = df.drop(['County', 'State'], axis=1)",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how likely is it that, if i was born in 2000, i was born in a county with no less than 20,000 people",
        "Relevant data columns": [
            "Population July 1, 2000"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear if the user is interested in population of all ages or a specific age range",
        "Ambiguity resolution": "Assume the user is interested in population of all ages",
        "Data transformations": "df = df[df['Population July 1, 2000']>=20000]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me a university that has more than 30 faculties and more than 50 teachers",
        "Relevant data columns": [
            "Num",
            "Name"
        ],
        "Data column classification": [
            "data value mention",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not explicitly mention what the 'faculties' column is. It is unclear if it refers to 'Num' or some other column that is not present in the dataset.",
        "Ambiguity resolution": "Assuming 'faculties' refers to 'Num'",
        "Data transformations": "df[df['Num']>30 and df['Tuition']>50]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the universities cover which locations",
        "Relevant data columns": [
            "Location"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Location']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the teacher distribution of new york universities",
        "Relevant data columns": [
            "Name",
            "Location",
            "Num",
            "Tuition"
        ],
        "Data column classification": [
            "inferred",
            "data value mention",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear if the user wants to only consider universities in New York state or in New York City",
        "Ambiguity resolution": "Assumption: Only consider New York state",
        "Data transformations": "df[df['Location'].str.contains('New York')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the propensity of the number of vehicles in japan and korea from the year 2000 to 2010",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "trend",
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [],
        "Ambiguity in the query": "The provided dataset does not contain any information about the number of vehicles in Japan and Korea, so the query cannot be answered.",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": []
    },
    {
        "query": "does life expectancy have any relation with the percentage of smokers",
        "Relevant data columns": [
            "Life Expectancy (by years)",
            "Percentage of Smokers"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Percentage of Smokers', 'Life Expectancy (by years)']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is the male to female ratio more imbalanced in the last decade in russia",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There is no column in the data that indicates gender. The query is asking about male to female ratio but this information is not available in the data",
        "Ambiguity resolution": "The query is not answerable given the provided data.",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do all the countries in africa have a lower average pci than all the countries in europe",
        "Relevant data columns": [
            "GDP per capita",
            "Continent"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "Because the GDP is split across years, it is unclear if there needs to be additional data transformations performed to calculate summary statistics for each country before finding the highest and lowest GDP values",
        "Ambiguity resolution": "Calculate Summary statistics across all years; Generate extermes for GDP for each year",
        "Data transformations": "df = df.groupby('Continent')['GDP per capita'].mean(); df = df[df['Continent'].isin(['Africa', 'Europe'])]",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "could you tell me the continental location of the poorest ( lowest income ) country",
        "Relevant data columns": [
            "Median Income 2007",
            "State",
            "Population 2007"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify which continent to look for the poorest country",
        "Ambiguity resolution": "Find the poorest country in each continent and then find the continent that has the poorest country",
        "Data transformations": "df.groupby('State')['Median Income 2007'].min().sort_values();",
        "Data transformation operation": [
            "groupby",
            "summarize",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the chart teaches them the horsepower range",
        "Relevant data columns": [
            "horsepower"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear if there needs to be a calculation of the range or if the range is to be extracted directly from the data",
        "Ambiguity resolution": "Extract the range of values in the horsepower column",
        "Data transformations": "df['horsepower_range'] = df['horsepower'].max() - df['horsepower'].min()",
        "Data transformation operation": [
            "range"
        ],
        "New Column Name": "horsepower_range",
        "Derivation Specification": "df['horsepower_range'] = df['horsepower'].max() - df['horsepower'].min()",
        "Missing Data Column": ""
    },
    {
        "query": "Relationship between IMDB Rating and Rotten Tomatoes Rating",
        "Relevant data columns": [
            "IMDB Rating",
            "Rotten Tomatoes Rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what's the production budget for movies in different years",
        "Relevant data columns": [
            "Worldwide Gross",
            "Production Budget",
            "Release Year"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "summarize",
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear if the goal is to find the production budget for movies in each year, or to find the highest and lowest production budgets across all years",
        "Ambiguity resolution": "Find the production budget for movies in each year",
        "Data transformations": "df.groupby('Release Year')['Production Budget'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Movie gross and budge relationship based on genre",
        "Relevant data columns": [
            "Worldwide Gross",
            "Production Budget",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Major Genre'] != 'Contemporary Fiction']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me imdb rating versus rotten tomatoes rating",
        "Relevant data columns": [
            "IMDB Rating",
            "Rotten Tomatoes Rating"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['IMDB Rating'].notnull() & df['Rotten Tomatoes Rating'].notnull()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the relationship between production budget and worldwide gross for each major genre",
        "Relevant data columns": [
            "Worldwide Gross",
            "Production Budget",
            "Major Genre"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What major genre had the highest average worldwide gross",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Which creative type had the fewest movies",
        "Relevant data columns": [
            "Creative Type"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Creative Type').size().reset_index(name='count').sort_values('count').head(1)",
        "Data transformation operation": [
            "groupby",
            "count",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Is there a relationship between production budget and worldwide gross for each content rating",
        "Relevant data columns": [
            "Production Budget",
            "Worldwide Gross",
            "Content Rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the distribution of running times for each movie",
        "Relevant data columns": [
            "Running Time",
            "Title"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What was the average production budget of movies by year",
        "Relevant data columns": [
            "Production Budget",
            "Release Year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value",
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Release Year')['Production Budget'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Which genre movie makes most worldwide gross",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Are IMDb rating and rotten tomatoes rating related",
        "Relevant data columns": [
            "IMDB Rating",
            "Rotten Tomatoes Rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the worldwide gross distribution per genre",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre').agg({'Worldwide Gross': 'sum'})",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what's the breakdown of production budget by creative type per content rating",
        "Relevant data columns": [
            "Production Budget",
            "Creative Type",
            "Content Rating"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Content Rating', 'Creative Type'])['Production Budget'].sum()",
        "Data transformation operation": [
            "groupby",
            "sum"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How much money did movies of each genre and rating make",
        "Relevant data columns": [
            "Worldwide Gross",
            "Content Rating",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize",
            "comparison"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear if there needs to be any aggregation performed on the Worldwide Gross",
        "Ambiguity resolution": "Perform sum aggregation on the Worldwide Gross",
        "Data transformations": "df.groupby(['Content Rating', 'Major Genre'])['Worldwide Gross'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What was the average budget for each content rating and creative type, as multiple column charts",
        "Relevant data columns": [
            "Content Rating",
            "Creative Type",
            "Production Budget"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize",
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Content Rating', 'Creative Type'])['Production Budget'].mean().reset_index()",
        "Data transformation operation": [
            "groupby",
            "summarize",
            "reset index"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Which creative types have the most movies",
        "Relevant data columns": [
            "Creative Type"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Creative Type').size().reset_index(name='count').sort_values('count', ascending=False)",
        "Data transformation operation": [
            "groupby",
            "count",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "On average, how much was earned by movies of each genre",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "average",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "gross across genres regarding content rating",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre",
            "Content Rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many films of each creative type",
        "Relevant data columns": [
            "Creative Type"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "count"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Creative Type').count()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Cumulative gross for each content rating, by major genre",
        "Relevant data columns": [
            "Worldwide Gross",
            "Content Rating",
            "Major Genre"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Content Rating', 'Major Genre'])['Worldwide Gross'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How much did each type of movie earn in across the whole world",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How does displacement relate to fuel economy for cars from Europe v USA",
        "Relevant data columns": [
            "mpg",
            "cubicinches",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify which country to compare with Europe. Also, it is unclear whether the comparison is for each year or for all years combined.",
        "Ambiguity resolution": "The comparison should be made between Europe and the USA. The comparison should be made for each year separately",
        "Data transformations": "df = df[(df['country'] == 'Europe') | (df['country'] == 'US.')]; df = df.groupby('country', 'year')[['cubicinches', 'mpg']].mean()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Which countries have the highest acceleration for cars of different cylinders",
        "Relevant data columns": [
            "country",
            "cylinders",
            "timeto60"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum",
            "comparison"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['country', 'cylinders'])['timeto60'].agg(['min'])",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Compare the number of models in USA, Japan and Europe",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "comparison"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['country'].isin(['US', 'Japan', 'Europe'])]; df.groupby('country').size().to_frame('num_models').reset_index()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "size"
        ],
        "New Column Name": "num_models",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how is acceleration related to horsepower",
        "Relevant data columns": [
            "timeto60",
            "hp"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How has horsepower changed over time by country",
        "Relevant data columns": [
            "hp",
            "year",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['country','year'])['hp'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Have cars gotten lighter over time",
        "Relevant data columns": [
            "weightlbs",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['weightlbs']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average weight of cars over time",
        "Relevant data columns": [
            "weightlbs",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend",
            "average"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('year')['weightlbs'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How much do various cars weigh",
        "Relevant data columns": [
            "weightlbs"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How has AVG (Horsepower) evolved over time | Segregate it by the car origin",
        "Relevant data columns": [
            "hp",
            "country",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend",
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df.groupby(['country','year'])['hp'].mean().reset_index()",
        "Data transformation operation": [
            "groupby",
            "mean",
            "reset"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How does acceleration vary by weight for cars from different regions",
        "Relevant data columns": [
            "timeto60",
            "weightlbs",
            "country"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate",
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('country')[['timeto60', 'weightlbs']]",
        "Data transformation operation": [
            "groupby",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the average MPG for cars with different cylinders",
        "Relevant data columns": [
            "mpg",
            "cylinders"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize",
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('cylinders')['mpg'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How does MPG vary by the number of cylinders in a car",
        "Relevant data columns": [
            "mpg",
            "cylinders"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How has horsepower changed over time in each region",
        "Relevant data columns": [
            "hp",
            "year",
            "country"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend",
            "comparison"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['hp'].notnull() & df['year'].notnull() & df['country'].notnull()]; df.groupby(['country', 'year'])['hp'].mean()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many cars have various numbers of cylinders in each region",
        "Relevant data columns": [
            "cylinders",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['country', 'cylinders'])['cylinders'].count()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the average weight of cars by model year",
        "Relevant data columns": [
            "year",
            "weightlbs"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('year')['weightlbs'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How much is the average of profit of each state",
        "Relevant data columns": [
            "Profit",
            "State"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Profit'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How do the company earn in each state",
        "Relevant data columns": [
            "Profit",
            "State"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Profit'].agg(['sum', 'mean', 'median'])",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What were the total sales for each date in each category",
        "Relevant data columns": [
            "Sales",
            "Category",
            "Order Date"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "compare",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Order Date', 'Category'])['Sales'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many orders were placed for each sub-category",
        "Relevant data columns": [
            "Sub-Category",
            "Order ID"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Sub-Category').size()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the total profit for each region, based on ship status",
        "Relevant data columns": [
            "Region",
            "Profit",
            "Ship Status"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Region', 'Ship Status'])['Profit'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many products have 3 or more quantity ordered",
        "Relevant data columns": [
            "Quantity"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Quantity'] >= 3]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Density of sales across regions and their profitability",
        "Relevant data columns": [
            "Sales",
            "Region",
            "Profit"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize",
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There is ambiguity in how the density should be measured.  It is not clear whether the density should be calculated for the sales across all the regions or the sales for each region separately.  It is also unclear how the profitability is going to be used in this calculation.  Is the profitability for each region to be used or should it be calculated across all the regions?",
        "Ambiguity resolution": "Calculate density of sales across regions",
        "Data transformations": "df.groupby('Region')['Sales'].density(); df.groupby('Region')['Profit'].density()",
        "Data transformation operation": [
            "groupby",
            "density"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What product category has more orders placed",
        "Relevant data columns": [
            "Category",
            "Quantity"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Category')['Quantity'].sum().sort_values(ascending=False).head(1)",
        "Data transformation operation": [
            "groupby",
            "summarize",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Can you create a graph showing sales and profit by region",
        "Relevant data columns": [
            "Sales",
            "Region",
            "Profit"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Region')[['Sales', 'Profit']].sum()",
        "Data transformation operation": [
            "groupby",
            "sum"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you list all the results in the table about the movie \" about schmidt \"",
        "Relevant data columns": [
            "nominee film"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['nominee film'] == 'About a Boy']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the games are sorted by experts by their date",
        "Relevant data columns": [
            "date"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df.sort_values(by=['date'])",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what countries, other than finland, have higher happiness scores and lower gdp",
        "Relevant data columns": [
            "Country",
            "Happiness Score",
            "Economy (GDP per Capita)"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "comparison"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear how to handle the data rows corresponding to Finland. The query indicates that the results should exclude Finland but the exact logic to perform this exclusion is not clear",
        "Ambiguity resolution": "Create a new column that is a binary flag indicating whether the country is Finland and then remove all rows where this flag is true.",
        "Data transformations": "df['IsFinland'] = (df['Country'] == 'Finland') ; df = df[df['IsFinland'] == False]; df[['Country', 'Happiness Score', 'Economy (GDP per Capita)']]",
        "Data transformation operation": [
            "create column",
            "filter",
            "select"
        ],
        "New Column Name": "IsFinland",
        "Derivation Specification": "df['IsFinland'] = (df['Country'] == 'Finland')",
        "Missing Data Column": ""
    },
    {
        "query": "out of all the countries, which ones have a happiness score higher then finland",
        "Relevant data columns": [
            "Happiness Score",
            "Country"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter",
            "retrieve value",
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "Finland is not a data value, so it is unclear how to evaluate the 'higher' part of the query",
        "Ambiguity resolution": "Find all countries with Happiness score higher than that of Finland",
        "Data transformations": "finland_happiness_score = df['Happiness Score'][df['Country']=='Finland'].values[0]; df[df['Happiness Score'] > finland_happiness_score][['Country', 'Happiness Score']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the range across all the countries in terms of economy",
        "Relevant data columns": [
            "Economy (GDP per Capita)"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Economy (GDP per Capita)']].agg(['min', 'max'])",
        "Data transformation operation": [
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "organize the countries based on happiness score, with the score limit on each group being 10",
        "Relevant data columns": [
            "Happiness Score"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Happiness Score Bin'] = pd.cut(df['Happiness Score'], bins=np.arange(0, 10, 1))",
        "Data transformation operation": [
            "binning"
        ],
        "New Column Name": "Happiness Score Bin",
        "Derivation Specification": "pd.cut(df['Happiness Score'], bins=np.arange(0, 10, 1))",
        "Missing Data Column": ""
    },
    {
        "query": "show me the distribution of the health score as it is presented in different regions",
        "Relevant data columns": [
            "Health (Life Expectancy)",
            "Region"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the average gdp of countries in western europe",
        "Relevant data columns": [
            "Economy (GDP per Capita)",
            "Region"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Region'] == 'Western Europe']['Economy (GDP per Capita)'].mean()",
        "Data transformation operation": [
            "filter",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "across all regions, what is the happiness score pattern",
        "Relevant data columns": [
            "Happiness Score",
            "Region"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Region')['Happiness Score'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the highest health score is held by which country",
        "Relevant data columns": [
            "Health (Life Expectancy)",
            "Country"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by='Health (Life Expectancy)', ascending=False).head(1)",
        "Data transformation operation": [
            "sort",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which author has worked with dark horse comics most frequently",
        "Relevant data columns": [
            "authors"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('authors').size().sort_values(ascending=False).head(1)",
        "Data transformation operation": [
            "groupby",
            "summarize",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "of fiction books, which are written in english",
        "Relevant data columns": [
            "title",
            "language"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['language'] == 'en']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in what manner are good air quality records dispersed throughout the monitored region",
        "Relevant data columns": [
            "Station",
            "O3 Quality",
            "NO2 Quality",
            "PM10 Quality"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['O3 Quality'] == 'Good'] & df[df['NO2 Quality'] == 'Good'] & df[df['PM10 Quality'] == 'Good']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "put the readings in order according to their pm 10 values",
        "Relevant data columns": [
            "PM10 Value"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by='PM10 Value')",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me the count of missing readings in this table",
        "Relevant data columns": [
            "O3 Value",
            "NO2 Value",
            "PM10 Value"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "count"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Missing Count'] = df['O3 Value'].isnull().astype(int) + df['NO2 Value'].isnull().astype(int) + df['PM10 Value'].isnull().astype(int)",
        "Data transformation operation": [
            "select",
            "summarize"
        ],
        "New Column Name": "Missing Count",
        "Derivation Specification": "df['Missing Count'] = df['O3 Value'].isnull().astype(int) + df['NO2 Value'].isnull().astype(int) + df['PM10 Value'].isnull().astype(int)",
        "Missing Data Column": ""
    },
    {
        "query": "are the o3 value and the pm10 value dependent on each other",
        "Relevant data columns": [
            "O3 Value",
            "PM10 Value"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "dependency"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Not clear if a relationship needs to be found between all O3 and PM10 value pairs, or between the O3 and PM10 values at each hour",
        "Ambiguity resolution": "Find relationship between all O3 and PM10 value pairs",
        "Data transformations": "df[['O3 Value', 'PM10 Value']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "across the monitored region, what is the distribution of records for good air quality",
        "Relevant data columns": [
            "Station",
            "Air Quality"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Air Quality'] == 'Good']; df['Air Quality'].value_counts()",
        "Data transformation operation": [
            "filter",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which player had an abnormal transfer_fee",
        "Relevant data columns": [
            "Transfer_fee"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not provide a context for identifying abnormal values of transfer_fee",
        "Ambiguity resolution": "assume abnormal transfer fee to be the maximum",
        "Data transformations": "df[df['Transfer_fee']==df['Transfer_fee'].max()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the numbers of the transferred players in different leagues in the 2010 -2011 season",
        "Relevant data columns": [
            "League_from"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Season'] == '2010-2011']['League_from'].value_counts()",
        "Data transformation operation": [
            "filter",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average transfer_fee for players who transferred to the premier league",
        "Relevant data columns": [
            "Transfer_fee",
            "League_to"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['League_to'] == 'Premier League']['Transfer_fee'].mean()",
        "Data transformation operation": [
            "filter",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is the normal distribuition satisfied by the length of the movies",
        "Relevant data columns": [
            "duration"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['duration'] = pd.to_numeric(df['duration'].str.replace(' min', ''))",
        "Data transformation operation": [
            "replace",
            "convert data type"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "at what point was data added to the table for netflix",
        "Relevant data columns": [
            "date_added"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what 'point' refers to in the query. it could be the first or last time data was added to the table, or a specific point in time",
        "Ambiguity resolution": "Identify the first and last date in which data was added to the table",
        "Data transformations": "df['date_added'] = pd.to_datetime(df['date_added']); df.groupby('date_added').size(); df[df['date_added'] == df['date_added'].min()]; df[df['date_added'] == df['date_added'].max()]",
        "Data transformation operation": [
            "groupby",
            "count",
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the percentage of the white population in blount county, alabama",
        "Relevant data columns": [
            "White",
            "County",
            "State"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['County'] == 'Blount County'][[County', 'State', 'White']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what percentage of the blount county, alabama population is white",
        "Relevant data columns": [
            "White",
            "TotalPop",
            "County"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['County'] == 'Blount County']; (df['White'] / df['TotalPop']) * 100",
        "Data transformation operation": [
            "filter",
            "calculate"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me which county has the greatest number of female residents",
        "Relevant data columns": [
            "County",
            "Women"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Women']==df['Women'].max()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "calculate the average black population for each state",
        "Relevant data columns": [
            "State",
            "Black"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Black'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what are the groups of regions according to three types of avocados sales ratio",
        "Relevant data columns": [
            "region",
            "type"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not mention three types of avocados sales ratios. It is unclear if there needs to be additional data transformations performed to derive these three types of ratios",
        "Ambiguity resolution": "Generate a new column that computes the sum of the 4 sales columns for each region. Use the new column to find the three sales ratio types",
        "Data transformations": "df['Total Sales'] = df['4046'] + df['4225'] + df['4770'] + df['4225']; df = df[df['Total Sales']>0]",
        "Data transformation operation": [
            "summarize",
            "filter"
        ],
        "New Column Name": "Total Sales",
        "Derivation Specification": "df['Total Sales'] = df['4046'] + df['4225'] + df['4770'] + df['4225']",
        "Missing Data Column": ""
    },
    {
        "query": "provide the distribution of the sales in 2015 of type 4046",
        "Relevant data columns": [
            "Total Volume",
            "Date",
            "year",
            "4046"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['year'] == 2015) & (df['type'] == 'conventional')][['Date', 'Total Volume', '4046']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many storms occur per year, on average",
        "Relevant data columns": [
            "year"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('year')['name'].count()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the relationship between level of education and crime rate",
        "Relevant data columns": [
            "education",
            "intent"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There is a need to specify what crime to be considered for the analysis.",
        "Ambiguity resolution": "count the number of suicides by education",
        "Data transformations": "df = df[df['intent'] == 'Suicide']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Are there any correlations in violent or non-violent crimes based on congressional district and year",
        "Relevant data columns": [
            "congressional_district",
            "year",
            "n_killed",
            "n_injured"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear if there is interest in all crimes or a specific type of crime. It is also unclear what constitutes violent and non-violent crimes",
        "Ambiguity resolution": "Categorize crimes into violent and non-violent categories based on intent, identify relationships across years and congressional districts for violent crimes",
        "Data transformations": "df['crime_type'] = df['intent'].apply(lambda x: 'violent' if x in ['Homicide', 'Suicide', 'Accidental'] else 'nonviolent')\ndf_violent = df[df['crime_type'] == 'violent']\ndf_violent.groupby(['year', 'congressional_district'])[['n_killed', 'n_injured']].corr()",
        "Data transformation operation": [
            "apply",
            "groupby",
            "corr"
        ],
        "New Column Name": "crime_type",
        "Derivation Specification": "lambda x: 'violent' if x in ['Homicide', 'Suicide', 'Accidental'] else 'nonviolent'",
        "Missing Data Column": ""
    },
    {
        "query": "How many gun violence incidents are there each year",
        "Relevant data columns": [
            "date"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not mention a specific year range for analysis, and it is unclear if data should be summarized across all available years",
        "Ambiguity resolution": "Summarize data across all available years",
        "Data transformations": "df['date'] = pd.to_datetime(df['date'], format='%m/%d/%y'); df = df.groupby(df['date'].dt.year)['incident_id'].count().reset_index(name='gun_violence_incidents')",
        "Data transformation operation": [
            "convert to datetime",
            "groupby",
            "count",
            "reset index"
        ],
        "New Column Name": "gun_violence_incidents",
        "Derivation Specification": "None",
        "Missing Data Column": ""
    },
    {
        "query": "Is one sex more likely to perpetrate gun violence",
        "Relevant data columns": [
            "sex"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There is no mention of how gun violence should be measured, e.g. incidents or number of people killed/injured. It is also unclear if this analysis should be across all types of gun violence or specific types",
        "Ambiguity resolution": "Compare the number of incidents across the two sexes; Measure gun violence by the number of incidents involving gun related deaths",
        "Data transformations": "df = df[df['intent'] == 'Suicide']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the correlation between education levels and suicide rates",
        "Relevant data columns": [
            "education",
            "Suicide (People)"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Ambiguity is in the granularity of the correlation, i.e., whether the correlation should be calculated for each year, or across all years",
        "Ambiguity resolution": "Calculate correlation for each year",
        "Data transformations": "df = df.groupby('Year')['education', 'Suicide (People)'].corr(); df = df.reset_index()",
        "Data transformation operation": [
            "groupby",
            "corr",
            "reset index"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Which state/year has the most gun deaths",
        "Relevant data columns": [
            "state",
            "year",
            "Firearm deaths (People)"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['state', 'year'])['Firearm deaths (People)'].max().reset_index().sort_values('Firearm deaths (People)', ascending=False).head(1)",
        "Data transformation operation": [
            "groupby",
            "max",
            "reset_index",
            "sort_values"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the distribution of births across all districts in 2017",
        "Relevant data columns": [
            "Number",
            "District Name"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Year']==2017]; df.groupby('District Name')['Number'].sum().reset_index()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "summarize",
            "reset"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "describe shape of the distribution for the number of installations",
        "Relevant data columns": [
            "Installs"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Installs'] = df['Installs'].str.replace('[+,]','').str.replace('M', 'e6').astype(float)",
        "Data transformation operation": [
            "replace",
            "astype"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the app that costs the most",
        "Relevant data columns": [
            "Price"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df.sort_values(by='Price', ascending=False).head(1); df[[\"App\", \"Price\"]]",
        "Data transformation operation": [
            "sort",
            "head",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "when taking different android versions into account, does that have any impact on installation",
        "Relevant data columns": [
            "Installs",
            "Android Ver"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify which app to consider for analysis",
        "Ambiguity resolution": "The query is about the impact of different android versions on the number of installs. Therefore, we need to consider all apps in the dataset",
        "Data transformations": "df.groupby('Android Ver')['Installs'].sum().reset_index()",
        "Data transformation operation": [
            "groupby",
            "summarize",
            "reset"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me a list of all the free business apps that have received rating that were higher than a 45",
        "Relevant data columns": [
            "Rating",
            "Category",
            "Type"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['Category'] == 'BUSINESS') & (df['Type'] == 'Free') & (df['Rating'] > 4.5)]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the attribute ' 'rating ' ' be affected ' 'installation",
        "Relevant data columns": [
            "Rating",
            "Installs"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "query does not specify how rating is affected by installations, e.g. does it mean higher or lower installations?",
        "Ambiguity resolution": "Derive new columns to compare installations across different rating values",
        "Data transformations": "df['Rating'] = df['Rating'].astype('category'); df['Rating'] = df['Rating'].cat.codes; df['Installs'] = df['Installs'].astype('category'); df['Installs'] = df['Installs'].cat.codes; df = df[df['Rating'].notna() & df['Installs'].notna()]; df = df.groupby('Rating')['Installs'].agg(['min', 'max', 'mean', 'median'])",
        "Data transformation operation": [
            "filter",
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the app with the most abnormal pattern",
        "Relevant data columns": [
            "Rating",
            "Reviews",
            "Installs",
            "Price"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The notion of 'abnormal pattern' is ambiguous and can have multiple interpretations. ",
        "Ambiguity resolution": "Without further context or clarification, it is difficult to provide a specific data transformation to resolve this ambiguity.",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there an unusually high number of reviews for any of the apps",
        "Relevant data columns": [
            "Reviews"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution of the number based on shape of installations",
        "Relevant data columns": [
            "Installs",
            "Type"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify the shape of the distribution",
        "Ambiguity resolution": "Assuming that the distribution should be a histogram",
        "Data transformations": "df.groupby('Type')['Installs'].hist()",
        "Data transformation operation": [
            "groupby",
            "histogram"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there an effect on price caused by the app 's genre",
        "Relevant data columns": [
            "Price",
            "Genres"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the most pricey apps by release date, recent to oldest",
        "Relevant data columns": [
            "Price",
            "Last Updated"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "sort"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There is ambiguity in the query because it does not specify the app categories to be considered.",
        "Ambiguity resolution": "Find the most expensive apps across all categories, ordered by release date in descending order",
        "Data transformations": "df.sort_values(['Last Updated'], ascending = False)[['App','Price','Last Updated']]",
        "Data transformation operation": [
            "sort",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "according to population, what is the rank of each of region",
        "Relevant data columns": [
            "Region",
            "Population"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "rank"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('Population', inplace=True)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "remove any regions with a population ratio of hf lower than 15",
        "Relevant data columns": [
            "Region",
            "ration of population over HF"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['ration of population over HF'] > 1.5]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do any regions have their population ratio over 20 hf",
        "Relevant data columns": [
            "ration of population over HF"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum",
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['ration of population over HF']>2]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me the movie that received the most nominations",
        "Relevant data columns": [
            "film"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear how to find nominations, it is unclear how to find the maximum value",
        "Ambiguity resolution": "Calculate a boolean to indicate if the film won; Groupby film and count number of wins",
        "Data transformations": "df['won'] = df['win'] == True; df.groupby('film').agg({'won':'count'})",
        "Data transformation operation": [
            "calculation",
            "groupby",
            "summarize"
        ],
        "New Column Name": "num_wins",
        "Derivation Specification": "df['num_wins'] = df['won'].sum()",
        "Missing Data Column": ""
    },
    {
        "query": "can the actors nationality impact the outcome",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [],
        "Ambiguity in the query": "The query does not specify the data columns to be considered or the visualization task to be performed. It is unclear what the user is trying to achieve.",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the correlation between the nomination and the age of a star",
        "Relevant data columns": [
            "year_film",
            "year_award",
            "nominee film",
            "win"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The dataset does not contain any information about the age of the stars",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you name an unusual reason for choosing this school",
        "Relevant data columns": [
            "reason"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what is considered unusual, whether a reason is considered unusual depends on its frequency",
        "Ambiguity resolution": "An unusual reason would be one that is very infrequently selected by students",
        "Data transformations": "df[df['reason'] == df['reason'].value_counts().idxmin()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me which students have fathers that are teachers",
        "Relevant data columns": [
            "Fjob"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Fjob'] == 'teacher']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Is there a somewhat even distribution between the year and congressional district",
        "Relevant data columns": [
            "year",
            "congressional_district"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "determine range",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Ambiguity arises because the term 'somewhat even' is vague and can be interpreted differently. What constitutes an even distribution may vary depending on the specific context and individual perspectives. Additionally, the query does not specify any particular measure or metric for assessing the evenness of distribution, which adds to the ambiguity",
        "Ambiguity resolution": "To address the ambiguity, we can define a measure of evenness that is appropriate for the given dataset. One possible measure is the coefficient of variation (CV), which is calculated as the ratio of the standard deviation to the mean. A lower CV indicates a more even distribution, while a higher CV indicates a less even distribution. By calculating the CV for the distribution of congressional districts across years, we can assess the degree of evenness and determine whether it meets the user's expectations.",
        "Data transformations": "df['CV'] = df['congressional_district'].std() / df['congressional_district'].mean()",
        "Data transformation operation": [
            "summarize"
        ],
        "New Column Name": "CV",
        "Derivation Specification": "The CV is calculated as the standard deviation of the 'congressional_district' column divided by its mean",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total amount of genres",
        "Relevant data columns": [
            "Genres"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "count"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear if the query requires aggregation across all apps or for a specific category of apps",
        "Ambiguity resolution": "The query requires counting genres across all apps",
        "Data transformations": "df['Genres'] = df['Genres'].str.split('|')",
        "Data transformation operation": [
            "split"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what 's the price distribution in beauty apps",
        "Relevant data columns": [
            "Price"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "the category column does not include a value for beauty apps",
        "Ambiguity resolution": "Use keywords like Beauty, fashion, or style in the app name or description to filter for beauty apps",
        "Data transformations": "df_beauty_apps = df[(df['Category'].str.contains('Beauty')) | (df['App'].str.contains('Beauty')) | (df['App'].str.contains('Fashion')) | (df['App'].str.contains('Style'))]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a correlation between apps with more installations and higher ratings",
        "Relevant data columns": [
            "Installs",
            "Rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Rating', 'Installs']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name any apps that can support any version of android lower than 40",
        "Relevant data columns": [
            "Android Ver"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear how to identify applications that support android versions lower than 4.0. The Android version column in the dataset only has one entry for each application, so it is unclear which version is supported. ",
        "Ambiguity resolution": "Filter out applications that have Android versions higher than 4.0",
        "Data transformations": "df = df[df['Android Ver'].str.contains('< 4.0')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which 10 regions have the most health centers",
        "Relevant data columns": [
            "Region",
            "Health Centre"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "sort",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.nlargest(10, 'Health Centre')",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "look up regions that names start with the letter a",
        "Relevant data columns": [
            "Region"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Region'].str.startswith('a')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average count of hospitals",
        "Relevant data columns": [
            "Hospital"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Region')['Hospital'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what 's the distribution of the entire hfs",
        "Relevant data columns": [
            "Region",
            "Total HFs"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Total HFs']!=0]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "enter the regions from this table",
        "Relevant data columns": [
            "Region"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[['Region']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can lower study times among students cause greater failure rates in class",
        "Relevant data columns": [
            "studytime",
            "failures"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify the correlation direction. It is unclear whether lower study times cause higher failure rates or vice versa.",
        "Ambiguity resolution": "Study time is expected to be negatively correlated with failure rates. Thus lower study time should cause higher failure rates",
        "Data transformations": "df.groupby('studytime')['failures'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the dates that netflix released movies",
        "Relevant data columns": [
            "date_added",
            "type"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['type'] == 'Movie']; df['date_added'] = pd.to_datetime(df['date_added']); df.groupby('date_added').size()",
        "Data transformation operation": [
            "filter",
            "convert data type",
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the health score is highest in which country",
        "Relevant data columns": [
            "Health (Life Expectancy)",
            "Country"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Country')",
        "Data transformation operation": [
            "groupby"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "state the average income of postgraduate students in each country",
        "Relevant data columns": [
            "Postgraduate Income",
            "Country"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Country')['Postgraduate Income'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the total worldwide gross for each major genre across time",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre",
            "Release Year"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify if the aggregation should be done for each year or across all years",
        "Ambiguity resolution": "Aggregate data across all years",
        "Data transformations": "df.groupby(['Major Genre'])['Worldwide Gross'].sum()",
        "Data transformation operation": [
            "groupby",
            "sum"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What's the average production budget of the different rated movies, separated by creative type",
        "Relevant data columns": [
            "Production Budget",
            "Content Rating",
            "Creative Type"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Creative Type', 'Content Rating'])['Production Budget'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Is there a correlation between acceleration and horsepower",
        "Relevant data columns": [
            "timeto60",
            "hp"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Is there a correlation between cars' horsepower and acceleration",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does horsepower relate to acceleration for individual car models",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Compare car cylinder count against acceleration across countries",
        "Relevant data columns": [
            "cylinders",
            "timeto60",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "comparison"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the distribution of weight across all cars",
        "Relevant data columns": [
            "weightlbs"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['weightlbs']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How does the acceleration of cars from different countries vary by the number of cylinders",
        "Relevant data columns": [
            "country",
            "cylinders",
            "timeto60"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend",
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['timeto60'].notna()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you list all the results in the table about the movie \" about schmidt  \"",
        "Relevant data columns": [
            "nominee film"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['nominee film'] == 'About a Boy']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "name the country that scores the least on trust",
        "Relevant data columns": [
            "Country",
            "Trust (Government Corruption)"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df.sort_values('Trust (Government Corruption)', ascending=True)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the range of economy across all the countries",
        "Relevant data columns": [
            "Economy (GDP per Capita)"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Economy (GDP per Capita)']].max() - df[['Economy (GDP per Capita)']].min()",
        "Data transformation operation": [
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the distribution for the book ratings",
        "Relevant data columns": [
            "averageRating"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['averageRating'].value_counts().sort_index()",
        "Data transformation operation": [
            "value_counts"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the book ratings distribution",
        "Relevant data columns": [
            "averageRating"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear if the user wants to see the average ratings for all books or if they want to see the distribution of ratings across all books",
        "Ambiguity resolution": "Generate a histogram of the average ratings for all books",
        "Data transformations": "df['averageRating'].hist()",
        "Data transformation operation": [
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there outliers in the book ratings",
        "Relevant data columns": [
            "averageRating"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many books have been released by dark horse comics",
        "Relevant data columns": [
            "title"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "Retrieve Value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The publisher column includes 'Dark Horse Comics' and 'Dark Horse Books'. It is unclear whether the query is referring to 'Dark Horse Comics' or 'Dark Horse Books'.",
        "Ambiguity resolution": "Exclude 'Dark Horse Books' from the publisher column",
        "Data transformations": "df = df[df['publisher'].str.contains('Dark Horse Comics')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me a day with extremely bad air quality",
        "Relevant data columns": [
            "NO2 Value",
            "PM10 Value",
            "NO2 Quality",
            "PM10 Quality",
            "O3 Quality"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The user does not specify which air quality measurements should be considered extreme. This could be either NO2, PM10 or both.",
        "Ambiguity resolution": "We will assume that the user is interested in finding days where either NO2 or PM10 have extremely bad air quality.",
        "Data transformations": "bad_no2_quality = df[df['NO2 Quality'] == 'Bad']['NO2 Value']; bad_pm10_quality = df[df['PM10 Quality'] == 'Bad']['PM10 Value']; bad_air_quality_days = pd.concat([bad_no2_quality, bad_pm10_quality])",
        "Data transformation operation": [
            "filter",
            "concat"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me the count of missing readings in this table",
        "Relevant data columns": [
            "O3 Value",
            "NO2 Value",
            "PM10 Value"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "count"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Missing Reading Count'] = df[['O3 Value', 'NO2 Value', 'PM10 Value']].isnull().sum(axis=1)",
        "Data transformation operation": [
            "summarize",
            "count"
        ],
        "New Column Name": "Missing Reading Count",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in the premier league how are the transferred players ages distributed",
        "Relevant data columns": [
            "Age",
            "Team_to",
            "League_to"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['League_to'] == 'Premier League')][['Age', 'Team_to', 'League_to']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me a reason why top backcourt players have a higher market value than the top frontcourt player",
        "Relevant data columns": [
            "Market_value",
            "Position"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "comparison",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "unclear if the comparison is to be made within each position or across positions",
        "Ambiguity resolution": "Create separate statistics for frontcourt and backcourt",
        "Data transformations": "df_frontcourt = df[df['Position'].isin(['Centre-Forward', 'Right Winger', 'Attacking Midfield'])]\ndf_backcourt = df[df['Position'].isin(['Centre-Back', 'Central Midfield'])]",
        "Data transformation operation": [
            "filter",
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "determine if the running time of movies has increased in recent years",
        "Relevant data columns": [
            "duration",
            "release_year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "Trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear how to compare running time across years.",
        "Ambiguity resolution": "Find the average running time per year and compare average running time for recent years with average running time for older years",
        "Data transformations": "df['release_year'] = pd.to_datetime(df['release_year'], format='%Y'); df['decade'] = (df['release_year'].dt.year // 10) * 10; df_recent_years = df[df['release_year'] > df['release_year'].mean()]; df_older_years = df[df['release_year'] <= df['release_year'].mean()]; recent_years_avg_runtime = df_recent_years.groupby('decade')['duration'].mean(); older_years_avg_runtime = df_older_years.groupby('decade')['duration'].mean()",
        "Data transformation operation": [
            "convert",
            "groupby",
            "summarize"
        ],
        "New Column Name": "decade",
        "Derivation Specification": "df['release_year'] = pd.to_datetime(df['release_year'], format='%Y'); df['decade'] = (df['release_year'].dt.year // 10) * 10",
        "Missing Data Column": ""
    },
    {
        "query": "does any movies not have a description",
        "Relevant data columns": [
            "description"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify a country or any other filters on the data. ",
        "Ambiguity resolution": "No ambiguity resolution needed",
        "Data transformations": "df[df['description'].isnull()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what are the groups of regions according to three types of avocados sales ratio",
        "Relevant data columns": [
            "region",
            "type"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear which sales ratios should be used to cluster the regions",
        "Ambiguity resolution": "Cluster the regions based on the ratios of conventional, organic, and sprouted avocado sales",
        "Data transformations": "conventional_sales_ratio = df['conventional']/df['Total Volume']; organic_sales_ratio = df['organic']/df['Total Volume']; sprouted_sales_ratio = df['sprouted']/df['Total Volume']; df['region_group'] = df.groupby('region')[['conventional_sales_ratio', 'organic_sales_ratio', 'sprouted_sales_ratio']].transform(lambda x: ','.join(x.astype(str)))",
        "Data transformation operation": [
            "calculate",
            "groupby",
            "transform"
        ],
        "New Column Name": "region_group",
        "Derivation Specification": "conventional_sales_ratio = df['conventional']/df['Total Volume']; organic_sales_ratio = df['organic']/df['Total Volume']; sprouted_sales_ratio = df['sprouted']/df['Total Volume']; df['region_group'] = df.groupby('region')[['conventional_sales_ratio', 'organic_sales_ratio', 'sprouted_sales_ratio']].transform(lambda x: ','.join(x.astype(str)))",
        "Missing Data Column": ""
    },
    {
        "query": "do you know which videos have more than 100 tags",
        "Relevant data columns": [
            "tags",
            "video_id"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There is ambiguity in the query because it is not clear what should be done with the video_id. One interpretation is that we want to return the video_id of the videos that have more than 100 tags, while another interpretation is that we want to return the tags of the videos that have more than 100 tags",
        "Ambiguity resolution": "Return the video_id of the videos that have more than 100 tags",
        "Data transformations": "df_filtered = df[df['tags'].str.split(',').str.len() > 100]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which videos are missing thumbnail links",
        "Relevant data columns": [
            "thumbnail_link"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query is ambiguous because it does not specify what criteria should be used to determine if a thumbnail link is missing.",
        "Ambiguity resolution": "We will assume that a thumbnail link is missing if it is empty string.",
        "Data transformations": "df = df[df['thumbnail_link'].isnull()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "plush - bad unboxing fan mail \" belongs to which specific channel",
        "Relevant data columns": [
            "channel_title"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify which specific metric should be used to find the extremum; therefore, it is unclear what the desired output of the query should be.",
        "Ambiguity resolution": "The desired output of the query is to find the channel with the highest number of videos that match the search terms \"plush - bad unboxing fan mail \"",
        "Data transformations": "df_filtered = df[df['title'].str.contains('plush') & df['title'].str.contains('bad') & df['title'].str.contains('unboxing') & df['title'].str.contains('fan mail')]; df_filtered.groupby('channel_title').size().idxmax()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "count",
            "max"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which video has the most tags",
        "Relevant data columns": [
            "tags",
            "video_id"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": null,
        "Ambiguity resolution": null,
        "Data transformations": "df.groupby('video_id')['tags'].apply(lambda x: len(x.split('|'))).max()",
        "Data transformation operation": [
            "groupby",
            "apply"
        ],
        "New Column Name": null,
        "Derivation Specification": null,
        "Missing Data Column": null
    },
    {
        "query": "indicate the number of likes that \" plush - bad unboxing fan mail \" receives",
        "Relevant data columns": [
            "likes"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query is ambiguous because the video title is not unique in the dataset, and there are multiple videos with the same title.",
        "Ambiguity resolution": "Filter the data to only include the video with the title \" plush - bad unboxing fan mail \"",
        "Data transformations": "df = df[df['title'] == \" plush - bad unboxing fan mail \"]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there are special characters included in the title",
        "Relevant data columns": [
            "title"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": null,
        "Ambiguity resolution": null,
        "Data transformations": null,
        "Data transformation operation": [],
        "New Column Name": null,
        "Derivation Specification": null,
        "Missing Data Column": []
    },
    {
        "query": "use the midterm exam and final exam as the 2nd and 1st keywords respectively in order to assign a rank to every one of the students",
        "Relevant data columns": [
            "Mid-term exams",
            "Final exam"
        ],
        "Data column classification": [
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "rank"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "There is no mention of the dataset, whether all the students need to be ranked or if they need to be ranked by class, etc",
        "Ambiguity resolution": "The ranking should be based on the Mid-term and final exam scores for all the students",
        "Data transformations": "df = df[['Mid-term exams', 'Final exam']]; df['rank'] = df['Final exam'].rank(method='min') + df['Mid-term exams'].rank(method='min'); df = df.sort_values('rank'); df = df.reset_index(drop=True)",
        "Data transformation operation": [
            "select",
            "rank",
            "sort"
        ],
        "New Column Name": "rank",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me how mara attributes are distributed",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [],
        "Ambiguity in the query": "the query is ambiguous because it does not specify what attributes are of interest",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": []
    },
    {
        "query": "name the country with the lowest suicide rate",
        "Relevant data columns": [
            "country",
            "suicides/100k pop"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['suicides/100k pop']==df['suicides/100k pop'].min()]['country']",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there any countries with anomalously low suicides rates",
        "Relevant data columns": [
            "country",
            "suicides/100k pop"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['suicides/100k pop'] < df['suicides/100k pop'].mean()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the country with the lowest suicide rate is",
        "Relevant data columns": [
            "country",
            "suicides/100k pop"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify the year for which we should find the country with the lowest suicide rate",
        "Ambiguity resolution": "It is unclear if we need to consider all years in the dataset or focus on a specific year",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution rate of suicide",
        "Relevant data columns": [
            "suicides_no",
            "population",
            "suicides/100k pop"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['country'] == 'Albania']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total number of all suicides in 1999",
        "Relevant data columns": [
            "suicides_no",
            "year"
        ],
        "Data column classification": [
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['year']==1999]; df['suicides_no'].sum()",
        "Data transformation operation": [
            "filter",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "for the gdp of china, has it gone up or down over the last decade",
        "Relevant data columns": [
            "gdp_for_year ($)",
            "year",
            "country"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "Since the query does not mention a decade it needs to be inferred",
        "Ambiguity resolution": "assume the last 10 years",
        "Data transformations": "df = df[df['country'] == 'China']; df[df['year'].isin(range(2011, 2021))][['year', 'gdp_for_year ($)']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What creative type of movie had the highest production budget for each content rating",
        "Relevant data columns": [
            "Creative Type",
            "Production Budget",
            "Content Rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum",
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Content Rating')['Production Budget'].max()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What major genre had the lowest average worldwide gross",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many movies are there are of each creative type",
        "Relevant data columns": [
            "Creative Type"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Creative Type').size().to_frame('count').reset_index()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "count",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Movie run time distribution",
        "Relevant data columns": [
            "Running Time"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Running Time']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How production budge changes over release years",
        "Relevant data columns": [
            "Production Budget",
            "Release Year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Production Budget'] != 'None']; df = df.sort_values('Release Year')",
        "Data transformation operation": [
            "filter",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does Rotten Tomatoes Rating change as IMDB Rating",
        "Relevant data columns": [
            "Rotten Tomatoes Rating",
            "IMDB Rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[[\"Rotten Tomatoes Rating\", \"IMDB Rating\"]]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the average production budget in each year",
        "Relevant data columns": [
            "Production Budget",
            "Release Year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "summarize",
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Release Year')['Production Budget'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How much did major genres gross in total",
        "Relevant data columns": [
            "Major Genre",
            "Worldwide Gross"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify the total for each genre or across all genres",
        "Ambiguity resolution": "Get the total gross of each genre; Get the sum of gross across all genres",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].sum(); df['Worldwide Gross'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize",
            "sum"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what's the distribution of running times by movie",
        "Relevant data columns": [
            "Running Time",
            "Title"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many movies are there for each creative type",
        "Relevant data columns": [
            "Creative Type"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Creative Type').size()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Show me the variation in the amount ordered by different entities in different orders",
        "Relevant data columns": [
            "Amount",
            "Entity",
            "Order"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There are different levels of granularity across entities and order, and the term variation is vague. This makes it unclear if the user wants to see variation across orders, entities, or both",
        "Ambiguity resolution": "Calculate total amount ordered for each entity and order combination",
        "Data transformations": "df = df.groupby(['Entity', 'Order'])['Amount'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "relation between rotten tomatoes and IMDB ratings",
        "Relevant data columns": [
            "Rotten Tomatoes Rating",
            "IMDB Rating"
        ],
        "Data column classification": [
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "worldwide gross for each genre for each year 1995 to now",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre",
            "Release Year"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Release Year'] >= 1995]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Relationship of Rotten Tomatoes rating to IMDB rating",
        "Relevant data columns": [
            "Rotten Tomatoes Rating",
            "IMDB Rating"
        ],
        "Data column classification": [
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[['Rotten Tomatoes Rating', 'IMDB Rating']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many heavy cars are in the dataset",
        "Relevant data columns": [
            "weightlbs"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not provide any specifics about the conditions of being considered heavy.",
        "Ambiguity resolution": "Consider a heavy car to be one that has a weight greater than 3500 pounds",
        "Data transformations": "df[df['weightlbs']>3500]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Are there any American 5 cylinder cars",
        "Relevant data columns": [
            "cylinders",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['cylinders'] == 5 & df['country'] == 'US']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Which cylinder cars have the highest fuel economy",
        "Relevant data columns": [
            "cylinders",
            "mpg"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('cylinders')['mpg'].max()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Which countries have the most cars in this dataset",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('country').count()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How do the horsepowers of the cars from different regions change with years",
        "Relevant data columns": [
            "hp",
            "year",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "Trend",
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['hp'].notna()]; df.groupby(['year', 'country'])['hp'].mean().reset_index()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "summarize",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the correlation between displacement and MPG of cars with different origins",
        "Relevant data columns": [
            "mpg",
            "cubicinches",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['country'].isin(['US.', 'Europe.', 'Japan.'])]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the correlation between horsepower and acceleration",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does weight relate to acceleration for car models, small multiples by origin",
        "Relevant data columns": [
            "weightlbs",
            "timeto60",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            "correlation",
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Does higher horsepower mean lower acceleration",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[['hp', 'timeto60']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many cylinders do cars manufactured in different countries have",
        "Relevant data columns": [
            "cylinders",
            "country"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('country').agg({'cylinders':'count'})",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many cars do each country manufacture",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('country').count()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How does mileage relate to cylinder count",
        "Relevant data columns": [
            "mpg",
            "cylinders"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average MPG for different cylinders",
        "Relevant data columns": [
            "mpg",
            "cylinders"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('cylinders')['mpg'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What's the average production budget of the different rated movies, separated by creative type",
        "Relevant data columns": [
            "Production Budget",
            "Content Rating",
            "Creative Type"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Content Rating', 'Creative Type'])['Production Budget'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does displacement relate to mpg for individual models, partitioned by country",
        "Relevant data columns": [
            "mpg",
            "cubicinches"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare",
            "find pattern",
            "partition"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query mentions 'models', which is not available in the dataset. It is unclear how 'models' should be extracted",
        "Ambiguity resolution": "No resolution provided",
        "Data transformations": "df",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the relation between horsepower and acceleration",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['hp', 'timeto60']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "For each region, how does a car's MPG vary with displacement",
        "Relevant data columns": [
            "mpg",
            "cubicinches",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df.dropna(subset=['mpg', 'cubicinches', 'country']); df.groupby('country')",
        "Data transformation operation": [
            "filter",
            "groupby"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the breakdown of cars by the number of cylinders in each region",
        "Relevant data columns": [
            "cylinders",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['cylinders', 'country']).size().reset_index(name='count')",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the relationship between profit and sales",
        "Relevant data columns": [
            "Profit",
            "Sales"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the sales trend of the different product categories",
        "Relevant data columns": [
            "Sales",
            "Product Name",
            "Category"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Category', 'Product Name'])['Sales'].sum().reset_index()",
        "Data transformation operation": [
            "groupby",
            "sum",
            "reset_index"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the range of weights for all cars",
        "Relevant data columns": [
            "weightlbs"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['weightlbs'].max() - df['weightlbs'].min()",
        "Data transformation operation": [
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the average storm length",
        "Relevant data columns": [
            "name",
            "day"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Length can either be duration (time between start and end of storm) or distance (along the storm path)",
        "Ambiguity resolution": "Assume storm length as duration",
        "Data transformations": "df = df.groupby('name')['day'].max() - df.groupby('name')['day'].min()",
        "Data transformation operation": [
            "groupby",
            "max",
            "min",
            "subtract"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Are there any repeat names of storms",
        "Relevant data columns": [
            "name"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear whether the number of repetitions of storm names should be taken into account",
        "Ambiguity resolution": "Count number of repetitions of storm names",
        "Data transformations": "df.groupby('name').size()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the total worldwide gross earned by each major genre and content rating",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre",
            "Content Rating"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "Summarize"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Major Genre', 'Content Rating'])['Worldwide Gross'].sum()",
        "Data transformation operation": [
            "groupby",
            "sum"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How much was sold each day for each category",
        "Relevant data columns": [
            "Days to Ship",
            "Sales",
            "Category",
            "Order Date"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Sales can be split across multiple days. It is unclear whether the query intends to summarize across days or retain each individual row",
        "Ambiguity resolution": "summarize across each day and category combination",
        "Data transformations": "df.groupby(['Days to Ship', 'Category'])['Sales'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the average profit for each state",
        "Relevant data columns": [
            "Profit",
            "State"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Profit'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many orders were placed for each order quantity",
        "Relevant data columns": [
            "Order ID",
            "Quantity"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "count"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Quantity').count()['Order ID']",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "I want to know how many orders there are by the quantity of the order",
        "Relevant data columns": [
            "Quantity",
            "Order ID"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "count"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Quantity').count()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is our profit based on shipping mode by customer segment",
        "Relevant data columns": [
            "Profit",
            "Ship Mode",
            "Segment"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compute derived value",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify the scope of time to be considered. It is unclear if the analysis is for all time or for a specific time period.",
        "Ambiguity resolution": "Add a filter to only include rows within a specific time range",
        "Data transformations": "df = df[(df['Order Date'] >= '2017-01-01') & (df['Order Date'] <= '2017-12-31')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how much is the profit for sales for each",
        "Relevant data columns": [
            "Sales",
            "Profit"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is unclear how the results should be grouped",
        "Ambiguity resolution": "group results by each value",
        "Data transformations": "df.groupby(['Sales']).agg({'Profit': 'sum'})",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the correlation between sales and profit by region",
        "Relevant data columns": [
            "Sales",
            "Profit",
            "Region"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What months are hurricanes most common",
        "Relevant data columns": [
            "month",
            "category"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['category'] == 'hurricane']; df.groupby('month').size().sort_values(ascending = False).head(1)",
        "Data transformation operation": [
            "filter",
            "groupby",
            "summarize",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Are there more storms in recent years",
        "Relevant data columns": [
            "year"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What does the distribution of the storms look like",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what the distribution is supposed to be across; is it across time or across space",
        "Ambiguity resolution": "Assume the distribution is across time. If the query was about distribution across space, we would need to first group the data by location.",
        "Data transformations": "df.groupby('year', 'month', 'day').size()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the most frequent status over the year",
        "Relevant data columns": [
            "status"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('status').size()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the main factor depending on different status (wind, time, pressure, or etc)",
        "Relevant data columns": [
            "status",
            "wind",
            "pressure",
            "ts_diameter",
            "hu_diameter"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify how to determine the main factor",
        "Ambiguity resolution": "Calculate correlation between all factors and status",
        "Data transformations": "df.corr()['status'].abs().sort_values(ascending=False).reset_index()",
        "Data transformation operation": [
            "correlation",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What was the name of the earliest storm",
        "Relevant data columns": [
            "name",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by=['year'], ascending=True).head(1)",
        "Data transformation operation": [
            "sort",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many hurricanes",
        "Relevant data columns": [
            "name",
            "category"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Ambiguous how to define hurricanes in this dataset",
        "Ambiguity resolution": "Consider all entries with category of 4 or 5 as hurricanes",
        "Data transformations": "df = df[df['category'].isin([4,5])]'; df['count'] = 1",
        "Data transformation operation": [
            "filter",
            "calculate"
        ],
        "New Column Name": "count",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the name of the largest storm",
        "Relevant data columns": [
            "name",
            "wind"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['wind']==df['wind'].max()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What storm produced the greatest air pressure",
        "Relevant data columns": [
            "name",
            "pressure"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('name')['pressure'].max()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many storms are named Caroline",
        "Relevant data columns": [
            "name"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['name'] == 'Caroline']; df['name'].count()",
        "Data transformation operation": [
            "filter",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Is there a correlation between wind speed and air pressure",
        "Relevant data columns": [
            "wind",
            "pressure"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['wind', 'pressure']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the relationship, if any, between wind and pressure",
        "Relevant data columns": [
            "wind",
            "pressure"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How has wind speed changed over time",
        "Relevant data columns": [
            "wind",
            "time"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Since the time column is not mentioned, the time column has to be inferred",
        "Ambiguity resolution": "Time should be inferred from the month, day, and year columns",
        "Data transformations": "df['datetime'] = pd.to_datetime(df[['year', 'month', 'day', 'hour']])",
        "Data transformation operation": [
            "derive"
        ],
        "New Column Name": "datetime",
        "Derivation Specification": "pd.to_datetime(df[['year', 'month', 'day', 'hour']])",
        "Missing Data Column": ""
    },
    {
        "query": "What is the maximum pressure of a certain hurricane",
        "Relevant data columns": [
            "pressure",
            "name"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify which hurricane the user is interested in.",
        "Ambiguity resolution": "Ask the user to specify the hurricane name",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Which hurricane lasted the longest",
        "Relevant data columns": [
            "name",
            "year",
            "month",
            "day",
            "hour"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query is ambiguous because it does not specify the period of time over which the duration of the hurricanes should be compared",
        "Ambiguity resolution": "Assume the hurricanes should be compared over all the years in the dataset",
        "Data transformations": "df.groupby('name').agg({'year': 'max', 'month': 'max', 'day': 'max', 'hour': 'max'}) - df.groupby('name').agg({'year': 'min', 'month': 'min', 'day': 'min', 'hour': 'min'})",
        "Data transformation operation": [
            "groupby",
            "agg",
            "subtract"
        ],
        "New Column Name": "duration",
        "Derivation Specification": "df['duration'] = (df['max_year'] - df['min_year']) * 365 + (df['max_month'] - df['min_month']) * 30 + (df['max_day'] - df['min_day']) + (df['max_hour'] - df['min_hour'])",
        "Missing Data Column": ""
    },
    {
        "query": "How many incidents of gun violence result in death (Ie what proportion are fatal vs non-fatal)",
        "Relevant data columns": [
            "n_killed",
            "n_injured"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "summarize",
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['incident_type'] = df['n_killed'] > 0",
        "Data transformation operation": [
            "add column"
        ],
        "New Column Name": "incident_type",
        "Derivation Specification": "df['incident_type'] = df['n_killed'] > 0",
        "Missing Data Column": ""
    },
    {
        "query": "What type of gun violence has seen the most growth over the years",
        "Relevant data columns": [
            "Incident characteristics"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "trend",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Ambiguous because there are different ways to measure growth",
        "Ambiguity resolution": "We will calculate the growth as the change in number of incidents from one year to the next",
        "Data transformations": "cleaned_df = df.dropna(subset=['Incident characteristics']); valid_years = cleaned_df.groupby('date').size(); years_with_valid_entries_for_all_countries = valid_years[valid_years == len(df['date'].unique())].index.tolist(); df = valid_entries_df = df[df['date'].isin(years_with_valid_entries_for_all_countries)]; df['growth'] = df.groupby('Incident characteristics')['Incident characteristics'].diff()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "count",
            "select",
            "groupby",
            "diff"
        ],
        "New Column Name": "growth",
        "Derivation Specification": null,
        "Missing Data Column": ""
    },
    {
        "query": "How does acceleration change with horsepower",
        "Relevant data columns": [
            "hp",
            "timeto60"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['hp', 'timeto60']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the average profit of each ship mode divided by segment",
        "Relevant data columns": [
            "Profit",
            "Ship Mode",
            "Segment"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compute derived value",
            "summarize",
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Ship Mode', 'Segment'])['Profit'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the relationship between sales and profit for each region",
        "Relevant data columns": [
            "Sales",
            "Profit",
            "Region"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Region'])[['Sales', 'Profit']].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many products are ordered in single quantity",
        "Relevant data columns": [
            "Quantity"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Quantity']==1]; df['product_count'] = df['Quantity'].count()",
        "Data transformation operation": [
            "filter",
            "count"
        ],
        "New Column Name": "product_count",
        "Derivation Specification": "df['product_count'] = df['Quantity'].count()",
        "Missing Data Column": ""
    },
    {
        "query": "What are the profits across different states",
        "Relevant data columns": [
            "Profit",
            "State"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Profit'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "sales forecast between Jan 2016 and July 2017",
        "Relevant data columns": [
            "Sales Forecast",
            "Order Date"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "There is no year specified for January and July, it is unclear if the years are 2016 and 2017",
        "Ambiguity resolution": "Assume the years are 2016 and 2017",
        "Data transformations": "df = df[(df['Order Date'] > '2016-01-01') & (df['Order Date'] < '2017-07-01')][['Sales Forecast', 'Order Date']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the average profit of different segments on the ship modes of transport",
        "Relevant data columns": [
            "Segment",
            "Ship Mode",
            "Profit"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Segment', 'Ship Mode'])['Profit'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Where are storms most common depending on the time of year",
        "Relevant data columns": [
            "month",
            "name"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlation",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What storm had the greatest diameter of hurricane strength winds",
        "Relevant data columns": [
            "name",
            "ts_diameter",
            "category"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Find Extremum"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear what hurricane strength is, which could be defined as different categories of storms",
        "Ambiguity resolution": "Hurricane strength is defined as category 3, 4, or 5",
        "Data transformations": "df = df[df['category'].isin([3,4,5])]; df[df['ts_diameter']==df['ts_diameter'].max()]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Where have all hurricanes been recorded on the globe Where are they more common",
        "Relevant data columns": [
            "lat",
            "long",
            "status"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum",
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify if the user wants to see all hurricanes or just some specific ones",
        "Ambiguity resolution": "If no specific status of hurricane is requested, show hurricanes of all statuses",
        "Data transformations": "df = df[df['status'] == 'hurricane']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What are lengths/timings of hurricane seasons in different regions of the world",
        "Relevant data columns": [
            "month",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what metric of length/timing of hurricane seasons is being requested.",
        "Ambiguity resolution": "Ambiguity can be resolved by generating an interactive visualization that shows the duration of hurricane seasons in different regions of the world and lets the user identify interesting trends.",
        "Data transformations": "df.groupby(['year', 'region'])['month'].agg(['min', 'max']).reset_index()",
        "Data transformation operation": [
            "groupby",
            "summarize",
            "reset index"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the average time that it takes to go from depression to storm",
        "Relevant data columns": [
            "status",
            "year",
            "month",
            "day",
            "hour"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find average"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query doesn't mention any specific storm or depression so it is unclear which data to use. There is also no mention of what metric to use to measure the time taken.",
        "Ambiguity resolution": "Calculate time difference between first occurence of status 'tropical depression' and first occurence of status 'tropical storm' for each named storm.",
        "Data transformations": "df['status'] = df['status'].astype('category'); storm_events = df[df['status'] == 'tropical storm']; depression_events = df[df['status'] == 'tropical depression']; df = storm_events.merge(depression_events, on=['name', 'year'], suffixes=['_storm', '_depression']); df['time_to_storm'] = df['hour_storm'] - df['hour_depression']; df.groupby('name')['time_to_storm'].mean()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "summarize"
        ],
        "New Column Name": "time_to_storm",
        "Derivation Specification": "df['time_to_storm'] = df['hour_storm'] - df['hour_depression']",
        "Missing Data Column": ""
    },
    {
        "query": "How does wind change over the course of each hurricane",
        "Relevant data columns": [
            "wind",
            "name"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify a particular hurricane or a particular duration over which the trend needs to be evaluated.",
        "Ambiguity resolution": "Group the data by hurricane name and evaluate the trend over time",
        "Data transformations": "df.groupby(['name'])['wind'].agg(['min', 'max', 'mean'])",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the relationship between storm day and hu_diameter",
        "Relevant data columns": [
            "day",
            "hu_diameter"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Are there any visible trends in violent crime rates over the time period",
        "Relevant data columns": [
            "Years",
            "Firearm deaths (People)",
            "Homicide (People)",
            "Suicide (People)",
            "Unintentional (People)",
            "Legal intervention (People)",
            "Undetermined (People)"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query is ambiguous because it does not specify which of the violent crime categories should be considered.",
        "Ambiguity resolution": "Consider all violent crime categories",
        "Data transformations": "df.groupby('Years', 'Country')[\"Firearm deaths (People)\", \"Homicide (People)\", \"Suicide (People)\", \"Unintentional (People)\", \"Legal intervention (People)\", \"Undetermined (People)\"].sum()",
        "Data transformation operation": [
            "groupby",
            "sum"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Are there any correlations between crime types and geographic location",
        "Relevant data columns": [
            "incident_characteristics",
            "state",
            "city_or_county",
            "location_description",
            "gun_type"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "Correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The granularity of the correlation is not clear. It is unclear if the correlation is at the city, state or county level",
        "Ambiguity resolution": "Perform analysis at different granularity levels and display in a single visual",
        "Data transformations": "clean_df = df.dropna(subset=['incident_characteristics', 'state', 'city_or_county', 'location_description', 'gun_type']); count_df = clean_df.groupby(['state', 'city_or_county', 'incident_characteristics']).size().to_frame('count').reset_index(); county_level_df = count_df.groupby(['state', 'city_or_county'])['count'].agg('sum').reset_index(); state_level_df = count_df.groupby(['state'])['count'].agg('sum').reset_index()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "count",
            "groupby",
            "agg"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Are there any significant correlations between any 2 variables in the dataset",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what data transformations are needed to calculate correlation. It is unclear if a significance threshold needs to be calculated",
        "Ambiguity resolution": "Correlation can be calculated using raw data and the significance threshold can be specified in the plot",
        "Data transformations": "df.corr()",
        "Data transformation operation": [
            "correlation"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Is more gun violence committed with stolen guns or non stolen guns",
        "Relevant data columns": [
            "gun_stolen",
            "n_killed"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear how gun violence is to be defined",
        "Ambiguity resolution": "Count of killed individuals by gun_stolen",
        "Data transformations": "df['gun_stolen'] = df['gun_stolen'].astype('category'); df.groupby(['gun_stolen'])['n_killed'].sum()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me a list of neighborhoods with the number of male births from least to most",
        "Relevant data columns": [
            "Number",
            "Neighborhood Name",
            "District Name"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by='Number')",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which neighborhood in ciutat vella has more than 100 females born in the year 2013",
        "Relevant data columns": [
            "District Name",
            "Gender",
            "Number"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum",
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The data provided does not include information about the year of birth, so it is not possible to answer the query",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the total number of categories",
        "Relevant data columns": [
            "Category"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Category').size()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the relationship between release year and average production budget",
        "Relevant data columns": [
            "Release Year",
            "Production Budget"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Release Year').mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Which creative type had the most movies",
        "Relevant data columns": [
            "Creative Type"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Creative Type').size().sort_values(ascending=False).head(1)",
        "Data transformation operation": [
            "groupby",
            "count",
            "sort",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Compare imdb rating to rotten tomatoes rating",
        "Relevant data columns": [
            "IMDB Rating",
            "Rotten Tomatoes Rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Help me see outliers in IMDB and Rotten Tomatoes ratings",
        "Relevant data columns": [
            "IMDB Rating",
            "Rotten Tomatoes Rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "IMDB and Rotten Tomatoes ratings are in two different scales. It is unclear how to visualize them in a way that outlieres in both scales are shown",
        "Ambiguity resolution": "Normalize both the ratings to a scale of 0 to 1 before plotting",
        "Data transformations": "df['Normalized IMDB Rating'] = df['IMDB Rating']/df['IMDB Rating'].max(); df['Normalized Rotten Tomatoes Rating'] = df['Rotten Tomatoes Rating']/df['Rotten Tomatoes Rating'].max()",
        "Data transformation operation": [
            "math"
        ],
        "New Column Name": [
            "Normalized IMDB Rating",
            "Normalized Rotten Tomatoes Rating"
        ],
        "Derivation Specification": "df['Normalized IMDB Rating'] = df['IMDB Rating']/df['IMDB Rating'].max(); df['Normalized Rotten Tomatoes Rating'] = df['Rotten Tomatoes Rating']/df['Rotten Tomatoes Rating'].max()",
        "Missing Data Column": ""
    },
    {
        "query": "What was the average worldwide gross of movies by genre",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which creative types had the most movies",
        "Relevant data columns": [
            "Creative Type"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Creative Type']).size().to_frame('count').reset_index()",
        "Data transformation operation": [
            "groupby",
            "count",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Relation between worldwide gross and production budget for each major genre",
        "Relevant data columns": [
            "Worldwide Gross",
            "Production Budget",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear if the relation is per year, or overall",
        "Ambiguity resolution": "Aggregate all years",
        "Data transformations": "df = df.groupby('Major Genre').agg({'Worldwide Gross': 'sum', 'Production Budget':'sum'})",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "The distribution of the number of cylinders of cars based on different origins",
        "Relevant data columns": [
            "cylinders",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('country')['cylinders'].value_counts()",
        "Data transformation operation": [
            "groupby",
            "value_counts"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "count the number of cars based on their origins",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "Retrieve Value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('country').count()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What's the mileage for cars based on the number of cylinders present",
        "Relevant data columns": [
            "mpg",
            "cylinders"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Does higher cylinder count mean mean lower mileage",
        "Relevant data columns": [
            "cylinders",
            "mpg"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how weight varies each year",
        "Relevant data columns": [
            "weightlbs",
            "Year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[['Year', 'weightlbs']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many models are proudced by each country",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "count"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear whether models mean unique models or total number of models.",
        "Ambiguity resolution": "Assuming that model refers to unique models",
        "Data transformations": "df.groupby('country').size().reset_index(name='number_of_models')",
        "Data transformation operation": [
            "groupby",
            "count",
            "reset index"
        ],
        "New Column Name": "number_of_models",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "where do the cars originate from",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['country']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Compare AVG (Acceleration) with Cylinders | Segregate the cylinders by their origin",
        "Relevant data columns": [
            "cylinders",
            "Acceleration",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare",
            "retrieve value",
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what is meant by 'Acceleration'. Possible options are timeto60 and horsepower. It is also unclear how the country will be used",
        "Ambiguity resolution": "timeto60 is assumed to be the acceleration. Country will be used to split the data into separate plots",
        "Data transformations": "df = df.rename(columns={'timeto60': 'Acceleration'})",
        "Data transformation operation": [
            "rename"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How does AVG (Weight) evolve over the years",
        "Relevant data columns": [
            "Weightlbs",
            "Year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Year')['Weightlbs'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How does acceleration behave compared to horsepower",
        "Relevant data columns": [
            "timeto60",
            "hp"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['hp', 'timeto60']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many cars are from each region",
        "Relevant data columns": [
            "country"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The dataset has country column but the query mentions regions. There needs to be a data transformation to map countries to regions",
        "Ambiguity resolution": "This mapping is out of scope for this project",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how does MPG compare to displacement, broken out by region",
        "Relevant data columns": [
            "mpg",
            "cubicinches",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['cubicinches'] > 0]; df = df.dropna(subset=['mpg', 'cubicinches', 'country'])",
        "Data transformation operation": [
            "filter",
            "dropna"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the average gdp of countries in western europe",
        "Relevant data columns": [
            "Economy (GDP per Capita)",
            "Region"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Region'] == 'Western Europe'][['Region', 'Economy (GDP per Capita)']].groupby('Region').mean()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "mean"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you rearrange the table by book rating in descending order",
        "Relevant data columns": [
            "averageRating"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('averageRating', ascending=False)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "calculate the average black population for each state",
        "Relevant data columns": [
            "State",
            "Black"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Black'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in each year, what is the distribution of the number of postgraduates",
        "Relevant data columns": [
            "Year",
            "Postgraduate"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Year')['Postgraduate'].count()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in the videos by \" eminemvevo \", what are the average number of comments made",
        "Relevant data columns": [
            "comments_disabled",
            "comment_count"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "Since there is no explicit date range mentioned, it is unclear if the comments for all videos uploaded by the channel are to be considered or just a subset of videos uploaded within a certain time range",
        "Ambiguity resolution": "Consider all videos uploaded by the channel",
        "Data transformations": "df = df[df['channel_title'] == 'EminemVevo']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me a list of videos, ordered by the number of likes, that are on the channel \" eminemvevo \"",
        "Relevant data columns": [
            "video_id",
            "likes",
            "channel_title"
        ],
        "Data column classification": [
            "data value mention",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "sort",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear how to sort the list of videos. Should it be in ascending or descending order",
        "Ambiguity resolution": "Generate the list in descending order",
        "Data transformations": "df = df[df['channel_title'] == \"eminemvevo\"]; df = df.sort_values('likes', ascending=False); df[['video_id', 'likes', 'channel_title']]",
        "Data transformation operation": [
            "filter",
            "sort",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what differences are there among the students who acquired more than 270 points between 2010 -2019",
        "Relevant data columns": [
            "First Name",
            "Last Name",
            "Total\nPoints Student\nAverage"
        ],
        "Data column classification": [
            "data value mention",
            "data value mention",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "No ambiguity",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Total\nPoints Student\nAverage'] > 270]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me all of the categories of grade types",
        "Relevant data columns": [
            "Grade"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Grade'].unique()",
        "Data transformation operation": [
            "unique"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the median score of the cw1 class",
        "Relevant data columns": [
            "CW 1"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['CW 1']",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "was the same midterm exam given to velma paul and glynis caine",
        "Relevant data columns": [
            "First Name",
            "Last Name",
            "Mid-term exams"
        ],
        "Data column classification": [
            "data value mention",
            "data value mention",
            "keyword"
        ],
        "Low-level visualization task": [
            "comparison"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query mentions Velma Paul but does not mention Glynis Caine, which makes the query ambiguous. It is unclear whether the user wants to compare the midterm exams of Velma Paul and Glynis Caine or whether they want to compare the midterm exams of Velma Paul and all other students.",
        "Ambiguity resolution": "Remove Glynis Caine from the query",
        "Data transformations": "df = df[df['First Name'] == 'Velma' & df['Last Name'] == 'Paul']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "Last Name",
        "Missing Data Column Classification": "data value mention"
    },
    {
        "query": "does simiyu have a similar structure of peope as that of katavi",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "similarity"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query is ambiguous as it does not specify what is meant by 'structure of people'. It could refer to age distribution, gender distribution, or some other characteristic.",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do you know the average number of suicides in europe",
        "Relevant data columns": [
            "suicides_no"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The dataset includes data from different countries, but the query refers to Europe. It is unclear if the query is asking for the average number of suicides across all countries in the dataset or just for the countries in Europe",
        "Ambiguity resolution": "Find countries in europe; summarize the suicide count across all years and find the average",
        "Data transformations": "european_countries = ['Albania']; df_europe = df[df['country'].isin(european_countries)][['country', 'suicides_no']]; df_europe = df_europe.groupby('country')['suicides_no'].mean()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there similarities between gdp per capita and suicide rates",
        "Relevant data columns": [
            "gdp_per_capita",
            "suicides/100k pop"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify the country",
        "Ambiguity resolution": " ",
        "Data transformations": "df.groupby('country')[['gdp_per_capita', 'suicides/100k pop']].corr()",
        "Data transformation operation": [
            "groupby",
            "correlation"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "would there be any clustering of countries in terms of suicide rates",
        "Relevant data columns": [
            "suicides/100k pop",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "create a list showing the ages of people who committed suicide in albania",
        "Relevant data columns": [
            "age"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['country'] == 'Albania']; df[['age']] ",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "create a list of schools showing the descending order by change_p",
        "Relevant data columns": [
            "CHANGE_PREVIOUS_YEAR",
            "NAME"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('CHANGE_PREVIOUS_YEAR', ascending=False)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you provide a list of school names in geita",
        "Relevant data columns": [
            "NAME",
            "REGION"
        ],
        "Data column classification": [
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['REGION'] == 'GEITA']['NAME']",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "compare the number of tall buildings in hong kong with taiwan",
        "Relevant data columns": [
            "Country/Region",
            "name"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear what metric should be used to quantify the tallness of a building. Should the number of stories be used or the height in meters or feet?",
        "Ambiguity resolution": "Count the number of buildings in each country that have more than 80 stories",
        "Data transformations": "df = df[df['Stories'] > 80]; df.groupby('Country/Region')['name'].count()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the distribution of travel times between wells st & elm st and lake shore dr & ohio st",
        "Relevant data columns": [
            "tripduration",
            "from_station_name",
            "to_station_name"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There are multiple Wells st & Elm St and Lake Shore Dr & Ohio St. It is unclear if the user is interested in all of them or just one of them",
        "Ambiguity resolution": "Provide the distribution of travel times for all wells st & elm st to all lake shore dr & ohio st",
        "Data transformations": "df = df[(df['from_station_name'].str.contains('Wells St & Elm St')) & (df['to_station_name'].str.contains('Lake Shore Dr & Ohio St'))]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "describe the popularity of the loudest song",
        "Relevant data columns": [
            "Popularity",
            "Loudness..dB.."
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Loudness..dB..']==df['Loudness..dB..'].max()]['Popularity']",
        "Data transformation operation": [
            "filter",
            "retrieve value"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there singers who span multiple genres",
        "Relevant data columns": [
            "Artist.Name",
            "Genre"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "What is the target group for singers that span multiple genres? For example, is the group singers who span more than two genres or more than one genre?",
        "Ambiguity resolution": "Find all unique combinations of singers and their genres and then remove singers with one genre",
        "Data transformations": "artist_genre_counts = df.groupby('Artist.Name')['Genre'].nunique(); df = artist_genre_counts[artist_genre_counts>1].reset_index()",
        "Data transformation operation": [
            "groupby",
            "summarize",
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which group of nations won the most games",
        "Relevant data columns": [
            "home_team",
            "away_team"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear if wins include both home and away wins or just home wins",
        "Ambiguity resolution": "To calculate wins, wins by both home and away teams should be considered",
        "Data transformations": "df['winning_team'] = df['home_team'].mask(df['home_score'] < df['away_score'], df['away_team']); df['wins'] = df['winning_team'].groupby(df['winning_team']).transform('size')",
        "Data transformation operation": [
            "ifelse",
            "groupby",
            "count"
        ],
        "New Column Name": "wins",
        "Derivation Specification": "df['wins'] = df['winning_team'].groupby(df['winning_team']).transform('size')",
        "Missing Data Column": ""
    },
    {
        "query": "what countries have won a similar number of games",
        "Relevant data columns": [
            "home_team",
            "away_team"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "comparison"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The user has not specified what constitutes a similar number of wins. This could be operationalized in a number of ways",
        "Ambiguity resolution": "Find all teams with an equal number of wins as each team",
        "Data transformations": "df.groupby(['home_team', 'away_team']).size().to_frame('count').reset_index().merge(df.groupby(['home_team', 'away_team']).size().to_frame('count').reset_index(), left_on=['home_team', 'count'], right_on=['away_team', 'count']).drop('away_team_y', axis=1).rename(columns={'away_team_x':'opponent_team', 'count_y':'opponent_team_wins'}).drop_duplicates(['home_team', 'opponent_team']).sort_values(['home_team', 'opponent_team_wins'])",
        "Data transformation operation": [
            "groupby",
            "count",
            "merge",
            "drop",
            "rename",
            "drop_duplicates",
            "sort"
        ],
        "New Column Name": "opponent_team_wins",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me the average population rating for ashley in the year 2000",
        "Relevant data columns": [
            "Population July 1, 2000",
            "County"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['County'] == 'Ashley']; df = df[df['Population July 1, 2000'].notna()]; df = df[['Population July 1, 2000']]; df = df.mean()",
        "Data transformation operation": [
            "filter",
            "select",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average population in 2000",
        "Relevant data columns": [
            "Population July 1, 2000"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Population July 1, 2000'].mean()",
        "Data transformation operation": [
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "would teachers in harvard be considered outliers if the university was in new york",
        "Relevant data columns": [
            "Name",
            "Location",
            "Tuition"
        ],
        "Data column classification": [
            "inferred",
            "data value mention",
            "inferred"
        ],
        "Low-level visualization task": [
            "Find Anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not make it clear if teachers are to be compared to other teachers in the same university (Harvard) or all other teachers in New York.",
        "Ambiguity resolution": "In order to answer the question, it is necessary to calculate the mean and standard deviation of tuition costs for universities in New York and compare it to Harvard's tuition cost.",
        "Data transformations": "ny_tuition_mean = df[df['Location'] == 'NY']['Tuition'].mean(); ny_tuition_std = df[df['Location'] == 'NY']['Tuition'].std(); df['Tuition z-score'] = (df['Tuition'] - ny_tuition_mean) / ny_tuition_std;",
        "Data transformation operation": [
            "filter",
            "summarize",
            "calculate"
        ],
        "New Column Name": "Tuition z-score",
        "Derivation Specification": "df['Tuition z-score'] = (df['Tuition'] - ny_tuition_mean) / ny_tuition_std",
        "Missing Data Column": ""
    },
    {
        "query": "were you aware of the most recent news",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [],
        "Low-level visualization task classification": [],
        "Visualization goal": [],
        "Ambiguity in the query": "This query is not relevant to the provided dataset.",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what dimension of the happiness index has the maximum fluctuation",
        "Relevant data columns": [
            "Happiness Score",
            "Standard Error"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Standard Error'] == df['Standard Error'].max()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "retrieve the country that has had a sudden decrease in happiness score within a year",
        "Relevant data columns": [
            "Country",
            "Happiness Score",
            "Year"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "Sudden decrease is not quantified",
        "Ambiguity resolution": "Calculate difference in happiness score from previous year and flag rows where this difference is significant",
        "Data transformations": "df['Happiness Score Diff'] = df['Happiness Score'] - df['Happiness Score'].shift(1)",
        "Data transformation operation": [
            "shift",
            "subtract"
        ],
        "New Column Name": "Happiness Score Diff",
        "Derivation Specification": "df['Happiness Score Diff'] = df['Happiness Score'] - df['Happiness Score'].shift(1)",
        "Missing Data Column": ""
    },
    {
        "query": "which author has worked with dark horse comics most frequently",
        "Relevant data columns": [
            "authors",
            "title"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['title'].str.contains('Dark Horse Comics')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please go and get all of the books written in english",
        "Relevant data columns": [
            "language"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['language'] == 'en']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "dark horse comic has how many books",
        "Relevant data columns": [
            "title"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query is ambiguous because it does not specify which dark horse comic book series is being referred to.",
        "Ambiguity resolution": "Assuming the user is referring to the dark horse comic book series, we can filter the data to only include books from that series.",
        "Data transformations": "df = df[df['title'].str.contains('dark horse comic')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please look at the o3 data and find the minimum number",
        "Relevant data columns": [
            "O3 Value"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear if the minimum should be found for a specific station or across all stations",
        "Ambiguity resolution": "Find the minimum O3 Value across all stations",
        "Data transformations": "df[df['O3 Value'].notnull()]['O3 Value'].min()",
        "Data transformation operation": [
            "filter",
            "find extremum"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is distribution for pm10 value anything other than normal",
        "Relevant data columns": [
            "PM10 Value"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.dropna(subset=['PM10 Value'])['PM10 Value'].value_counts()",
        "Data transformation operation": [
            "filter",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "could you buy a player with his market value higher than a transfer fee",
        "Relevant data columns": [
            "Market_value",
            "Transfer_fee"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Market_value'] > df['Transfer_fee']]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "list center -backs by what their transfer_fee was",
        "Relevant data columns": [
            "Position",
            "Transfer_fee"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Position'] == 'Centre-Back']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution of the leagues who paid for transferred players in 2010",
        "Relevant data columns": [
            "League_to"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Season']=='2010-2011']['League_to'].value_counts()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how are postgraduate student numbers distributed every year",
        "Relevant data columns": [
            "Postgraduate",
            "Year"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Year', 'Postgraduate']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the number of postgraduate students for each year",
        "Relevant data columns": [
            "Postgraduate",
            "Year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Year')['Postgraduate'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in the videos by \" eminemvevo \", what are the average number of comments made",
        "Relevant data columns": [
            "video_id",
            "comments_disabled"
        ],
        "Data column classification": [
            "data value mention",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear whether the calculation should be done across all the videos or only the videos where comments are not disabled",
        "Ambiguity resolution": "Calculate average comments only for videos where comments are not disabled",
        "Data transformations": "df = df[df[\"channel_title\"]==\"EminemVEVO\"]; df = df[df[\"comments_disabled\"]==False]; df[\"comments\"] = df[\"comments\"].astype(int); average_comments = df[\"comments\"].mean()",
        "Data transformation operation": [
            "filter",
            "select",
            "filter",
            "cast",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "plush - bad unboxing fan mail belongs to which specific channel",
        "Relevant data columns": [
            "title",
            "channel_title"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query is unambiguous.",
        "Ambiguity resolution": null,
        "Data transformations": null,
        "Data transformation operation": [],
        "New Column Name": null,
        "Derivation Specification": null,
        "Missing Data Column": []
    },
    {
        "query": "give me a list of videos, ordered by the number of likes, that are on the channel \" eminemvevo \"",
        "Relevant data columns": [
            "channel_title",
            "likes"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "sort",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is unclear what time range to include in the query",
        "Ambiguity resolution": "Use all videos that are available",
        "Data transformations": "df = df[df['channel_title'] == 'eminemvevo']\ndf.sort_values(by='likes', ascending=False, inplace=True)",
        "Data transformation operation": [
            "filter",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the video with the highest number of tags",
        "Relevant data columns": [
            "tags"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": null,
        "Ambiguity resolution": null,
        "Data transformations": "df_copy = df.copy()\ndf_copy['tag_count'] = df_copy['tags'].apply(lambda x: len(x.split('|')))\ndf_copy = df_copy.sort_values('tag_count', ascending=False)\ndf_copy = df_copy.head(1)",
        "Data transformation operation": [
            "copy",
            "apply",
            "sort",
            "head"
        ],
        "New Column Name": "tag_count",
        "Derivation Specification": "df_copy['tag_count'] = df_copy['tags'].apply(lambda x: len(x.split('|'))",
        "Missing Data Column": ""
    },
    {
        "query": "discover the most liked removed video",
        "Relevant data columns": [
            "likes",
            "video_error_or_removed"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is unclear what criteria to use to find the most liked video among the removed ones. should the most like be compared to the total number of likes across all videos or just among the removed videos?",
        "Ambiguity resolution": "Calculate summary statistics across all years; Generate extermes for GDP for each year",
        "Data transformations": "df = df[df['video_error_or_removed']==True]; df[df['likes']==df['likes'].max()]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do videos with longer titles get more attention",
        "Relevant data columns": [
            "title",
            "views"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": null,
        "Ambiguity resolution": null,
        "Data transformations": null,
        "Data transformation operation": [],
        "New Column Name": null,
        "Derivation Specification": null,
        "Missing Data Column": []
    },
    {
        "query": "tell me about the \" plush - bad unboxing fan mail \" video",
        "Relevant data columns": [
            "title",
            "channel_title",
            "category_id",
            "publish_time",
            "tags",
            "views",
            "likes",
            "dislikes",
            "comment_count",
            "comments_disabled",
            "ratings_disabled",
            "video_error_or_removed",
            "description"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There are multiple videos with the same title",
        "Ambiguity resolution": "Return the video with the most views",
        "Data transformations": "df = df[df['title'] == \"plush - bad unboxing fan mail \"]; df = df.sort_values('views', ascending=False).head(1)",
        "Data transformation operation": [
            "filter",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you show me how the likes are distributed",
        "Relevant data columns": [
            "likes"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear how to compare the likes. Should it be across videos, across days, or across channels?",
        "Ambiguity resolution": "Calculate summary statistics across all videos",
        "Data transformations": "df.groupby('Entity', 'Year')['likes'].agg(['min', 'max', 'mean'])",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what did the majority of students receive as a grade",
        "Relevant data columns": [
            "Grade"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify what type of grade to return, whether it be final grade, average grade, or letter grade",
        "Ambiguity resolution": "Return the letter grade received by the majority of students",
        "Data transformations": "df['Grade'].mode()[0]",
        "Data transformation operation": [
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "use the final exam as the first keyword and midterm exam as the second keyword to rank all the students",
        "Relevant data columns": [
            "Mid-term exams",
            "Final exam"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "rank"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by=['Final exam', 'Mid-term exams'], ascending=[False, False])",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the scope, among all the students, of the cw2 score",
        "Relevant data columns": [
            "CW 2"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The scope of the data can be min, max, range, average, median etc. The query does not specify which one to be used in this context",
        "Ambiguity resolution": "Scope of the data can be the range in this context",
        "Data transformations": "df[['CW 2']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in cw1, how many students achieved the feat of 100%, or full marks",
        "Relevant data columns": [
            "CW 1"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "count"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['CW 1']==100]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "rank the grades from highest to lowest according to the average score",
        "Relevant data columns": [
            "Average"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('Average', ascending=False, ignore_index=True)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "arrange the students by grade and furnish me with a list",
        "Relevant data columns": [
            "Grade"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('Grade')",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a correlation between happiness scores and other attributes",
        "Relevant data columns": [
            "Happiness Score",
            "Economy (GDP per Capita)",
            "Family",
            "Health (Life Expectancy)",
            "Freedom",
            "Trust (Government Corruption)",
            "Generosity"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show a list of similarly rated books",
        "Relevant data columns": [
            "averageRating"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "similarity"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['averageRating'])['title'].agg(lambda x: ', '.join(x))",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me a day with extremely bad air quality",
        "Relevant data columns": [
            "Air Quality",
            "O3 Quality",
            "NO2 Quality",
            "PM10 Quality"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Air Quality'] == 'Bad']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "sort all the counties in connecticut by the percentages of the hispanic population",
        "Relevant data columns": [
            "Hispanic",
            "County"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The dataset does not have any data for Connecticut",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the number if likes from the \" plush - bad unboxing fan mail \" video",
        "Relevant data columns": [
            "likes"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The video title is not present in the dataset. the query cannot be executed",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": [
            "plush - bad unboxing fan mail"
        ]
    },
    {
        "query": "how many students received an a",
        "Relevant data columns": [
            "Grade"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "There is no mention of grade values in the query",
        "Ambiguity resolution": "assuming that a grade of A is equivalent to 90-100",
        "Data transformations": "df[df['Grade'] == 'A']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is the total attribute of one area equal to the sum of the other attributes in any area",
        "Relevant data columns": [
            "Total",
            "Never Married",
            "Married",
            "Living Together",
            "Separated",
            "Divorced",
            "Widowed"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "were there any countries with abnormally low suicide rates",
        "Relevant data columns": [
            "suicides/100k pop",
            "country"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query is ambiguous as it is unclear what is considered as abnormally low",
        "Ambiguity resolution": "define abnormally low as values that are below 25th percentile",
        "Data transformations": "df[df['suicides/100k pop'] <= df['suicides/100k pop'].quantile(0.25)]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "with the suicide larger than 100, determine the ages in albania",
        "Relevant data columns": [
            "suicides_no",
            "age",
            "country"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['country'] == 'Albania') & (df['suicides_no'] > 100)][['age', 'suicides_no']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "of all countries, how is the gdp distribution",
        "Relevant data columns": [
            "country",
            "gdp_for_year ($)"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "i want to see the distribution of the school rankings in geita in 2006",
        "Relevant data columns": [
            "RANK",
            "DISTRICT",
            "YEAR_OF_RESULT"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query mentions distribution of school rankings in Geita in 2006, but the data set does not include any information on school rankings. Therefore, the query is ambiguous and cannot be answered using the provided data set.",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "RANK"
    },
    {
        "query": "determine if there are any schools in neighboring regions that have similar avg_m",
        "Relevant data columns": [
            "AVG_MARK",
            "REGION"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find similarity"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify what is meant by \"similar\" or what the tolerance is for determining if two schools have similar average marks.",
        "Ambiguity resolution": "Define a tolerance for determining if two schools have similar average marks. For example, you could define a tolerance of 5%, which would mean that two schools with average marks within 5% of each other would be considered to have similar average marks.",
        "Data transformations": "df['REGION'] = df['REGION'].astype('category'); df['AVG_MARK'] = df['AVG_MARK'].astype('float')",
        "Data transformation operation": [
            "filter",
            "groupby",
            "count",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me what peacland english medium school 's change pre is in 2016",
        "Relevant data columns": [
            "CHANGE_PREVIOUS_YEAR",
            "NAME",
            "YEAR_OF_RESULT"
        ],
        "Data column classification": [
            "keyword",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['NAME'] == 'PEACLAND ENGLISH MEDIUM SCHOOL') & (df['YEAR_OF_RESULT'] == 2016)]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the average height of the floors of these buildings",
        "Relevant data columns": [
            "Meters",
            "Stories"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Average_Floor_Height'] = df['Meters'] / df['Stories']",
        "Data transformation operation": [
            "new column"
        ],
        "New Column Name": "Average_Floor_Height",
        "Derivation Specification": "df['Average_Floor_Height'] = df['Meters'] / df['Stories']",
        "Missing Data Column": ""
    },
    {
        "query": "the oldest user was born in what year",
        "Relevant data columns": [
            "birthyear"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['birthyear'] == df['birthyear'].min()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "indicate all the travels taking more than 1000 minutes",
        "Relevant data columns": [
            "tripduration"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['tripduration'] > 1000]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me a list of the tripe that take longer than 1,000 minutes",
        "Relevant data columns": [
            "tripduration"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "the query does not specify the units for 1000 minutes",
        "Ambiguity resolution": "assuming the unit is minutes.",
        "Data transformations": "df = df[df['tripduration'] > 1000]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in terms of length, how long is beautiful people",
        "Relevant data columns": [
            "Length.",
            "Track.Name"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Track.Name'] == 'Beautiful People (feat. Khalid)'][['Track.Name', 'Length.']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please indicate the friendly tournament matches in which the home team beat the away team",
        "Relevant data columns": [
            "home_team",
            "away_team",
            "home_score",
            "away_score",
            "tournament"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "filter",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['home_score'] > df['away_score']) & (df['tournament'] == 'Friendly')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what group of nations of have the most games",
        "Relevant data columns": [
            "home_team",
            "away_team"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear if the question is looking for countries that have the most games as either home or away team, or the sum of both",
        "Ambiguity resolution": "Count number of games played by each country as home team and away team",
        "Data transformations": "df['home_team_count'] = df.groupby('home_team')['home_team'].transform('count'); df['away_team_count'] = df.groupby('away_team')['away_team'].transform('count'); df = df[df['home_team_count'] > 0 | df['away_team_count'] > 0]; df['total_games'] = df['home_team_count'] + df['away_team_count']",
        "Data transformation operation": [
            "groupby",
            "transform",
            "count",
            "filter",
            "add"
        ],
        "New Column Name": "total_games",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "universities with similar number of teachers",
        "Relevant data columns": [
            "Num"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "compare",
            "find similarity"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "What is meant by similar. This could be in terms of ranges or actual values. What range should be used to identify similar universities",
        "Ambiguity resolution": "Generate a histogram of the number of teachers to find the distribution of number of teachers across universities",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the sales forecast for each date",
        "Relevant data columns": [
            "Order Date",
            "Sales Forecast"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Order Date')['Sales Forecast'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the distribution for non-violent crimes based on age",
        "Relevant data columns": [
            "age",
            "intent"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify which year or which type of non-violent crime to consider. Also the dataset does not have non-violent crimes as a category",
        "Ambiguity resolution": "Use data between 2012-2017 and consider intent as non-violent crimes",
        "Data transformations": "df = df[df['year']>=2012 & df['year']<=2017]; df = df[df['intent']!='Suicide']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Are most gun death because of suicide",
        "Relevant data columns": [
            "Suicide (People)",
            "Homicide (People)",
            "Firearm deaths (People)"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range",
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The term \"most\" is ambiguous and can refer to either the highest count or the highest percentage. It is unclear if the comparison should be made against all firearm deaths or only against non-suicide firearm deaths.",
        "Ambiguity resolution": "The most common cause of gun death is suicide. The total count of suicide gun deaths is greater than the count of homicide gun deaths.",
        "Data transformations": "df['Suicide (People)'] > df['Homicide (People)']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the title of the biggest app",
        "Relevant data columns": [
            "App",
            "Installs"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "it is unclear what is meant by biggest app - whether it is based on number of installs, app size, or some other metric",
        "Ambiguity resolution": "Find app with highest number of installs",
        "Data transformations": "df[df['Installs'] == df['Installs'].max()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which genres are included in the dataset",
        "Relevant data columns": [
            "Genres"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Genres']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the price distribution of all the beauty apps",
        "Relevant data columns": [
            "Price"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify the category of apps. The dataset contains various app categories, and it is unclear which category should be considered for analysis.",
        "Ambiguity resolution": "Consider only apps belonging to the 'Beauty' category",
        "Data transformations": "df = df[df['Category'] == 'Beauty']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you organize the results of the table by sorting the list according to the age of the stars",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [],
        "Ambiguity in the query": "the age of the stars is not present in the table",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "age of the stars"
    },
    {
        "query": "tell me who won the best performance by an actor in a motion picture - drama award at the 60th ceremony",
        "Relevant data columns": [
            "category",
            "nominee film",
            "win"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not explicitly mention the 'best performance by an actor in a motion picture - drama' award. It only mentions the 'best performance by an actor in a motion picture - drama' category",
        "Ambiguity resolution": "Check if the category is 'Best Motion Picture - Drama' and win is true",
        "Data transformations": "df[(df['category'] == 'Best Motion Picture - Drama') & (df['win'] == True)]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total number of movies released in the year 1998",
        "Relevant data columns": [
            "year_film"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['year_film'] == 1998]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me what movie won best original score in a motion picture in 1997",
        "Relevant data columns": [
            "year_film",
            "year_award",
            "win",
            "nominee film"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify the category, it is unclear which category should be evaluated",
        "Ambiguity resolution": "Assuming the user wants to find the best original score for best motion picture",
        "Data transformations": "df = df[df['year_film']==1997]; df[df['win'] == True][['nominee film']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there an outlier within the value distribution of albinism that causes the result to be skewed",
        "Relevant data columns": [
            "ALBINO"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what value is considered an outlier and how the result is skewed",
        "Ambiguity resolution": "Flag values outside 3 standard deviations from the mean as outliers",
        "Data transformations": "df['ALBINO_ZSCORE'] = (df['ALBINO'] - df['ALBINO'].mean()) / df['ALBINO'].std(); df = df[abs(df['ALBINO_ZSCORE']) < 3]",
        "Data transformation operation": [
            "summarize",
            "filter"
        ],
        "New Column Name": "ALBINO_ZSCORE",
        "Derivation Specification": "df['ALBINO_ZSCORE'] = (df['ALBINO'] - df['ALBINO'].mean()) / df['ALBINO'].std()",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the maximum and minimum number of patients with autism across all regions",
        "Relevant data columns": [
            "AUTISM"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('REGION')['AUTISM'].agg(['max', 'min'])",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "looking at the number of people in all regions with a visual impairment, what is the median",
        "Relevant data columns": [
            "REGION",
            "VISUALLY IMPAIRED"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['VISUALLY IMPAIRED'].notnull()]; df['VISUALLY IMPAIRED'] = df['VISUALLY IMPAIRED'].astype(float); df['VISUALLY IMPAIRED'].median()",
        "Data transformation operation": [
            "filter",
            "select",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me the country with the lowest trust score",
        "Relevant data columns": [
            "Country",
            "Trust (Government Corruption)"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Trust (Government Corruption)'] == df['Trust (Government Corruption)'].min()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the area in the previous decade that increased rapidly in the happiness score",
        "Relevant data columns": [
            "Happiness Score",
            "Year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify a specific region, so it is unclear which area is being referred to",
        "Ambiguity resolution": "Assume the user is referring to the region with the largest increase in happiness score over the previous decade",
        "Data transformations": "df = df.sort_values('Year'); df = df.groupby('Region')['Happiness Score'].diff().groupby(df['Year']).max().reset_index()",
        "Data transformation operation": [
            "sort",
            "groupby",
            "diff",
            "groupby",
            "max",
            "reset index"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me any clustering there may be in the gdp that has a happiness score of larger than 5",
        "Relevant data columns": [
            "Happiness Score",
            "Economy (GDP per Capita)"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "clustering",
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The term \"clustering\" can have several different meanings. It is unclear whether the user is referring to clustering countries by their GDP, clustering countries by their happiness score, or clustering countries by both GDP and happiness score. Additionally, it is unclear what the user means by \"any clustering\".",
        "Ambiguity resolution": "Consider all data points where happiness score is greater than 5. If the query requires to find clustering by both columns, plot GDP as the x-axis and happiness score as the y-axis. ",
        "Data transformations": "df = df[df['Happiness Score'] > 5]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me in what range will the number of countries in each region fall",
        "Relevant data columns": [
            "Country",
            "Region"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear how to count the number of countries in each region. should all years be counted or a single year?",
        "Ambiguity resolution": "Count the number of unique countries for each region for all years",
        "Data transformations": "df.groupby('Region')['Country'].nunique()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "organize the countries by their region",
        "Relevant data columns": [
            "Country",
            "Region"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "Sort"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by='Region')",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "for all the regions, can you show me the pattern of the happiness score",
        "Relevant data columns": [
            "Happiness Score",
            "Region"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Region')[['Region', 'Happiness Score']]",
        "Data transformation operation": [
            "groupby",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what are all the countries that have a happiness score similar to fineland  5 is an acceptable error score",
        "Relevant data columns": [
            "Happiness Score"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "data value mention"
        ],
        "Low-level visualization task": [
            "similarity"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The word similar can be interpreted in various ways",
        "Ambiguity resolution": "Assume similar means within an error of 0.5",
        "Data transformations": "df = df[abs(df['Happiness Score'] - 7.406) <= 0.5]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "when looking at the average income in european countries, what is the variance",
        "Relevant data columns": [
            "Median Income 2007"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query is ambiguous because it is unclear which European countries are being referred to.",
        "Ambiguity resolution": "The ambiguity can be resolved by filtering the data to include only European countries.",
        "Data transformations": "df = df[df['State'].isin(european_countries)]; df['Median Income 2007'].var()",
        "Data transformation operation": [
            "filter",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the average profit of each state",
        "Relevant data columns": [
            "Profit",
            "State"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('State')['Profit'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What is the sales vs profit ratio of all the zones",
        "Relevant data columns": [
            "Sales",
            "Profit",
            "Region"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify how the ratio should be calculated. Should it be a simple average, a weighted average, or a maximum value?",
        "Ambiguity resolution": "We will assume that the user wants to calculate the simple average of the sales to profit ratio for each zone.",
        "Data transformations": "df.groupby('Region')['Sales', 'Profit'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What storm produced the least air pressure",
        "Relevant data columns": [
            "pressure",
            "name"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['pressure'] == df['pressure'].min()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Average tropical storm diameter",
        "Relevant data columns": [
            "ts_diameter"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['category'] == 'tropical storm']; df['ts_diameter'].mean()",
        "Data transformation operation": [
            "filter",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "retrieve the neighborhood with more than 100 female births in ciutat vella in 2013",
        "Relevant data columns": [
            "District Name",
            "Number",
            "Gender",
            "Year"
        ],
        "Data column classification": [
            "data value mention",
            "keyword",
            "data value mention",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not explicitly mention the district name. It is unclear which district is being referred to.",
        "Ambiguity resolution": "The query is referring to the district of \"Ciutat Vella\".",
        "Data transformations": "df = df[(df['District Name'] == \"Ciutat Vella\") & (df['Year'] == 2013) & (df['Gender'] == \"Girls\")]; df = df[df['Number'] > 100]",
        "Data transformation operation": [
            "filter",
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the distribution of all births in all districts between 2013 and 2017",
        "Relevant data columns": [
            "Year",
            "District Name"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear if the user wants the distribution of births across districts for each year or across years for each district",
        "Ambiguity resolution": "Plot the distribution of births across all districts for each year and across all years for each district",
        "Data transformations": "df.groupby(['District Name'])['Number'].sum(); df.groupby(['Year'])['Number'].sum()",
        "Data transformation operation": [
            "groupby",
            "sum"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what 's the size of \" kids paint free - drawing fun \"",
        "Relevant data columns": [
            "Size"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "There are multiple apps named kids paint free - drawing fun. It is unclear which one to evaluate",
        "Ambiguity resolution": "The context does not provide additional information to differentiate the apps. Assuming that all instances are to be considered.",
        "Data transformations": "df[df['App'] == 'kids paint free - drawing fun']['Size']",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "see if you can locate the most recent gaming app",
        "Relevant data columns": [
            "Category",
            "Last Updated"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query is ambiguous because it does not specify what is meant by 'most recent'. It could mean the app that was most recently updated, or the app that was most recently released.",
        "Ambiguity resolution": "Assume that 'most recent' means the app that was most recently updated",
        "Data transformations": "df = df[df['Category'] == 'GAME'].sort_values('Last Updated', ascending=False).head(1)",
        "Data transformation operation": [
            "filter",
            "sort",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "tell me free or paid apps have a higher mean rating",
        "Relevant data columns": [
            "Price",
            "Rating"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "comparison"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear how to categorize apps as paid and free. There are multiple currencies specified in the price column and there are also free apps with in-app purchases",
        "Ambiguity resolution": "Create a binary column based on the presence of any price value",
        "Data transformations": "df['IsPaid'] = df['Price'] != 0; df.groupby('IsPaid').agg({'Rating': 'mean'})",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "IsPaid",
        "Derivation Specification": "df['IsPaid'] = df['Price'] != 0",
        "Missing Data Column": ""
    },
    {
        "query": "which apps have support for versions of android lower than 40",
        "Relevant data columns": [
            "Android Ver"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Android Ver'].lt('4.0')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the price distribution of all the beauty apps",
        "Relevant data columns": [
            "Price",
            "Category"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "There is no mention of the category 'Beauty' in the dataset. Therefore, it is unclear how to filter the data to include only beauty apps",
        "Ambiguity resolution": "No resolution possible given the available data",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "Beauty"
    },
    {
        "query": "look for the region that has the most people living in it",
        "Relevant data columns": [
            "Region",
            "Population"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Population']==df['Population'].max()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "remove any regions with a population ratio of hf lower than 15",
        "Relevant data columns": [
            "ration of population over HF"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['ration of population over HF'] >= 1.5]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in the 60th ceremony, the award for best performance by an actor in a motion picture was won by whom",
        "Relevant data columns": [
            "category",
            "nominee film",
            "win"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['ceremony']==60) & (df['category'] == 'Best Performance by an Actor in a Motion Picture')][['category', 'nominee film', 'win']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How much did average worldwide gross vary by major genre",
        "Relevant data columns": [
            "Worldwide Gross",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Major Genre')['Worldwide Gross'].mean()",
        "Data transformation operation": [
            "groupby",
            "mean"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Is there a relationship between IMDB rating and rotten tomatoes rating",
        "Relevant data columns": [
            "IMDB Rating",
            "Rotten Tomatoes Rating"
        ],
        "Data column classification": [
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "For each genre and rating, what is the total world-wide gross earnings",
        "Relevant data columns": [
            "Worldwide Gross",
            "Content Rating",
            "Major Genre"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Summarize",
            "Find Extremum"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby(['Major Genre', 'Content Rating'])['Worldwide Gross'].sum()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How many movies are of each length",
        "Relevant data columns": [
            "Running Time"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "Retrieve Value",
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Running Time'].value_counts()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how many movies are there in 20 minute bins of running time",
        "Relevant data columns": [
            "Running Time"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "Characterize Distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Binned Running Time'] = pd.cut(df['Running Time'], bins=range(0, 120, 20), right=False, labels=range(0, 6)); df.groupby('Binned Running Time').size()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "Binned Running Time",
        "Derivation Specification": "df['Binned Running Time'] = pd.cut(df['Running Time'], bins=range(0, 120, 20), right=False, labels=range(0, 6))",
        "Missing Data Column": ""
    },
    {
        "query": "relation between rotten tomatoes rating and IMDB rating",
        "Relevant data columns": [
            "Rotten Tomatoes Rating",
            "IMDB Rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare",
            "correlate"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there an obvious clustering",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "find pattern"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify the variables to be clustered on",
        "Ambiguity resolution": "To find patterns, it would be helpful to determine which data columns to use for the clustering. Therefore, we can ask the user to specify the data columns to use.",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "the population range needs to be discovered",
        "Relevant data columns": [
            "Population"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['Population']].describe()",
        "Data transformation operation": [
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can we conclude that higher happiness comes from higher freedom",
        "Relevant data columns": [
            "Happiness Score",
            "Freedom"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.select(['Happiness Score', 'Freedom'])",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "please review this dataset and tell me which authors it includes",
        "Relevant data columns": [
            "authors"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['authors']",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "produce a list of book titles published during the current year",
        "Relevant data columns": [
            "publishedDate"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['publishedDate'].dt.year == df['publishedDate'].dt.year.max()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in terms of the readings, group the similar timestamps for the sants",
        "Relevant data columns": [
            "Station",
            "O3 Value",
            "NO2 Value",
            "PM10 Value",
            "Generated"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "cluster"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The meaning of similar timestamps is not clear, it could mean same hour or same date",
        "Ambiguity resolution": "Find similar timestamps based on the date and hour of the reading",
        "Data transformations": "df = df[df['Station'] == 'Barcelona - Sants'].groupby(['Generated', 'O3 Value', 'NO2 Value', 'PM10 Value']).size().reset_index(name='count')",
        "Data transformation operation": [
            "filter",
            "groupby",
            "count",
            "reset_index"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "for o3, what is the distribution value",
        "Relevant data columns": [
            "O3 Value",
            "Station"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query is ambiguous because it does not specify which distribution value should be calculated (e.g., mean, median, mode).",
        "Ambiguity resolution": "Calculate the mean of the O3 Value column",
        "Data transformations": "df.groupby('Station')['O3 Value'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "in the whole table, show me the best record of pm10",
        "Relevant data columns": [
            "PM10 Quality",
            "PM10 Value",
            "Station"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['PM10 Quality'] == 'Good']; df[df['PM10 Value'] == df['PM10 Value'].min()]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "based on their pollution, group the locations together that are similar",
        "Relevant data columns": [
            "Station",
            "NO2 Quality",
            "NO2 Value",
            "PM10 Quality",
            "PM10 Value",
            "O3 Quality",
            "O3 Value"
        ],
        "Data column classification": [
            "data value mention",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Cluster"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear which pollution measurements to use in the grouping",
        "Ambiguity resolution": "Use all pollution measurements (NO2 Quality, NO2 Value, PM10 Quality, PM10 Value, O3 Quality, O3 Value) in the grouping",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are there any outliers in pm10 readings from a temporal perspective",
        "Relevant data columns": [
            "PM10 Value",
            "Station",
            "Generated"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find anomalies"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['PM10 Quality'] == 'Good']['PM10 Value']",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "work out the quality of o3",
        "Relevant data columns": [
            "O3 Quality"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['O3 Quality']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what days had really bad air quality",
        "Relevant data columns": [
            "NO2 Quality",
            "NO2 Value",
            "PM10 Quality",
            "PM10 Value",
            "O3 Quality",
            "O3 Value"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify how to determine what is \"really bad air quality\" and does not provide any threshold values.",
        "Ambiguity resolution": " Assume that really bad air quality means both NO2 and PM10 values are greater than 80",
        "Data transformations": "df = df[(df['NO2 Value'] > 80) & (df['PM10 Value'] > 80)]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "show me the data attribute that has the most na values, for example the hardest data points to collect",
        "Relevant data columns": [
            "O3 Value",
            "NO2 Value",
            "PM10 Value"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.isnull().sum().sort_values(ascending=False).head(1)",
        "Data transformation operation": [
            "groupby",
            "count",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "describe the change in air quality over one day  describe the change in each air pollutant",
        "Relevant data columns": [
            "O3 Value",
            "NO2 Value",
            "PM10 Value",
            "Hour"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "trend",
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is unclear what is meant by the phrase \"over one day\" and which day this refers to",
        "Ambiguity resolution": "assume one day means a 24 hour period and use the \"Hour\" column to identify the correct 24 hour period",
        "Data transformations": "df = df[df['Station'] == 'Barcelona - Sants']; df = df.sort_values('Hour');",
        "Data transformation operation": [
            "filter",
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "could you search all available values for pm10 quality",
        "Relevant data columns": [
            "PM10 Quality"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['PM10 Quality'].unique()",
        "Data transformation operation": [
            "unique"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how old was david when he was transferred in 2010",
        "Relevant data columns": [
            "Name",
            "Age",
            "Season"
        ],
        "Data column classification": [
            "data value mention",
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "Ambiguity exists because there are two david's in the dataset",
        "Ambiguity resolution": "filter data for david and then retrieve age",
        "Data transformations": "df = df[(df['Name'] == 'David Silva') & (df['Season'] == '2010-2011')][['Name', 'Age', 'Season']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what player had a market value of 50,000,000 and was transferred for 58,500,000 in the 2010\u201a\u00c4\u00ec2011",
        "Relevant data columns": [
            "Name",
            "Market_value",
            "Transfer_fee",
            "Season"
        ],
        "Data column classification": [
            "inferred",
            "data value mention",
            "data value mention",
            "data value mention"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[(df['Market_value'] == 50000000.0) & (df['Transfer_fee'] == 58500000) & (df['Season'] == '2010-2011')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "for the center forward position, what was the highest market value for the 2011 -2012 season",
        "Relevant data columns": [
            "Market_value",
            "Season",
            "Position"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[(df['Season'] == '2011-2012') & (df['Position'] == 'Centre-Forward')]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which player was the oldest that was transferred",
        "Relevant data columns": [
            "Name",
            "Age"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['Age']==df['Age'].max()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do you feel that midfield players have a lower market value than front court players",
        "Relevant data columns": [
            "Position",
            "Market_value"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compare"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query mentions front court players, but the dataset only includes positions and does not have a column for front court players. Also, the query is subjective and not clear about the desired comparison",
        "Ambiguity resolution": "Create a new column to distinguish between front court players and midfield players; group the data by position and calculate average market value for each position",
        "Data transformations": "df['front_court_player'] = df['Position'].isin(['Centre-Forward', 'Right Winger', 'Attacking Midfield'])df.groupby('Position').agg({'Market_value': 'mean'})",
        "Data transformation operation": [
            "filter",
            "groupby",
            "summarize"
        ],
        "New Column Name": "front_court_player",
        "Derivation Specification": "df['front_court_player'] = df['Position'].isin(['Centre-Forward', 'Right Winger', 'Attacking Midfield'])",
        "Missing Data Column": ""
    },
    {
        "query": "name movies released in 2017",
        "Relevant data columns": [
            "title",
            "release_year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['release_year'] == 2017]['title']",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "sort the movies by length",
        "Relevant data columns": [
            "duration"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "sort"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values(by=['duration'])",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how long is the run time of average r -rated movies",
        "Relevant data columns": [
            "duration",
            "rating"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['rating'] == 'R']; df['duration'] = pd.to_numeric(df['duration'].str.slice(0, -3))",
        "Data transformation operation": [
            "filter",
            "convert"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "give me the numbers of movies that were released in 2017",
        "Relevant data columns": [
            "release_year",
            "type"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value",
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['type'] == 'Movie']; df = df[df['release_year'] == 2017]; count = df['show_id'].count()",
        "Data transformation operation": [
            "filter",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there an average run time for movies",
        "Relevant data columns": [
            "duration"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['type'] == 'Movie']; df['duration'] = pd.to_numeric(df['duration'], errors='coerce'); df['duration'] = df['duration'].astype('float'); df.groupby('duration').size().reset_index(name='count')",
        "Data transformation operation": [
            "filter",
            "select",
            "convert",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is the running time of movies recently longer than it used to be",
        "Relevant data columns": [
            "duration",
            "release_year"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "compare",
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what is meant by \"recently\" and \"used to be\"",
        "Ambiguity resolution": "It is assumed that \"recently\" refers to the last five years and \"used to be\" refers to the five years before that. ",
        "Data transformations": "df['release_year_group'] = pd.cut(df['release_year'], [1990, 2000, 2010, 2015, 2020])",
        "Data transformation operation": [
            "cut"
        ],
        "New Column Name": "release_year_group",
        "Derivation Specification": "df['release_year_group'] = pd.cut(df['release_year'], [1990, 2000, 2010, 2015, 2020])",
        "Missing Data Column": ""
    },
    {
        "query": "do movie tags and duration have a connection",
        "Relevant data columns": [
            "duration",
            "listed_in"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlate"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[['duration', 'listed_in']]",
        "Data transformation operation": [
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "determine if the running time of movies has increased in recent years",
        "Relevant data columns": [
            "duration",
            "release_year"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "Trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['release_year'] = pd.to_datetime(df['release_year'], format='%Y'); df.groupby('release_year')['duration'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the sales distribution of type 4046 in 2015",
        "Relevant data columns": [
            "type",
            "Total Volume",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "inferred",
            "data value mention"
        ],
        "Low-level visualization task": [
            "characterize distribution"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is unclear if the user wants to see the distribution of 4046 across different years or months",
        "Ambiguity resolution": "We can assume that the user wants to see the distribution across different years, as the query specifies 'in 2015'",
        "Data transformations": "df = df[(df['type'] == 'conventional') & (df['year'] == 2015)]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "using the three types of avocado 's sales ratio, provide the groups of regions",
        "Relevant data columns": [],
        "Data column classification": [],
        "Low-level visualization task": [
            "Cluster"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [],
        "Ambiguity in the query": "It is unclear what is meant by 'groups of regions'. Does it mean regions with similar sales ratios, or regions with similar avocado types?",
        "Ambiguity resolution": "We assume that 'groups of regions' means regions with similar sales ratios",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "filter all the videos published before yesterday",
        "Relevant data columns": [
            "trending_date"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not explicitly specify the date range for \"yesterday\"",
        "Ambiguity resolution": "Assuming \"yesterday\" refers to the day before the current day, calculate the date range for videos published before yesterday",
        "Data transformations": "df = df[df['trending_date'] < yesterday]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How has the average weight of cars changed over the years",
        "Relevant data columns": [
            "weightlbs",
            "year"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('year')['weightlbs'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What storm had the greatest diameter of tropical storm strength winds",
        "Relevant data columns": [
            "name",
            "ts_diameter",
            "wind"
        ],
        "Data column classification": [
            "inferred",
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['wind']>=34]; df[df['ts_diameter']==df['ts_diameter'].max()]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What lat/long locations are most likely to experience hurricanes",
        "Relevant data columns": [
            "lat",
            "long",
            "category"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "determine range"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "Average time for each hurricane status",
        "Relevant data columns": [
            "status",
            "day"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "Time can be calculated based on day, hour, or a combination of the two",
        "Ambiguity resolution": "Since the data has day and hour, average time should be calculated using both day and hour",
        "Data transformations": "df.groupby('status').agg({'day':['mean'], 'hour':['mean']})",
        "Data transformation operation": [
            "groupby",
            "mean"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "What city has the highest crime rate",
        "Relevant data columns": [
            "city_or_county",
            "n_killed",
            "n_injured"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The crime rate is not directly mentioned in the query, but it is implied by the question of which city has the highest crime rate. This ambiguity could be resolved by clarifying what is meant by \"crime rate\" in this context.",
        "Ambiguity resolution": "The sum of the killed and injured is used as a proxy for crime rate.",
        "Data transformations": "df['crime_rate'] = df['n_killed'] + df['n_injured']; df.groupby('city_or_county')['crime_rate'].sum().idxmax()",
        "Data transformation operation": [
            "derive",
            "groupby",
            "sum",
            "idxmax"
        ],
        "New Column Name": "crime_rate",
        "Derivation Specification": "df['crime_rate'] = df['n_killed'] + df['n_injured']",
        "Missing Data Column": ""
    },
    {
        "query": "What\u2019s the frequency of gun violence incidents with multiple victims",
        "Relevant data columns": [
            "n_injured",
            "n_killed"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize",
            "count"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The term frequency is not clearly defined",
        "Ambiguity resolution": "Count number of victims per incident",
        "Data transformations": "df = df[df['n_killed'] > 0]; df = df[df['n_injured'] > 0]; df.groupby(['n_killed', 'n_injured'])['incident_id'].count().reset_index()",
        "Data transformation operation": [
            "filter",
            "filter",
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "How have homicide rates increased over time",
        "Relevant data columns": [
            "Homicide (People)",
            "Years"
        ],
        "Data column classification": [
            "keyword",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not explicitly specify the data transformation required to calculate the homicide rates. It is unclear if the rates should be calculated as a percentage of the population or as a raw count.",
        "Ambiguity resolution": "Calculate the homicide rate as a percentage of the population",
        "Data transformations": "df['Homicide rate'] = df['Homicide (People)'] / df['Population'] * 100000",
        "Data transformation operation": [
            "calculate"
        ],
        "New Column Name": "Homicide rate",
        "Derivation Specification": "Homicide rate = (Homicide (People)) / (Population) * 100000",
        "Missing Data Column": ""
    },
    {
        "query": "please identify the parameters of the happiness score in western europe",
        "Relevant data columns": [
            "Country",
            "Region",
            "Happiness Rank",
            "Happiness Score",
            "Economy (GDP per Capita)",
            "Family",
            "Health (Life Expectancy)",
            "Freedom",
            "Trust (Government Corruption)",
            "Generosity",
            "Dystopia Residual"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['Region'] == 'Western Europe']",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the most expensive book and who published it",
        "Relevant data columns": [
            "pageCount"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum",
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('pageCount', ascending=False).head(1)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "what is the total number of categories",
        "Relevant data columns": [
            "Category"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df['Category'].nunique()",
        "Data transformation operation": [
            "unique"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "are you aware of any clustering of the seasons in which players were transferred to the premier league",
        "Relevant data columns": [
            "Season"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "clustering"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Season').count()",
        "Data transformation operation": [
            "groupby",
            "count"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do you know the median score of all students in cw1",
        "Relevant data columns": [
            "CW 1"
        ],
        "Data column classification": [
            "keyword"
        ],
        "Low-level visualization task": [
            "retrieve value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[['CW 1']].median()",
        "Data transformation operation": [
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "select all cw1 scores not less than 80%",
        "Relevant data columns": [
            "CW 1"
        ],
        "Data column classification": [
            "data value mention"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df[df['CW 1'] >= 80]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "provide the total sum of all the separated, divorced, and widowed people in lindi",
        "Relevant data columns": [
            "Separated",
            "Divorced",
            "Widowed"
        ],
        "Data column classification": [
            "keyword",
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "compute derived value"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "Lindi is not a column in the data table",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": "Lindi"
    },
    {
        "query": "has there been an increase or decrease in the gdp of china over the last 10 years",
        "Relevant data columns": [
            "country",
            "year",
            "gdp_for_year ($)"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear how many years should be considered when looking at the trend",
        "Ambiguity resolution": "Considering 10 years prior to the last year with data",
        "Data transformations": "df = df[df['country'] == 'China']; df = df[df['year'] >= (df['year'].max() - 10)]; df = df[['year', 'gdp_for_year ($)']]",
        "Data transformation operation": [
            "filter",
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which of these school have a pass rate of over 90",
        "Relevant data columns": [
            "PASS_RATE"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df = df[df['PASS_RATE'] > 90]; df[['NAME', 'PASS_RATE']]",
        "Data transformation operation": [
            "filter",
            "select"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "do you know of any trip that would take longer than 1000 minutes",
        "Relevant data columns": [
            "tripduration"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "filter"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "it is unclear how to handle missing values in the trip duration column",
        "Ambiguity resolution": "Filter out rows with missing trip duration",
        "Data transformations": "df = df[df['tripduration'] > 1000]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which position has the highest average of playing time",
        "Relevant data columns": [
            "Pos",
            "MPG"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "keyword",
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.groupby('Pos')['MPG'].mean()",
        "Data transformation operation": [
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "describe the popularity of the loudest song",
        "Relevant data columns": [
            "Loudness..dB..",
            "Popularity"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "It is unclear how to find the song with the highest loudness. Should the loudness be considered across all tracks, or should the loudness be summarized for each artist or genre?",
        "Ambiguity resolution": "Determine the song with the highest loudness value across all tracks",
        "Data transformations": "df[df['Loudness..dB..'] == df['Loudness..dB..'].max()]",
        "Data transformation operation": [
            "filter"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "from all of the universities in london, list the one who has the most faculties",
        "Relevant data columns": [
            "Location",
            "Name"
        ],
        "Data column classification": [
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "The query does not specify the column used to identify faculties",
        "Ambiguity resolution": "Assume faculties are identified using the Num column",
        "Data transformations": "df = df[df['Location'] == 'London']; df.groupby('Name')['Num'].max()",
        "Data transformation operation": [
            "filter",
            "groupby",
            "summarize"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "is there a regional concentration trend in gdp development",
        "Relevant data columns": [
            "GDP"
        ],
        "Data column classification": [
            "inferred"
        ],
        "Low-level visualization task": [
            "trend"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "It is unclear what the spatial component of this query is",
        "Ambiguity resolution": "add region column",
        "Data transformations": "df['Region'] = df['Country'].str.split(' ').str[0]",
        "Data transformation operation": [
            "add column"
        ],
        "New Column Name": "Region",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "how are gdp and mteu correlated",
        "Relevant data columns": [
            "mTEU",
            "GDP"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "can you tell me the state which may have the largest average population in the next year",
        "Relevant data columns": [
            "State",
            "July 1, 2001 Population",
            "July 1, 2002 Population"
        ],
        "Data column classification": [
            "inferred",
            "inferred",
            "inferred"
        ],
        "Low-level visualization task": [
            "find extremum",
            "summarize"
        ],
        "Low-level visualization task classification": [
            "inferred",
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "The query does not specify which year is considered 'next year'.",
        "Ambiguity resolution": "Assume the 'next year' is the year 2003, which is the year after the latest year in the dataset.",
        "Data transformations": "df_next_year = df[['State', 'July 1, 2002 Population']].rename(columns={'July 1, 2002 Population': 'July 1, 2003 Population'}); df_next_year['Average Population'] = (df_next_year['July 1, 2003 Population'] + df['July 1, 2001 Population']) / 2; df_next_year = df_next_year.groupby('State')['Average Population'].mean().reset_index()",
        "Data transformation operation": [
            "select",
            "rename",
            "summarize",
            "groupby",
            "mean"
        ],
        "New Column Name": "Average Population",
        "Derivation Specification": "Average Population = (July 1, 2003 Population + July 1, 2001 Population) / 2",
        "Missing Data Column": ""
    },
    {
        "query": "are the students who are younger more likely to use wechat",
        "Relevant data columns": [
            "age",
            "social App"
        ],
        "Data column classification": [
            "keyword",
            "keyword"
        ],
        "Low-level visualization task": [
            "correlation"
        ],
        "Low-level visualization task classification": [
            "inferred"
        ],
        "Visualization goal": [
            "exploratory"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "",
        "Data transformation operation": [],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    },
    {
        "query": "which movie is the highest -grossing",
        "Relevant data columns": [
            "Movie",
            "Revenue ($)"
        ],
        "Data column classification": [
            "inferred",
            "keyword"
        ],
        "Low-level visualization task": [
            "find extremum"
        ],
        "Low-level visualization task classification": [
            "keyword"
        ],
        "Visualization goal": [
            "targeted"
        ],
        "Ambiguity in the query": "",
        "Ambiguity resolution": "",
        "Data transformations": "df.sort_values('Revenue ($)', ascending = False).head(1)",
        "Data transformation operation": [
            "sort"
        ],
        "New Column Name": "",
        "Derivation Specification": "",
        "Missing Data Column": ""
    }
]